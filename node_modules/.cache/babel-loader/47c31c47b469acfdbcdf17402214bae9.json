{"ast":null,"code":"import _slicedToArray from \"/Users/Junhaeng/untitled folder/junior-design/amplifyapp/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/Junhaeng/untitled folder/junior-design/amplifyapp/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/Junhaeng/untitled folder/junior-design/amplifyapp/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nexport var Schema = /*#__PURE__*/function () {\n  function Schema(schema) {\n    _classCallCheck(this, Schema);\n    this.spec = schema;\n  }\n  _createClass(Schema, [{\n    key: \"getFieldType\",\n    value: function getFieldType(fieldName) {\n      var _a;\n      return (_a = this.spec) === null || _a === void 0 ? void 0 : _a[fieldName];\n    }\n  }, {\n    key: \"getKeys\",\n    value: function getKeys() {\n      return Object.keys(this.spec);\n    }\n  }, {\n    key: \"setSchemaOptionsForAllType\",\n    value: function setSchemaOptionsForAllType(data) {\n      var _this = this;\n      if (data === this.data) {\n        return;\n      }\n      Object.entries(this.spec).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          type = _ref2[1];\n        type.setSchemaOptions(_this.spec, data === null || data === void 0 ? void 0 : data[key]);\n      });\n      this.data = data;\n    }\n  }, {\n    key: \"checkForField\",\n    value: function checkForField(fieldName, data) {\n      this.setSchemaOptionsForAllType(data);\n      var fieldChecker = this.spec[fieldName];\n      if (!fieldChecker) {\n        // fieldValue can be anything if no schema defined\n        return {\n          hasError: false\n        };\n      }\n      return fieldChecker.check(data[fieldName], data, fieldName);\n    }\n  }, {\n    key: \"checkForFieldAsync\",\n    value: function checkForFieldAsync(fieldName, data) {\n      this.setSchemaOptionsForAllType(data);\n      var fieldChecker = this.spec[fieldName];\n      if (!fieldChecker) {\n        // fieldValue can be anything if no schema defined\n        return Promise.resolve({\n          hasError: false\n        });\n      }\n      return fieldChecker.checkAsync(data[fieldName], data, fieldName);\n    }\n  }, {\n    key: \"check\",\n    value: function check(data) {\n      var _this2 = this;\n      var checkResult = {};\n      Object.keys(this.spec).forEach(function (key) {\n        if (typeof data === 'object') {\n          checkResult[key] = _this2.checkForField(key, data);\n        }\n      });\n      return checkResult;\n    }\n  }, {\n    key: \"checkAsync\",\n    value: function checkAsync(data) {\n      var _this3 = this;\n      var checkResult = {};\n      var promises = [];\n      var keys = [];\n      Object.keys(this.spec).forEach(function (key) {\n        keys.push(key);\n        promises.push(_this3.checkForFieldAsync(key, data));\n      });\n      return Promise.all(promises).then(function (values) {\n        for (var i = 0; i < values.length; i += 1) {\n          checkResult[keys[i]] = values[i];\n        }\n        return checkResult;\n      });\n    }\n  }]);\n  return Schema;\n}();\nexport function SchemaModel(o) {\n  return new Schema(o);\n}\nSchemaModel.combine = function combine() {\n  for (var _len = arguments.length, specs = new Array(_len), _key = 0; _key < _len; _key++) {\n    specs[_key] = arguments[_key];\n  }\n  return new Schema(specs.map(function (model) {\n    return model.spec;\n  }).reduce(function (accumulator, currentValue) {\n    return Object.assign(accumulator, currentValue);\n  }, {}));\n};","map":{"version":3,"sources":["../src/Schema.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["export class Schema {\n    constructor(schema) {\n        this.spec = schema;\n    }\n    getFieldType(fieldName) {\n        var _a;\n        return (_a = this.spec) === null || _a === void 0 ? void 0 : _a[fieldName];\n    }\n    getKeys() {\n        return Object.keys(this.spec);\n    }\n    setSchemaOptionsForAllType(data) {\n        if (data === this.data) {\n            return;\n        }\n        Object.entries(this.spec).forEach(([key, type]) => {\n            type.setSchemaOptions(this.spec, data === null || data === void 0 ? void 0 : data[key]);\n        });\n        this.data = data;\n    }\n    checkForField(fieldName, data) {\n        this.setSchemaOptionsForAllType(data);\n        const fieldChecker = this.spec[fieldName];\n        if (!fieldChecker) {\n            // fieldValue can be anything if no schema defined\n            return { hasError: false };\n        }\n        return fieldChecker.check(data[fieldName], data, fieldName);\n    }\n    checkForFieldAsync(fieldName, data) {\n        this.setSchemaOptionsForAllType(data);\n        const fieldChecker = this.spec[fieldName];\n        if (!fieldChecker) {\n            // fieldValue can be anything if no schema defined\n            return Promise.resolve({ hasError: false });\n        }\n        return fieldChecker.checkAsync(data[fieldName], data, fieldName);\n    }\n    check(data) {\n        const checkResult = {};\n        Object.keys(this.spec).forEach(key => {\n            if (typeof data === 'object') {\n                checkResult[key] = this.checkForField(key, data);\n            }\n        });\n        return checkResult;\n    }\n    checkAsync(data) {\n        const checkResult = {};\n        const promises = [];\n        const keys = [];\n        Object.keys(this.spec).forEach((key) => {\n            keys.push(key);\n            promises.push(this.checkForFieldAsync(key, data));\n        });\n        return Promise.all(promises).then(values => {\n            for (let i = 0; i < values.length; i += 1) {\n                checkResult[keys[i]] = values[i];\n            }\n            return checkResult;\n        });\n    }\n}\nexport function SchemaModel(o) {\n    return new Schema(o);\n}\nSchemaModel.combine = function combine(...specs) {\n    return new Schema(specs\n        .map(model => model.spec)\n        .reduce((accumulator, currentValue) => Object.assign(accumulator, currentValue), {}));\n};\n//# sourceMappingURL=Schema.js.map"]},"metadata":{},"sourceType":"module"}