{"ast":null,"code":"export function attachEventProps(node, newProps, oldProps) {\n  if (oldProps === void 0) {\n    oldProps = {};\n  }\n  var className = getClassName(node.classList, newProps, oldProps);\n  if (className) {\n    node.className = className;\n  }\n  Object.keys(newProps).forEach(function (name) {\n    if (name === 'children' || name === 'style' || name === 'ref' || name === 'className') {\n      return;\n    }\n    if (name.indexOf('on') === 0 && name[2] === name[2].toUpperCase()) {\n      var eventName = name.substring(2);\n      var eventNameLc = eventName[0].toLowerCase() + eventName.substring(1);\n      if (!isCoveredByReact(eventNameLc)) {\n        syncEvent(node, eventNameLc, newProps[name]);\n      }\n    } else {\n      node[name] = newProps[name];\n    }\n  });\n}\nexport function getClassName(classList, newProps, oldProps) {\n  // map the classes to Maps for performance\n  var currentClasses = arrayToMap(classList);\n  var incomingPropClasses = arrayToMap(newProps.className ? newProps.className.split(' ') : []);\n  var oldPropClasses = arrayToMap(oldProps.className ? oldProps.className.split(' ') : []);\n  var finalClassNames = [];\n  // loop through each of the current classes on the component\n  // to see if it should be a part of the classNames added\n  currentClasses.forEach(function (currentClass) {\n    if (incomingPropClasses.has(currentClass)) {\n      // add it as its already included in classnames coming in from newProps\n      finalClassNames.push(currentClass);\n      incomingPropClasses.delete(currentClass);\n    } else if (!oldPropClasses.has(currentClass)) {\n      // add it as it has NOT been removed by user\n      finalClassNames.push(currentClass);\n    }\n  });\n  incomingPropClasses.forEach(function (s) {\n    return finalClassNames.push(s);\n  });\n  return finalClassNames.join(' ');\n}\n/**\n * Checks if an event is supported in the current execution environment.\n * @license Modernizr 3.0.0pre (Custom Build) | MIT\n */\nexport function isCoveredByReact(eventNameSuffix, doc) {\n  if (doc === void 0) {\n    doc = document;\n  }\n  var eventName = 'on' + eventNameSuffix;\n  var isSupported = (eventName in doc);\n  if (!isSupported) {\n    var element = doc.createElement('div');\n    element.setAttribute(eventName, 'return;');\n    isSupported = typeof element[eventName] === 'function';\n  }\n  return isSupported;\n}\nexport function syncEvent(node, eventName, newEventHandler) {\n  var eventStore = node.__events || (node.__events = {});\n  var oldEventHandler = eventStore[eventName];\n  // Remove old listener so they don't double up.\n  if (oldEventHandler) {\n    node.removeEventListener(eventName, oldEventHandler);\n  }\n  if (newEventHandler != null) {\n    // Bind new listener.\n    node.addEventListener(eventName, eventStore[eventName] = function handler(e) {\n      newEventHandler.call(this, e);\n    });\n  }\n}\nfunction arrayToMap(arr) {\n  var map = new Map();\n  arr.forEach(function (s) {\n    return map.set(s, s);\n  });\n  return map;\n}","map":{"version":3,"sources":["../../../src/react-component-lib/utils/attachEventProps.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["export function attachEventProps(node, newProps, oldProps) {\n    if (oldProps === void 0) { oldProps = {}; }\n    var className = getClassName(node.classList, newProps, oldProps);\n    if (className) {\n        node.className = className;\n    }\n    Object.keys(newProps).forEach(function (name) {\n        if (name === 'children' || name === 'style' || name === 'ref' || name === 'className') {\n            return;\n        }\n        if (name.indexOf('on') === 0 && name[2] === name[2].toUpperCase()) {\n            var eventName = name.substring(2);\n            var eventNameLc = eventName[0].toLowerCase() + eventName.substring(1);\n            if (!isCoveredByReact(eventNameLc)) {\n                syncEvent(node, eventNameLc, newProps[name]);\n            }\n        }\n        else {\n            node[name] = newProps[name];\n        }\n    });\n}\nexport function getClassName(classList, newProps, oldProps) {\n    // map the classes to Maps for performance\n    var currentClasses = arrayToMap(classList);\n    var incomingPropClasses = arrayToMap(newProps.className ? newProps.className.split(' ') : []);\n    var oldPropClasses = arrayToMap(oldProps.className ? oldProps.className.split(' ') : []);\n    var finalClassNames = [];\n    // loop through each of the current classes on the component\n    // to see if it should be a part of the classNames added\n    currentClasses.forEach(function (currentClass) {\n        if (incomingPropClasses.has(currentClass)) {\n            // add it as its already included in classnames coming in from newProps\n            finalClassNames.push(currentClass);\n            incomingPropClasses.delete(currentClass);\n        }\n        else if (!oldPropClasses.has(currentClass)) {\n            // add it as it has NOT been removed by user\n            finalClassNames.push(currentClass);\n        }\n    });\n    incomingPropClasses.forEach(function (s) { return finalClassNames.push(s); });\n    return finalClassNames.join(' ');\n}\n/**\n * Checks if an event is supported in the current execution environment.\n * @license Modernizr 3.0.0pre (Custom Build) | MIT\n */\nexport function isCoveredByReact(eventNameSuffix, doc) {\n    if (doc === void 0) { doc = document; }\n    var eventName = 'on' + eventNameSuffix;\n    var isSupported = eventName in doc;\n    if (!isSupported) {\n        var element = doc.createElement('div');\n        element.setAttribute(eventName, 'return;');\n        isSupported = typeof element[eventName] === 'function';\n    }\n    return isSupported;\n}\nexport function syncEvent(node, eventName, newEventHandler) {\n    var eventStore = node.__events || (node.__events = {});\n    var oldEventHandler = eventStore[eventName];\n    // Remove old listener so they don't double up.\n    if (oldEventHandler) {\n        node.removeEventListener(eventName, oldEventHandler);\n    }\n    if (newEventHandler != null) {\n        // Bind new listener.\n        node.addEventListener(eventName, (eventStore[eventName] = function handler(e) {\n            newEventHandler.call(this, e);\n        }));\n    }\n}\nfunction arrayToMap(arr) {\n    var map = new Map();\n    arr.forEach(function (s) { return map.set(s, s); });\n    return map;\n}\n//# sourceMappingURL=attachEventProps.js.map"]},"metadata":{},"sourceType":"module"}