{"ast":null,"code":"var AWS = require('./core');\nvar SequentialExecutor = require('./sequential_executor');\nvar DISCOVER_ENDPOINT = require('./discover_endpoint').discoverEndpoint;\n/**\n * The namespace used to register global event listeners for request building\n * and sending.\n */\nAWS.EventListeners = {\n  /**\n   * @!attribute VALIDATE_CREDENTIALS\n   *   A request listener that validates whether the request is being\n   *   sent with credentials.\n   *   Handles the {AWS.Request~validate 'validate' Request event}\n   *   @example Sending a request without validating credentials\n   *     var listener = AWS.EventListeners.Core.VALIDATE_CREDENTIALS;\n   *     request.removeListener('validate', listener);\n   *   @readonly\n   *   @return [Function]\n   * @!attribute VALIDATE_REGION\n   *   A request listener that validates whether the region is set\n   *   for a request.\n   *   Handles the {AWS.Request~validate 'validate' Request event}\n   *   @example Sending a request without validating region configuration\n   *     var listener = AWS.EventListeners.Core.VALIDATE_REGION;\n   *     request.removeListener('validate', listener);\n   *   @readonly\n   *   @return [Function]\n   * @!attribute VALIDATE_PARAMETERS\n   *   A request listener that validates input parameters in a request.\n   *   Handles the {AWS.Request~validate 'validate' Request event}\n   *   @example Sending a request without validating parameters\n   *     var listener = AWS.EventListeners.Core.VALIDATE_PARAMETERS;\n   *     request.removeListener('validate', listener);\n   *   @example Disable parameter validation globally\n   *     AWS.EventListeners.Core.removeListener('validate',\n   *       AWS.EventListeners.Core.VALIDATE_REGION);\n   *   @readonly\n   *   @return [Function]\n   * @!attribute SEND\n   *   A request listener that initiates the HTTP connection for a\n   *   request being sent. Handles the {AWS.Request~send 'send' Request event}\n   *   @example Replacing the HTTP handler\n   *     var listener = AWS.EventListeners.Core.SEND;\n   *     request.removeListener('send', listener);\n   *     request.on('send', function(response) {\n   *       customHandler.send(response);\n   *     });\n   *   @return [Function]\n   *   @readonly\n   * @!attribute HTTP_DATA\n   *   A request listener that reads data from the HTTP connection in order\n   *   to build the response data.\n   *   Handles the {AWS.Request~httpData 'httpData' Request event}.\n   *   Remove this handler if you are overriding the 'httpData' event and\n   *   do not want extra data processing and buffering overhead.\n   *   @example Disabling default data processing\n   *     var listener = AWS.EventListeners.Core.HTTP_DATA;\n   *     request.removeListener('httpData', listener);\n   *   @return [Function]\n   *   @readonly\n   */\n  Core: {} /* doc hack */\n};\n\n/**\n * @api private\n */\nfunction getOperationAuthtype(req) {\n  if (!req.service.api.operations) {\n    return '';\n  }\n  var operation = req.service.api.operations[req.operation];\n  return operation ? operation.authtype : '';\n}\nAWS.EventListeners = {\n  Core: new SequentialExecutor().addNamedListeners(function (add, addAsync) {\n    addAsync('VALIDATE_CREDENTIALS', 'validate', function VALIDATE_CREDENTIALS(req, done) {\n      if (!req.service.api.signatureVersion && !req.service.config.signatureVersion) return done(); // none\n      req.service.config.getCredentials(function (err) {\n        if (err) {\n          req.response.error = AWS.util.error(err, {\n            code: 'CredentialsError',\n            message: 'Missing credentials in config, if using AWS_CONFIG_FILE, set AWS_SDK_LOAD_CONFIG=1'\n          });\n        }\n        done();\n      });\n    });\n    add('VALIDATE_REGION', 'validate', function VALIDATE_REGION(req) {\n      if (!req.service.isGlobalEndpoint) {\n        var dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n        if (!req.service.config.region) {\n          req.response.error = AWS.util.error(new Error(), {\n            code: 'ConfigError',\n            message: 'Missing region in config'\n          });\n        } else if (!dnsHostRegex.test(req.service.config.region)) {\n          req.response.error = AWS.util.error(new Error(), {\n            code: 'ConfigError',\n            message: 'Invalid region in config'\n          });\n        }\n      }\n    });\n    add('BUILD_IDEMPOTENCY_TOKENS', 'validate', function BUILD_IDEMPOTENCY_TOKENS(req) {\n      if (!req.service.api.operations) {\n        return;\n      }\n      var operation = req.service.api.operations[req.operation];\n      if (!operation) {\n        return;\n      }\n      var idempotentMembers = operation.idempotentMembers;\n      if (!idempotentMembers.length) {\n        return;\n      }\n      // creates a copy of params so user's param object isn't mutated\n      var params = AWS.util.copy(req.params);\n      for (var i = 0, iLen = idempotentMembers.length; i < iLen; i++) {\n        if (!params[idempotentMembers[i]]) {\n          // add the member\n          params[idempotentMembers[i]] = AWS.util.uuid.v4();\n        }\n      }\n      req.params = params;\n    });\n    add('VALIDATE_PARAMETERS', 'validate', function VALIDATE_PARAMETERS(req) {\n      if (!req.service.api.operations) {\n        return;\n      }\n      var rules = req.service.api.operations[req.operation].input;\n      var validation = req.service.config.paramValidation;\n      new AWS.ParamValidator(validation).validate(rules, req.params);\n    });\n    add('COMPUTE_CHECKSUM', 'afterBuild', function COMPUTE_CHECKSUM(req) {\n      if (!req.service.api.operations) {\n        return;\n      }\n      var operation = req.service.api.operations[req.operation];\n      if (!operation) {\n        return;\n      }\n      var body = req.httpRequest.body;\n      var isNonStreamingPayload = body && (AWS.util.Buffer.isBuffer(body) || typeof body === 'string');\n      var headers = req.httpRequest.headers;\n      if (operation.httpChecksumRequired && req.service.config.computeChecksums && isNonStreamingPayload && !headers['Content-MD5']) {\n        var md5 = AWS.util.crypto.md5(body, 'base64');\n        headers['Content-MD5'] = md5;\n      }\n    });\n    addAsync('COMPUTE_SHA256', 'afterBuild', function COMPUTE_SHA256(req, done) {\n      req.haltHandlersOnError();\n      if (!req.service.api.operations) {\n        return;\n      }\n      var operation = req.service.api.operations[req.operation];\n      var authtype = operation ? operation.authtype : '';\n      if (!req.service.api.signatureVersion && !authtype && !req.service.config.signatureVersion) return done(); // none\n      if (req.service.getSignerClass(req) === AWS.Signers.V4) {\n        var body = req.httpRequest.body || '';\n        if (authtype.indexOf('unsigned-body') >= 0) {\n          req.httpRequest.headers['X-Amz-Content-Sha256'] = 'UNSIGNED-PAYLOAD';\n          return done();\n        }\n        AWS.util.computeSha256(body, function (err, sha) {\n          if (err) {\n            done(err);\n          } else {\n            req.httpRequest.headers['X-Amz-Content-Sha256'] = sha;\n            done();\n          }\n        });\n      } else {\n        done();\n      }\n    });\n    add('SET_CONTENT_LENGTH', 'afterBuild', function SET_CONTENT_LENGTH(req) {\n      var authtype = getOperationAuthtype(req);\n      var payloadMember = AWS.util.getRequestPayloadShape(req);\n      if (req.httpRequest.headers['Content-Length'] === undefined) {\n        try {\n          var length = AWS.util.string.byteLength(req.httpRequest.body);\n          req.httpRequest.headers['Content-Length'] = length;\n        } catch (err) {\n          if (payloadMember && payloadMember.isStreaming) {\n            if (payloadMember.requiresLength) {\n              //streaming payload requires length(s3, glacier)\n              throw err;\n            } else if (authtype.indexOf('unsigned-body') >= 0) {\n              //unbounded streaming payload(lex, mediastore)\n              req.httpRequest.headers['Transfer-Encoding'] = 'chunked';\n              return;\n            } else {\n              throw err;\n            }\n          }\n          throw err;\n        }\n      }\n    });\n    add('SET_HTTP_HOST', 'afterBuild', function SET_HTTP_HOST(req) {\n      req.httpRequest.headers['Host'] = req.httpRequest.endpoint.host;\n    });\n    add('RESTART', 'restart', function RESTART() {\n      var err = this.response.error;\n      if (!err || !err.retryable) return;\n      this.httpRequest = new AWS.HttpRequest(this.service.endpoint, this.service.region);\n      if (this.response.retryCount < this.service.config.maxRetries) {\n        this.response.retryCount++;\n      } else {\n        this.response.error = null;\n      }\n    });\n    var addToHead = true;\n    addAsync('DISCOVER_ENDPOINT', 'sign', DISCOVER_ENDPOINT, addToHead);\n    addAsync('SIGN', 'sign', function SIGN(req, done) {\n      var service = req.service;\n      var operations = req.service.api.operations || {};\n      var operation = operations[req.operation];\n      var authtype = operation ? operation.authtype : '';\n      if (!service.api.signatureVersion && !authtype && !service.config.signatureVersion) return done(); // none\n\n      service.config.getCredentials(function (err, credentials) {\n        if (err) {\n          req.response.error = err;\n          return done();\n        }\n        try {\n          var date = service.getSkewCorrectedDate();\n          var SignerClass = service.getSignerClass(req);\n          var signer = new SignerClass(req.httpRequest, service.getSigningName(req), {\n            signatureCache: service.config.signatureCache,\n            operation: operation,\n            signatureVersion: service.api.signatureVersion\n          });\n          signer.setServiceClientId(service._clientId);\n\n          // clear old authorization headers\n          delete req.httpRequest.headers['Authorization'];\n          delete req.httpRequest.headers['Date'];\n          delete req.httpRequest.headers['X-Amz-Date'];\n\n          // add new authorization\n          signer.addAuthorization(credentials, date);\n          req.signedAt = date;\n        } catch (e) {\n          req.response.error = e;\n        }\n        done();\n      });\n    });\n    add('VALIDATE_RESPONSE', 'validateResponse', function VALIDATE_RESPONSE(resp) {\n      if (this.service.successfulResponse(resp, this)) {\n        resp.data = {};\n        resp.error = null;\n      } else {\n        resp.data = null;\n        resp.error = AWS.util.error(new Error(), {\n          code: 'UnknownError',\n          message: 'An unknown error occurred.'\n        });\n      }\n    });\n    addAsync('SEND', 'send', function SEND(resp, done) {\n      resp.httpResponse._abortCallback = done;\n      resp.error = null;\n      resp.data = null;\n      function callback(httpResp) {\n        resp.httpResponse.stream = httpResp;\n        var stream = resp.request.httpRequest.stream;\n        var service = resp.request.service;\n        var api = service.api;\n        var operationName = resp.request.operation;\n        var operation = api.operations[operationName] || {};\n        httpResp.on('headers', function onHeaders(statusCode, headers, statusMessage) {\n          resp.request.emit('httpHeaders', [statusCode, headers, resp, statusMessage]);\n          if (!resp.httpResponse.streaming) {\n            if (AWS.HttpClient.streamsApiVersion === 2) {\n              // streams2 API check\n              // if we detect event streams, we're going to have to\n              // return the stream immediately\n              if (operation.hasEventOutput && service.successfulResponse(resp)) {\n                // skip reading the IncomingStream\n                resp.request.emit('httpDone');\n                done();\n                return;\n              }\n              httpResp.on('readable', function onReadable() {\n                var data = httpResp.read();\n                if (data !== null) {\n                  resp.request.emit('httpData', [data, resp]);\n                }\n              });\n            } else {\n              // legacy streams API\n              httpResp.on('data', function onData(data) {\n                resp.request.emit('httpData', [data, resp]);\n              });\n            }\n          }\n        });\n        httpResp.on('end', function onEnd() {\n          if (!stream || !stream.didCallback) {\n            if (AWS.HttpClient.streamsApiVersion === 2 && operation.hasEventOutput && service.successfulResponse(resp)) {\n              // don't concatenate response chunks when streaming event stream data when response is successful\n              return;\n            }\n            resp.request.emit('httpDone');\n            done();\n          }\n        });\n      }\n      function progress(httpResp) {\n        httpResp.on('sendProgress', function onSendProgress(value) {\n          resp.request.emit('httpUploadProgress', [value, resp]);\n        });\n        httpResp.on('receiveProgress', function onReceiveProgress(value) {\n          resp.request.emit('httpDownloadProgress', [value, resp]);\n        });\n      }\n      function error(err) {\n        if (err.code !== 'RequestAbortedError') {\n          var errCode = err.code === 'TimeoutError' ? err.code : 'NetworkingError';\n          err = AWS.util.error(err, {\n            code: errCode,\n            region: resp.request.httpRequest.region,\n            hostname: resp.request.httpRequest.endpoint.hostname,\n            retryable: true\n          });\n        }\n        resp.error = err;\n        resp.request.emit('httpError', [resp.error, resp], function () {\n          done();\n        });\n      }\n      function executeSend() {\n        var http = AWS.HttpClient.getInstance();\n        var httpOptions = resp.request.service.config.httpOptions || {};\n        try {\n          var stream = http.handleRequest(resp.request.httpRequest, httpOptions, callback, error);\n          progress(stream);\n        } catch (err) {\n          error(err);\n        }\n      }\n      var timeDiff = (resp.request.service.getSkewCorrectedDate() - this.signedAt) / 1000;\n      if (timeDiff >= 60 * 10) {\n        // if we signed 10min ago, re-sign\n        this.emit('sign', [this], function (err) {\n          if (err) done(err);else executeSend();\n        });\n      } else {\n        executeSend();\n      }\n    });\n    add('HTTP_HEADERS', 'httpHeaders', function HTTP_HEADERS(statusCode, headers, resp, statusMessage) {\n      resp.httpResponse.statusCode = statusCode;\n      resp.httpResponse.statusMessage = statusMessage;\n      resp.httpResponse.headers = headers;\n      resp.httpResponse.body = AWS.util.buffer.toBuffer('');\n      resp.httpResponse.buffers = [];\n      resp.httpResponse.numBytes = 0;\n      var dateHeader = headers.date || headers.Date;\n      var service = resp.request.service;\n      if (dateHeader) {\n        var serverTime = Date.parse(dateHeader);\n        if (service.config.correctClockSkew && service.isClockSkewed(serverTime)) {\n          service.applyClockOffset(serverTime);\n        }\n      }\n    });\n    add('HTTP_DATA', 'httpData', function HTTP_DATA(chunk, resp) {\n      if (chunk) {\n        if (AWS.util.isNode()) {\n          resp.httpResponse.numBytes += chunk.length;\n          var total = resp.httpResponse.headers['content-length'];\n          var progress = {\n            loaded: resp.httpResponse.numBytes,\n            total: total\n          };\n          resp.request.emit('httpDownloadProgress', [progress, resp]);\n        }\n        resp.httpResponse.buffers.push(AWS.util.buffer.toBuffer(chunk));\n      }\n    });\n    add('HTTP_DONE', 'httpDone', function HTTP_DONE(resp) {\n      // convert buffers array into single buffer\n      if (resp.httpResponse.buffers && resp.httpResponse.buffers.length > 0) {\n        var body = AWS.util.buffer.concat(resp.httpResponse.buffers);\n        resp.httpResponse.body = body;\n      }\n      delete resp.httpResponse.numBytes;\n      delete resp.httpResponse.buffers;\n    });\n    add('FINALIZE_ERROR', 'retry', function FINALIZE_ERROR(resp) {\n      if (resp.httpResponse.statusCode) {\n        resp.error.statusCode = resp.httpResponse.statusCode;\n        if (resp.error.retryable === undefined) {\n          resp.error.retryable = this.service.retryableError(resp.error, this);\n        }\n      }\n    });\n    add('INVALIDATE_CREDENTIALS', 'retry', function INVALIDATE_CREDENTIALS(resp) {\n      if (!resp.error) return;\n      switch (resp.error.code) {\n        case 'RequestExpired': // EC2 only\n        case 'ExpiredTokenException':\n        case 'ExpiredToken':\n          resp.error.retryable = true;\n          resp.request.service.config.credentials.expired = true;\n      }\n    });\n    add('EXPIRED_SIGNATURE', 'retry', function EXPIRED_SIGNATURE(resp) {\n      var err = resp.error;\n      if (!err) return;\n      if (typeof err.code === 'string' && typeof err.message === 'string') {\n        if (err.code.match(/Signature/) && err.message.match(/expired/)) {\n          resp.error.retryable = true;\n        }\n      }\n    });\n    add('CLOCK_SKEWED', 'retry', function CLOCK_SKEWED(resp) {\n      if (!resp.error) return;\n      if (this.service.clockSkewError(resp.error) && this.service.config.correctClockSkew) {\n        resp.error.retryable = true;\n      }\n    });\n    add('REDIRECT', 'retry', function REDIRECT(resp) {\n      if (resp.error && resp.error.statusCode >= 300 && resp.error.statusCode < 400 && resp.httpResponse.headers['location']) {\n        this.httpRequest.endpoint = new AWS.Endpoint(resp.httpResponse.headers['location']);\n        this.httpRequest.headers['Host'] = this.httpRequest.endpoint.host;\n        resp.error.redirect = true;\n        resp.error.retryable = true;\n      }\n    });\n    add('RETRY_CHECK', 'retry', function RETRY_CHECK(resp) {\n      if (resp.error) {\n        if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {\n          resp.error.retryDelay = 0;\n        } else if (resp.retryCount < resp.maxRetries) {\n          resp.error.retryDelay = this.service.retryDelays(resp.retryCount, resp.error) || 0;\n        }\n      }\n    });\n    addAsync('RESET_RETRY_STATE', 'afterRetry', function RESET_RETRY_STATE(resp, done) {\n      var delay,\n        willRetry = false;\n      if (resp.error) {\n        delay = resp.error.retryDelay || 0;\n        if (resp.error.retryable && resp.retryCount < resp.maxRetries) {\n          resp.retryCount++;\n          willRetry = true;\n        } else if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {\n          resp.redirectCount++;\n          willRetry = true;\n        }\n      }\n\n      // delay < 0 is a signal from customBackoff to skip retries\n      if (willRetry && delay >= 0) {\n        resp.error = null;\n        setTimeout(done, delay);\n      } else {\n        done();\n      }\n    });\n  }),\n  CorePost: new SequentialExecutor().addNamedListeners(function (add) {\n    add('EXTRACT_REQUEST_ID', 'extractData', AWS.util.extractRequestId);\n    add('EXTRACT_REQUEST_ID', 'extractError', AWS.util.extractRequestId);\n    add('ENOTFOUND_ERROR', 'httpError', function ENOTFOUND_ERROR(err) {\n      function isDNSError(err) {\n        return err.errno === 'ENOTFOUND' || typeof err.errno === 'number' && typeof AWS.util.getSystemErrorName === 'function' && ['EAI_NONAME', 'EAI_NODATA'].indexOf(AWS.util.getSystemErrorName(err.errno) >= 0);\n      }\n      if (err.code === 'NetworkingError' && isDNSError(err)) {\n        var message = 'Inaccessible host: `' + err.hostname + '\\' at port `' + err.port + '\\'. This service may not be available in the `' + err.region + '\\' region.';\n        this.response.error = AWS.util.error(new Error(message), {\n          code: 'UnknownEndpoint',\n          region: err.region,\n          hostname: err.hostname,\n          retryable: true,\n          originalError: err\n        });\n      }\n    });\n  }),\n  Logger: new SequentialExecutor().addNamedListeners(function (add) {\n    add('LOG_REQUEST', 'complete', function LOG_REQUEST(resp) {\n      var req = resp.request;\n      var logger = req.service.config.logger;\n      if (!logger) return;\n      function filterSensitiveLog(inputShape, shape) {\n        if (!shape) {\n          return shape;\n        }\n        if (inputShape.isSensitive) {\n          return '***SensitiveInformation***';\n        }\n        switch (inputShape.type) {\n          case 'structure':\n            var struct = {};\n            AWS.util.each(shape, function (subShapeName, subShape) {\n              if (Object.prototype.hasOwnProperty.call(inputShape.members, subShapeName)) {\n                struct[subShapeName] = filterSensitiveLog(inputShape.members[subShapeName], subShape);\n              } else {\n                struct[subShapeName] = subShape;\n              }\n            });\n            return struct;\n          case 'list':\n            var list = [];\n            AWS.util.arrayEach(shape, function (subShape, index) {\n              list.push(filterSensitiveLog(inputShape.member, subShape));\n            });\n            return list;\n          case 'map':\n            var map = {};\n            AWS.util.each(shape, function (key, value) {\n              map[key] = filterSensitiveLog(inputShape.value, value);\n            });\n            return map;\n          default:\n            return shape;\n        }\n      }\n      function buildMessage() {\n        var time = resp.request.service.getSkewCorrectedDate().getTime();\n        var delta = (time - req.startTime.getTime()) / 1000;\n        var ansi = logger.isTTY ? true : false;\n        var status = resp.httpResponse.statusCode;\n        var censoredParams = req.params;\n        if (req.service.api.operations && req.service.api.operations[req.operation] && req.service.api.operations[req.operation].input) {\n          var inputShape = req.service.api.operations[req.operation].input;\n          censoredParams = filterSensitiveLog(inputShape, req.params);\n        }\n        var params = require('util').inspect(censoredParams, true, null);\n        var message = '';\n        if (ansi) message += '\\x1B[33m';\n        message += '[AWS ' + req.service.serviceIdentifier + ' ' + status;\n        message += ' ' + delta.toString() + 's ' + resp.retryCount + ' retries]';\n        if (ansi) message += '\\x1B[0;1m';\n        message += ' ' + AWS.util.string.lowerFirst(req.operation);\n        message += '(' + params + ')';\n        if (ansi) message += '\\x1B[0m';\n        return message;\n      }\n      var line = buildMessage();\n      if (typeof logger.log === 'function') {\n        logger.log(line);\n      } else if (typeof logger.write === 'function') {\n        logger.write(line + '\\n');\n      }\n    });\n  }),\n  Json: new SequentialExecutor().addNamedListeners(function (add) {\n    var svc = require('./protocol/json');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n  Rest: new SequentialExecutor().addNamedListeners(function (add) {\n    var svc = require('./protocol/rest');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n  RestJson: new SequentialExecutor().addNamedListeners(function (add) {\n    var svc = require('./protocol/rest_json');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n  RestXml: new SequentialExecutor().addNamedListeners(function (add) {\n    var svc = require('./protocol/rest_xml');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n  Query: new SequentialExecutor().addNamedListeners(function (add) {\n    var svc = require('./protocol/query');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  })\n};","map":{"version":3,"names":["AWS","require","SequentialExecutor","DISCOVER_ENDPOINT","discoverEndpoint","EventListeners","Core","getOperationAuthtype","req","service","api","operations","operation","authtype","addNamedListeners","add","addAsync","VALIDATE_CREDENTIALS","done","signatureVersion","config","getCredentials","err","response","error","util","code","message","VALIDATE_REGION","isGlobalEndpoint","dnsHostRegex","RegExp","region","Error","test","BUILD_IDEMPOTENCY_TOKENS","idempotentMembers","length","params","copy","i","iLen","uuid","v4","VALIDATE_PARAMETERS","rules","input","validation","paramValidation","ParamValidator","validate","COMPUTE_CHECKSUM","body","httpRequest","isNonStreamingPayload","Buffer","isBuffer","headers","httpChecksumRequired","computeChecksums","md5","crypto","COMPUTE_SHA256","haltHandlersOnError","getSignerClass","Signers","V4","indexOf","computeSha256","sha","SET_CONTENT_LENGTH","payloadMember","getRequestPayloadShape","undefined","string","byteLength","isStreaming","requiresLength","SET_HTTP_HOST","endpoint","host","RESTART","retryable","HttpRequest","retryCount","maxRetries","addToHead","SIGN","credentials","date","getSkewCorrectedDate","SignerClass","signer","getSigningName","signatureCache","setServiceClientId","_clientId","addAuthorization","signedAt","e","VALIDATE_RESPONSE","resp","successfulResponse","data","SEND","httpResponse","_abortCallback","callback","httpResp","stream","request","operationName","on","onHeaders","statusCode","statusMessage","emit","streaming","HttpClient","streamsApiVersion","hasEventOutput","onReadable","read","onData","onEnd","didCallback","progress","onSendProgress","value","onReceiveProgress","errCode","hostname","executeSend","http","getInstance","httpOptions","handleRequest","timeDiff","HTTP_HEADERS","buffer","toBuffer","buffers","numBytes","dateHeader","Date","serverTime","parse","correctClockSkew","isClockSkewed","applyClockOffset","HTTP_DATA","chunk","isNode","total","loaded","push","HTTP_DONE","concat","FINALIZE_ERROR","retryableError","INVALIDATE_CREDENTIALS","expired","EXPIRED_SIGNATURE","match","CLOCK_SKEWED","clockSkewError","REDIRECT","Endpoint","redirect","RETRY_CHECK","redirectCount","maxRedirects","retryDelay","retryDelays","RESET_RETRY_STATE","delay","willRetry","setTimeout","CorePost","extractRequestId","ENOTFOUND_ERROR","isDNSError","errno","getSystemErrorName","port","originalError","Logger","LOG_REQUEST","logger","filterSensitiveLog","inputShape","shape","isSensitive","type","struct","each","subShapeName","subShape","Object","prototype","hasOwnProperty","call","members","list","arrayEach","index","member","map","key","buildMessage","time","getTime","delta","startTime","ansi","isTTY","status","censoredParams","inspect","serviceIdentifier","toString","lowerFirst","line","log","write","Json","svc","buildRequest","extractData","extractError","Rest","RestJson","RestXml","Query"],"sources":["/Users/Junhaeng/untitled folder/junior-design/amplifyapp/node_modules/aws-sdk/lib/event_listeners.js"],"sourcesContent":["var AWS = require('./core');\nvar SequentialExecutor = require('./sequential_executor');\nvar DISCOVER_ENDPOINT = require('./discover_endpoint').discoverEndpoint;\n/**\n * The namespace used to register global event listeners for request building\n * and sending.\n */\nAWS.EventListeners = {\n  /**\n   * @!attribute VALIDATE_CREDENTIALS\n   *   A request listener that validates whether the request is being\n   *   sent with credentials.\n   *   Handles the {AWS.Request~validate 'validate' Request event}\n   *   @example Sending a request without validating credentials\n   *     var listener = AWS.EventListeners.Core.VALIDATE_CREDENTIALS;\n   *     request.removeListener('validate', listener);\n   *   @readonly\n   *   @return [Function]\n   * @!attribute VALIDATE_REGION\n   *   A request listener that validates whether the region is set\n   *   for a request.\n   *   Handles the {AWS.Request~validate 'validate' Request event}\n   *   @example Sending a request without validating region configuration\n   *     var listener = AWS.EventListeners.Core.VALIDATE_REGION;\n   *     request.removeListener('validate', listener);\n   *   @readonly\n   *   @return [Function]\n   * @!attribute VALIDATE_PARAMETERS\n   *   A request listener that validates input parameters in a request.\n   *   Handles the {AWS.Request~validate 'validate' Request event}\n   *   @example Sending a request without validating parameters\n   *     var listener = AWS.EventListeners.Core.VALIDATE_PARAMETERS;\n   *     request.removeListener('validate', listener);\n   *   @example Disable parameter validation globally\n   *     AWS.EventListeners.Core.removeListener('validate',\n   *       AWS.EventListeners.Core.VALIDATE_REGION);\n   *   @readonly\n   *   @return [Function]\n   * @!attribute SEND\n   *   A request listener that initiates the HTTP connection for a\n   *   request being sent. Handles the {AWS.Request~send 'send' Request event}\n   *   @example Replacing the HTTP handler\n   *     var listener = AWS.EventListeners.Core.SEND;\n   *     request.removeListener('send', listener);\n   *     request.on('send', function(response) {\n   *       customHandler.send(response);\n   *     });\n   *   @return [Function]\n   *   @readonly\n   * @!attribute HTTP_DATA\n   *   A request listener that reads data from the HTTP connection in order\n   *   to build the response data.\n   *   Handles the {AWS.Request~httpData 'httpData' Request event}.\n   *   Remove this handler if you are overriding the 'httpData' event and\n   *   do not want extra data processing and buffering overhead.\n   *   @example Disabling default data processing\n   *     var listener = AWS.EventListeners.Core.HTTP_DATA;\n   *     request.removeListener('httpData', listener);\n   *   @return [Function]\n   *   @readonly\n   */\n  Core: {} /* doc hack */\n};\n\n/**\n * @api private\n */\nfunction getOperationAuthtype(req) {\n  if (!req.service.api.operations) {\n    return '';\n  }\n  var operation = req.service.api.operations[req.operation];\n  return operation ? operation.authtype : '';\n}\n\nAWS.EventListeners = {\n  Core: new SequentialExecutor().addNamedListeners(function(add, addAsync) {\n    addAsync('VALIDATE_CREDENTIALS', 'validate',\n        function VALIDATE_CREDENTIALS(req, done) {\n      if (!req.service.api.signatureVersion && !req.service.config.signatureVersion) return done(); // none\n      req.service.config.getCredentials(function(err) {\n        if (err) {\n          req.response.error = AWS.util.error(err,\n            {code: 'CredentialsError', message: 'Missing credentials in config, if using AWS_CONFIG_FILE, set AWS_SDK_LOAD_CONFIG=1'});\n        }\n        done();\n      });\n    });\n\n    add('VALIDATE_REGION', 'validate', function VALIDATE_REGION(req) {\n      if (!req.service.isGlobalEndpoint) {\n        var dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n        if (!req.service.config.region) {\n          req.response.error = AWS.util.error(new Error(),\n            {code: 'ConfigError', message: 'Missing region in config'});\n        } else if (!dnsHostRegex.test(req.service.config.region)) {\n          req.response.error = AWS.util.error(new Error(),\n            {code: 'ConfigError', message: 'Invalid region in config'});\n        }\n      }\n    });\n\n    add('BUILD_IDEMPOTENCY_TOKENS', 'validate', function BUILD_IDEMPOTENCY_TOKENS(req) {\n      if (!req.service.api.operations) {\n        return;\n      }\n      var operation = req.service.api.operations[req.operation];\n      if (!operation) {\n        return;\n      }\n      var idempotentMembers = operation.idempotentMembers;\n      if (!idempotentMembers.length) {\n        return;\n      }\n      // creates a copy of params so user's param object isn't mutated\n      var params = AWS.util.copy(req.params);\n      for (var i = 0, iLen = idempotentMembers.length; i < iLen; i++) {\n        if (!params[idempotentMembers[i]]) {\n          // add the member\n          params[idempotentMembers[i]] = AWS.util.uuid.v4();\n        }\n      }\n      req.params = params;\n    });\n\n    add('VALIDATE_PARAMETERS', 'validate', function VALIDATE_PARAMETERS(req) {\n      if (!req.service.api.operations) {\n        return;\n      }\n      var rules = req.service.api.operations[req.operation].input;\n      var validation = req.service.config.paramValidation;\n      new AWS.ParamValidator(validation).validate(rules, req.params);\n    });\n\n    add('COMPUTE_CHECKSUM', 'afterBuild', function COMPUTE_CHECKSUM(req) {\n      if (!req.service.api.operations) {\n        return;\n      }\n      var operation = req.service.api.operations[req.operation];\n      if (!operation) {\n        return;\n      }\n      var body = req.httpRequest.body;\n      var isNonStreamingPayload = body && (AWS.util.Buffer.isBuffer(body) || typeof body === 'string');\n      var headers = req.httpRequest.headers;\n      if (\n        operation.httpChecksumRequired &&\n        req.service.config.computeChecksums &&\n        isNonStreamingPayload &&\n        !headers['Content-MD5']\n      ) {\n        var md5 = AWS.util.crypto.md5(body, 'base64');\n        headers['Content-MD5'] = md5;\n      }\n    });\n\n    addAsync('COMPUTE_SHA256', 'afterBuild', function COMPUTE_SHA256(req, done) {\n      req.haltHandlersOnError();\n      if (!req.service.api.operations) {\n        return;\n      }\n      var operation = req.service.api.operations[req.operation];\n      var authtype = operation ? operation.authtype : '';\n      if (!req.service.api.signatureVersion && !authtype && !req.service.config.signatureVersion) return done(); // none\n      if (req.service.getSignerClass(req) === AWS.Signers.V4) {\n        var body = req.httpRequest.body || '';\n        if (authtype.indexOf('unsigned-body') >= 0) {\n          req.httpRequest.headers['X-Amz-Content-Sha256'] = 'UNSIGNED-PAYLOAD';\n          return done();\n        }\n        AWS.util.computeSha256(body, function(err, sha) {\n          if (err) {\n            done(err);\n          }\n          else {\n            req.httpRequest.headers['X-Amz-Content-Sha256'] = sha;\n            done();\n          }\n        });\n      } else {\n        done();\n      }\n    });\n\n    add('SET_CONTENT_LENGTH', 'afterBuild', function SET_CONTENT_LENGTH(req) {\n      var authtype = getOperationAuthtype(req);\n      var payloadMember = AWS.util.getRequestPayloadShape(req);\n      if (req.httpRequest.headers['Content-Length'] === undefined) {\n        try {\n          var length = AWS.util.string.byteLength(req.httpRequest.body);\n          req.httpRequest.headers['Content-Length'] = length;\n        } catch (err) {\n          if (payloadMember && payloadMember.isStreaming) {\n            if (payloadMember.requiresLength) {\n              //streaming payload requires length(s3, glacier)\n              throw err;\n            } else if (authtype.indexOf('unsigned-body') >= 0) {\n              //unbounded streaming payload(lex, mediastore)\n              req.httpRequest.headers['Transfer-Encoding'] = 'chunked';\n              return;\n            } else {\n              throw err;\n            }\n          }\n          throw err;\n        }\n      }\n    });\n\n    add('SET_HTTP_HOST', 'afterBuild', function SET_HTTP_HOST(req) {\n      req.httpRequest.headers['Host'] = req.httpRequest.endpoint.host;\n    });\n\n    add('RESTART', 'restart', function RESTART() {\n      var err = this.response.error;\n      if (!err || !err.retryable) return;\n\n      this.httpRequest = new AWS.HttpRequest(\n        this.service.endpoint,\n        this.service.region\n      );\n\n      if (this.response.retryCount < this.service.config.maxRetries) {\n        this.response.retryCount++;\n      } else {\n        this.response.error = null;\n      }\n    });\n\n    var addToHead = true;\n    addAsync('DISCOVER_ENDPOINT', 'sign', DISCOVER_ENDPOINT, addToHead);\n\n    addAsync('SIGN', 'sign', function SIGN(req, done) {\n      var service = req.service;\n      var operations = req.service.api.operations || {};\n      var operation = operations[req.operation];\n      var authtype = operation ? operation.authtype : '';\n      if (!service.api.signatureVersion && !authtype && !service.config.signatureVersion) return done(); // none\n\n      service.config.getCredentials(function (err, credentials) {\n        if (err) {\n          req.response.error = err;\n          return done();\n        }\n\n        try {\n          var date = service.getSkewCorrectedDate();\n          var SignerClass = service.getSignerClass(req);\n          var signer = new SignerClass(req.httpRequest,\n            service.getSigningName(req),\n            {\n              signatureCache: service.config.signatureCache,\n              operation: operation,\n              signatureVersion: service.api.signatureVersion\n            });\n          signer.setServiceClientId(service._clientId);\n\n          // clear old authorization headers\n          delete req.httpRequest.headers['Authorization'];\n          delete req.httpRequest.headers['Date'];\n          delete req.httpRequest.headers['X-Amz-Date'];\n\n          // add new authorization\n          signer.addAuthorization(credentials, date);\n          req.signedAt = date;\n        } catch (e) {\n          req.response.error = e;\n        }\n        done();\n      });\n    });\n\n    add('VALIDATE_RESPONSE', 'validateResponse', function VALIDATE_RESPONSE(resp) {\n      if (this.service.successfulResponse(resp, this)) {\n        resp.data = {};\n        resp.error = null;\n      } else {\n        resp.data = null;\n        resp.error = AWS.util.error(new Error(),\n          {code: 'UnknownError', message: 'An unknown error occurred.'});\n      }\n    });\n\n    addAsync('SEND', 'send', function SEND(resp, done) {\n      resp.httpResponse._abortCallback = done;\n      resp.error = null;\n      resp.data = null;\n\n      function callback(httpResp) {\n        resp.httpResponse.stream = httpResp;\n        var stream = resp.request.httpRequest.stream;\n        var service = resp.request.service;\n        var api = service.api;\n        var operationName = resp.request.operation;\n        var operation = api.operations[operationName] || {};\n\n        httpResp.on('headers', function onHeaders(statusCode, headers, statusMessage) {\n          resp.request.emit(\n            'httpHeaders',\n            [statusCode, headers, resp, statusMessage]\n          );\n\n          if (!resp.httpResponse.streaming) {\n            if (AWS.HttpClient.streamsApiVersion === 2) { // streams2 API check\n              // if we detect event streams, we're going to have to\n              // return the stream immediately\n              if (operation.hasEventOutput && service.successfulResponse(resp)) {\n                // skip reading the IncomingStream\n                resp.request.emit('httpDone');\n                done();\n                return;\n              }\n\n              httpResp.on('readable', function onReadable() {\n                var data = httpResp.read();\n                if (data !== null) {\n                  resp.request.emit('httpData', [data, resp]);\n                }\n              });\n            } else { // legacy streams API\n              httpResp.on('data', function onData(data) {\n                resp.request.emit('httpData', [data, resp]);\n              });\n            }\n          }\n        });\n\n        httpResp.on('end', function onEnd() {\n          if (!stream || !stream.didCallback) {\n            if (AWS.HttpClient.streamsApiVersion === 2 && (operation.hasEventOutput && service.successfulResponse(resp))) {\n              // don't concatenate response chunks when streaming event stream data when response is successful\n              return;\n            }\n            resp.request.emit('httpDone');\n            done();\n          }\n        });\n      }\n\n      function progress(httpResp) {\n        httpResp.on('sendProgress', function onSendProgress(value) {\n          resp.request.emit('httpUploadProgress', [value, resp]);\n        });\n\n        httpResp.on('receiveProgress', function onReceiveProgress(value) {\n          resp.request.emit('httpDownloadProgress', [value, resp]);\n        });\n      }\n\n      function error(err) {\n        if (err.code !== 'RequestAbortedError') {\n          var errCode = err.code === 'TimeoutError' ? err.code : 'NetworkingError';\n          err = AWS.util.error(err, {\n            code: errCode,\n            region: resp.request.httpRequest.region,\n            hostname: resp.request.httpRequest.endpoint.hostname,\n            retryable: true\n          });\n        }\n        resp.error = err;\n        resp.request.emit('httpError', [resp.error, resp], function() {\n          done();\n        });\n      }\n\n      function executeSend() {\n        var http = AWS.HttpClient.getInstance();\n        var httpOptions = resp.request.service.config.httpOptions || {};\n        try {\n          var stream = http.handleRequest(resp.request.httpRequest, httpOptions,\n                                          callback, error);\n          progress(stream);\n        } catch (err) {\n          error(err);\n        }\n      }\n      var timeDiff = (resp.request.service.getSkewCorrectedDate() - this.signedAt) / 1000;\n      if (timeDiff >= 60 * 10) { // if we signed 10min ago, re-sign\n        this.emit('sign', [this], function(err) {\n          if (err) done(err);\n          else executeSend();\n        });\n      } else {\n        executeSend();\n      }\n    });\n\n    add('HTTP_HEADERS', 'httpHeaders',\n        function HTTP_HEADERS(statusCode, headers, resp, statusMessage) {\n      resp.httpResponse.statusCode = statusCode;\n      resp.httpResponse.statusMessage = statusMessage;\n      resp.httpResponse.headers = headers;\n      resp.httpResponse.body = AWS.util.buffer.toBuffer('');\n      resp.httpResponse.buffers = [];\n      resp.httpResponse.numBytes = 0;\n      var dateHeader = headers.date || headers.Date;\n      var service = resp.request.service;\n      if (dateHeader) {\n        var serverTime = Date.parse(dateHeader);\n        if (service.config.correctClockSkew\n            && service.isClockSkewed(serverTime)) {\n          service.applyClockOffset(serverTime);\n        }\n      }\n    });\n\n    add('HTTP_DATA', 'httpData', function HTTP_DATA(chunk, resp) {\n      if (chunk) {\n        if (AWS.util.isNode()) {\n          resp.httpResponse.numBytes += chunk.length;\n\n          var total = resp.httpResponse.headers['content-length'];\n          var progress = { loaded: resp.httpResponse.numBytes, total: total };\n          resp.request.emit('httpDownloadProgress', [progress, resp]);\n        }\n\n        resp.httpResponse.buffers.push(AWS.util.buffer.toBuffer(chunk));\n      }\n    });\n\n    add('HTTP_DONE', 'httpDone', function HTTP_DONE(resp) {\n      // convert buffers array into single buffer\n      if (resp.httpResponse.buffers && resp.httpResponse.buffers.length > 0) {\n        var body = AWS.util.buffer.concat(resp.httpResponse.buffers);\n        resp.httpResponse.body = body;\n      }\n      delete resp.httpResponse.numBytes;\n      delete resp.httpResponse.buffers;\n    });\n\n    add('FINALIZE_ERROR', 'retry', function FINALIZE_ERROR(resp) {\n      if (resp.httpResponse.statusCode) {\n        resp.error.statusCode = resp.httpResponse.statusCode;\n        if (resp.error.retryable === undefined) {\n          resp.error.retryable = this.service.retryableError(resp.error, this);\n        }\n      }\n    });\n\n    add('INVALIDATE_CREDENTIALS', 'retry', function INVALIDATE_CREDENTIALS(resp) {\n      if (!resp.error) return;\n      switch (resp.error.code) {\n        case 'RequestExpired': // EC2 only\n        case 'ExpiredTokenException':\n        case 'ExpiredToken':\n          resp.error.retryable = true;\n          resp.request.service.config.credentials.expired = true;\n      }\n    });\n\n    add('EXPIRED_SIGNATURE', 'retry', function EXPIRED_SIGNATURE(resp) {\n      var err = resp.error;\n      if (!err) return;\n      if (typeof err.code === 'string' && typeof err.message === 'string') {\n        if (err.code.match(/Signature/) && err.message.match(/expired/)) {\n          resp.error.retryable = true;\n        }\n      }\n    });\n\n    add('CLOCK_SKEWED', 'retry', function CLOCK_SKEWED(resp) {\n      if (!resp.error) return;\n      if (this.service.clockSkewError(resp.error)\n          && this.service.config.correctClockSkew) {\n        resp.error.retryable = true;\n      }\n    });\n\n    add('REDIRECT', 'retry', function REDIRECT(resp) {\n      if (resp.error && resp.error.statusCode >= 300 &&\n          resp.error.statusCode < 400 && resp.httpResponse.headers['location']) {\n        this.httpRequest.endpoint =\n          new AWS.Endpoint(resp.httpResponse.headers['location']);\n        this.httpRequest.headers['Host'] = this.httpRequest.endpoint.host;\n        resp.error.redirect = true;\n        resp.error.retryable = true;\n      }\n    });\n\n    add('RETRY_CHECK', 'retry', function RETRY_CHECK(resp) {\n      if (resp.error) {\n        if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {\n          resp.error.retryDelay = 0;\n        } else if (resp.retryCount < resp.maxRetries) {\n          resp.error.retryDelay = this.service.retryDelays(resp.retryCount, resp.error) || 0;\n        }\n      }\n    });\n\n    addAsync('RESET_RETRY_STATE', 'afterRetry', function RESET_RETRY_STATE(resp, done) {\n      var delay, willRetry = false;\n\n      if (resp.error) {\n        delay = resp.error.retryDelay || 0;\n        if (resp.error.retryable && resp.retryCount < resp.maxRetries) {\n          resp.retryCount++;\n          willRetry = true;\n        } else if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {\n          resp.redirectCount++;\n          willRetry = true;\n        }\n      }\n\n      // delay < 0 is a signal from customBackoff to skip retries\n      if (willRetry && delay >= 0) {\n        resp.error = null;\n        setTimeout(done, delay);\n      } else {\n        done();\n      }\n    });\n  }),\n\n  CorePost: new SequentialExecutor().addNamedListeners(function(add) {\n    add('EXTRACT_REQUEST_ID', 'extractData', AWS.util.extractRequestId);\n    add('EXTRACT_REQUEST_ID', 'extractError', AWS.util.extractRequestId);\n\n    add('ENOTFOUND_ERROR', 'httpError', function ENOTFOUND_ERROR(err) {\n      function isDNSError(err) {\n        return err.errno === 'ENOTFOUND' ||\n          typeof err.errno === 'number' &&\n          typeof AWS.util.getSystemErrorName === 'function' &&\n          ['EAI_NONAME', 'EAI_NODATA'].indexOf(AWS.util.getSystemErrorName(err.errno) >= 0);\n      }\n      if (err.code === 'NetworkingError' && isDNSError(err)) {\n        var message = 'Inaccessible host: `' + err.hostname + '\\' at port `' + err.port +\n          '\\'. This service may not be available in the `' + err.region +\n          '\\' region.';\n        this.response.error = AWS.util.error(new Error(message), {\n          code: 'UnknownEndpoint',\n          region: err.region,\n          hostname: err.hostname,\n          retryable: true,\n          originalError: err\n        });\n      }\n    });\n  }),\n\n  Logger: new SequentialExecutor().addNamedListeners(function(add) {\n    add('LOG_REQUEST', 'complete', function LOG_REQUEST(resp) {\n      var req = resp.request;\n      var logger = req.service.config.logger;\n      if (!logger) return;\n      function filterSensitiveLog(inputShape, shape) {\n        if (!shape) {\n          return shape;\n        }\n        if (inputShape.isSensitive) {\n          return '***SensitiveInformation***';\n        }\n        switch (inputShape.type) {\n          case 'structure':\n            var struct = {};\n            AWS.util.each(shape, function(subShapeName, subShape) {\n              if (Object.prototype.hasOwnProperty.call(inputShape.members, subShapeName)) {\n                struct[subShapeName] = filterSensitiveLog(inputShape.members[subShapeName], subShape);\n              } else {\n                struct[subShapeName] = subShape;\n              }\n            });\n            return struct;\n          case 'list':\n            var list = [];\n            AWS.util.arrayEach(shape, function(subShape, index) {\n              list.push(filterSensitiveLog(inputShape.member, subShape));\n            });\n            return list;\n          case 'map':\n            var map = {};\n            AWS.util.each(shape, function(key, value) {\n              map[key] = filterSensitiveLog(inputShape.value, value);\n            });\n            return map;\n          default:\n            return shape;\n        }\n      }\n\n      function buildMessage() {\n        var time = resp.request.service.getSkewCorrectedDate().getTime();\n        var delta = (time - req.startTime.getTime()) / 1000;\n        var ansi = logger.isTTY ? true : false;\n        var status = resp.httpResponse.statusCode;\n        var censoredParams = req.params;\n        if (\n          req.service.api.operations &&\n              req.service.api.operations[req.operation] &&\n              req.service.api.operations[req.operation].input\n        ) {\n          var inputShape = req.service.api.operations[req.operation].input;\n          censoredParams = filterSensitiveLog(inputShape, req.params);\n        }\n        var params = require('util').inspect(censoredParams, true, null);\n        var message = '';\n        if (ansi) message += '\\x1B[33m';\n        message += '[AWS ' + req.service.serviceIdentifier + ' ' + status;\n        message += ' ' + delta.toString() + 's ' + resp.retryCount + ' retries]';\n        if (ansi) message += '\\x1B[0;1m';\n        message += ' ' + AWS.util.string.lowerFirst(req.operation);\n        message += '(' + params + ')';\n        if (ansi) message += '\\x1B[0m';\n        return message;\n      }\n\n      var line = buildMessage();\n      if (typeof logger.log === 'function') {\n        logger.log(line);\n      } else if (typeof logger.write === 'function') {\n        logger.write(line + '\\n');\n      }\n    });\n  }),\n\n  Json: new SequentialExecutor().addNamedListeners(function(add) {\n    var svc = require('./protocol/json');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n\n  Rest: new SequentialExecutor().addNamedListeners(function(add) {\n    var svc = require('./protocol/rest');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n\n  RestJson: new SequentialExecutor().addNamedListeners(function(add) {\n    var svc = require('./protocol/rest_json');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n\n  RestXml: new SequentialExecutor().addNamedListeners(function(add) {\n    var svc = require('./protocol/rest_xml');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  }),\n\n  Query: new SequentialExecutor().addNamedListeners(function(add) {\n    var svc = require('./protocol/query');\n    add('BUILD', 'build', svc.buildRequest);\n    add('EXTRACT_DATA', 'extractData', svc.extractData);\n    add('EXTRACT_ERROR', 'extractError', svc.extractError);\n  })\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}