{"ast":null,"code":"import _classCallCheck from \"/Users/Junhaeng/untitled folder/junior-design/amplifyapp/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/Junhaeng/untitled folder/junior-design/amplifyapp/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { checkRequired, createValidator, createValidatorAsync, isEmpty, formatErrorMessage } from './utils';\nimport locales from './locales';\nexport var MixedType = /*#__PURE__*/function () {\n  function MixedType(name) {\n    _classCallCheck(this, MixedType);\n    this.required = false;\n    this.requiredMessage = '';\n    this.trim = false;\n    this.emptyAllowed = false;\n    this.rules = [];\n    this.priorityRules = [];\n    this.typeName = name;\n    this.locale = Object.assign(name ? locales[name] : {}, locales.mixed);\n  }\n  _createClass(MixedType, [{\n    key: \"setSchemaOptions\",\n    value: function setSchemaOptions(schemaSpec, value) {\n      this.schemaSpec = schemaSpec;\n      this.value = value;\n    }\n  }, {\n    key: \"check\",\n    value: function check() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.value;\n      var data = arguments.length > 1 ? arguments[1] : undefined;\n      var fieldName = arguments.length > 2 ? arguments[2] : undefined;\n      if (this.required && !checkRequired(value, this.trim, this.emptyAllowed)) {\n        return {\n          hasError: true,\n          errorMessage: formatErrorMessage(this.requiredMessage, {\n            name: fieldName\n          })\n        };\n      }\n      var validator = createValidator(data, fieldName);\n      var checkStatus = validator(value, this.priorityRules);\n      if (checkStatus) {\n        return checkStatus;\n      }\n      if (!this.required && isEmpty(value)) {\n        return {\n          hasError: false\n        };\n      }\n      return validator(value, this.rules) || {\n        hasError: false\n      };\n    }\n  }, {\n    key: \"checkAsync\",\n    value: function checkAsync() {\n      var _this = this;\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.value;\n      var data = arguments.length > 1 ? arguments[1] : undefined;\n      var fieldName = arguments.length > 2 ? arguments[2] : undefined;\n      if (this.required && !checkRequired(value, this.trim, this.emptyAllowed)) {\n        return Promise.resolve({\n          hasError: true,\n          errorMessage: formatErrorMessage(this.requiredMessage, {\n            name: fieldName\n          })\n        });\n      }\n      var validator = createValidatorAsync(data, fieldName);\n      return new Promise(function (resolve) {\n        return validator(value, _this.priorityRules).then(function (checkStatus) {\n          if (checkStatus) {\n            resolve(checkStatus);\n          }\n        }).then(function () {\n          if (!_this.required && isEmpty(value)) {\n            resolve({\n              hasError: false\n            });\n          }\n        }).then(function () {\n          return validator(value, _this.rules);\n        }).then(function (checkStatus) {\n          if (checkStatus) {\n            resolve(checkStatus);\n          }\n          resolve({\n            hasError: false\n          });\n        });\n      });\n    }\n  }, {\n    key: \"pushRule\",\n    value: function pushRule(rule) {\n      var _a, _b;\n      var onValid = rule.onValid,\n        errorMessage = rule.errorMessage,\n        priority = rule.priority,\n        params = rule.params;\n      var nextRule = {\n        onValid: onValid,\n        params: params,\n        isAsync: rule.isAsync,\n        errorMessage: errorMessage || ((_b = (_a = this.rules) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.errorMessage)\n      };\n      if (priority) {\n        this.priorityRules.push(nextRule);\n      } else {\n        this.rules.push(nextRule);\n      }\n    }\n  }, {\n    key: \"addRule\",\n    value: function addRule(onValid, errorMessage, priority) {\n      this.pushRule({\n        onValid: onValid,\n        errorMessage: errorMessage,\n        priority: priority\n      });\n      return this;\n    }\n  }, {\n    key: \"addAsyncRule\",\n    value: function addAsyncRule(onValid, errorMessage, priority) {\n      this.pushRule({\n        onValid: onValid,\n        isAsync: true,\n        errorMessage: errorMessage,\n        priority: priority\n      });\n      return this;\n    }\n  }, {\n    key: \"isRequired\",\n    value: function isRequired() {\n      var errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.locale.isRequired;\n      var trim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      this.required = true;\n      this.trim = trim;\n      this.requiredMessage = errorMessage;\n      return this;\n    }\n  }, {\n    key: \"isRequiredOrEmpty\",\n    value: function isRequiredOrEmpty() {\n      var errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.locale.isRequiredOrEmpty;\n      var trim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      this.required = true;\n      this.trim = trim;\n      this.emptyAllowed = true;\n      this.requiredMessage = errorMessage;\n      return this;\n    }\n    /**\n     * Define data verification rules based on conditions.\n     * @param validator\n     * @example\n     * MixedType().when(schema => {\n     *   return schema.filed1.check() ? NumberType().min(5) : NumberType().min(0);\n     * });\n     */\n  }, {\n    key: \"when\",\n    value: function when(condition) {\n      var _this2 = this;\n      this.addRule(function (value, data, filedName) {\n        return condition(_this2.schemaSpec).check(value, data, filedName);\n      }, undefined, true);\n      return this;\n    }\n  }]);\n  return MixedType;\n}();\nexport default function getMixedType() {\n  return new MixedType();\n}","map":{"version":3,"sources":["../src/MixedType.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { checkRequired, createValidator, createValidatorAsync, isEmpty, formatErrorMessage } from './utils';\nimport locales from './locales';\nexport class MixedType {\n    constructor(name) {\n        this.required = false;\n        this.requiredMessage = '';\n        this.trim = false;\n        this.emptyAllowed = false;\n        this.rules = [];\n        this.priorityRules = [];\n        this.typeName = name;\n        this.locale = Object.assign(name ? locales[name] : {}, locales.mixed);\n    }\n    setSchemaOptions(schemaSpec, value) {\n        this.schemaSpec = schemaSpec;\n        this.value = value;\n    }\n    check(value = this.value, data, fieldName) {\n        if (this.required && !checkRequired(value, this.trim, this.emptyAllowed)) {\n            return {\n                hasError: true,\n                errorMessage: formatErrorMessage(this.requiredMessage, { name: fieldName })\n            };\n        }\n        const validator = createValidator(data, fieldName);\n        const checkStatus = validator(value, this.priorityRules);\n        if (checkStatus) {\n            return checkStatus;\n        }\n        if (!this.required && isEmpty(value)) {\n            return { hasError: false };\n        }\n        return validator(value, this.rules) || { hasError: false };\n    }\n    checkAsync(value = this.value, data, fieldName) {\n        if (this.required && !checkRequired(value, this.trim, this.emptyAllowed)) {\n            return Promise.resolve({\n                hasError: true,\n                errorMessage: formatErrorMessage(this.requiredMessage, { name: fieldName })\n            });\n        }\n        const validator = createValidatorAsync(data, fieldName);\n        return new Promise(resolve => validator(value, this.priorityRules)\n            .then((checkStatus) => {\n            if (checkStatus) {\n                resolve(checkStatus);\n            }\n        })\n            .then(() => {\n            if (!this.required && isEmpty(value)) {\n                resolve({ hasError: false });\n            }\n        })\n            .then(() => validator(value, this.rules))\n            .then((checkStatus) => {\n            if (checkStatus) {\n                resolve(checkStatus);\n            }\n            resolve({ hasError: false });\n        }));\n    }\n    pushRule(rule) {\n        var _a, _b;\n        const { onValid, errorMessage, priority, params } = rule;\n        const nextRule = {\n            onValid,\n            params,\n            isAsync: rule.isAsync,\n            errorMessage: errorMessage || ((_b = (_a = this.rules) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.errorMessage)\n        };\n        if (priority) {\n            this.priorityRules.push(nextRule);\n        }\n        else {\n            this.rules.push(nextRule);\n        }\n    }\n    addRule(onValid, errorMessage, priority) {\n        this.pushRule({ onValid, errorMessage, priority });\n        return this;\n    }\n    addAsyncRule(onValid, errorMessage, priority) {\n        this.pushRule({ onValid, isAsync: true, errorMessage, priority });\n        return this;\n    }\n    isRequired(errorMessage = this.locale.isRequired, trim = true) {\n        this.required = true;\n        this.trim = trim;\n        this.requiredMessage = errorMessage;\n        return this;\n    }\n    isRequiredOrEmpty(errorMessage = this.locale.isRequiredOrEmpty, trim = true) {\n        this.required = true;\n        this.trim = trim;\n        this.emptyAllowed = true;\n        this.requiredMessage = errorMessage;\n        return this;\n    }\n    /**\n     * Define data verification rules based on conditions.\n     * @param validator\n     * @example\n     * MixedType().when(schema => {\n     *   return schema.filed1.check() ? NumberType().min(5) : NumberType().min(0);\n     * });\n     */\n    when(condition) {\n        this.addRule((value, data, filedName) => {\n            return condition(this.schemaSpec).check(value, data, filedName);\n        }, undefined, true);\n        return this;\n    }\n}\nexport default function getMixedType() {\n    return new MixedType();\n}\n//# sourceMappingURL=MixedType.js.map"]},"metadata":{},"sourceType":"module"}