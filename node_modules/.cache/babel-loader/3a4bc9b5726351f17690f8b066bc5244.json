{"ast":null,"code":"import objectValues from '../polyfills/objectValues';\nimport keyMap from '../jsutils/keyMap';\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport { print } from '../language/printer';\nimport { isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isNonNullType, isListType, isNamedType, isRequiredArgument, isRequiredInputField } from '../type/definition';\nimport { astFromValue } from './astFromValue';\nexport var BreakingChangeType = Object.freeze({\n  TYPE_REMOVED: 'TYPE_REMOVED',\n  TYPE_CHANGED_KIND: 'TYPE_CHANGED_KIND',\n  TYPE_REMOVED_FROM_UNION: 'TYPE_REMOVED_FROM_UNION',\n  VALUE_REMOVED_FROM_ENUM: 'VALUE_REMOVED_FROM_ENUM',\n  REQUIRED_INPUT_FIELD_ADDED: 'REQUIRED_INPUT_FIELD_ADDED',\n  INTERFACE_REMOVED_FROM_OBJECT: 'INTERFACE_REMOVED_FROM_OBJECT',\n  FIELD_REMOVED: 'FIELD_REMOVED',\n  FIELD_CHANGED_KIND: 'FIELD_CHANGED_KIND',\n  REQUIRED_ARG_ADDED: 'REQUIRED_ARG_ADDED',\n  ARG_REMOVED: 'ARG_REMOVED',\n  ARG_CHANGED_KIND: 'ARG_CHANGED_KIND',\n  DIRECTIVE_REMOVED: 'DIRECTIVE_REMOVED',\n  DIRECTIVE_ARG_REMOVED: 'DIRECTIVE_ARG_REMOVED',\n  REQUIRED_DIRECTIVE_ARG_ADDED: 'REQUIRED_DIRECTIVE_ARG_ADDED',\n  DIRECTIVE_LOCATION_REMOVED: 'DIRECTIVE_LOCATION_REMOVED'\n});\nexport var DangerousChangeType = Object.freeze({\n  VALUE_ADDED_TO_ENUM: 'VALUE_ADDED_TO_ENUM',\n  TYPE_ADDED_TO_UNION: 'TYPE_ADDED_TO_UNION',\n  OPTIONAL_INPUT_FIELD_ADDED: 'OPTIONAL_INPUT_FIELD_ADDED',\n  OPTIONAL_ARG_ADDED: 'OPTIONAL_ARG_ADDED',\n  INTERFACE_ADDED_TO_OBJECT: 'INTERFACE_ADDED_TO_OBJECT',\n  ARG_DEFAULT_VALUE_CHANGE: 'ARG_DEFAULT_VALUE_CHANGE'\n});\n\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of breaking changes covered by the other functions down below.\n */\nexport function findBreakingChanges(oldSchema, newSchema) {\n  var breakingChanges = findSchemaChanges(oldSchema, newSchema).filter(function (change) {\n    return change.type in BreakingChangeType;\n  });\n  return breakingChanges;\n}\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of potentially dangerous changes covered by the other functions down below.\n */\n\nexport function findDangerousChanges(oldSchema, newSchema) {\n  var dangerousChanges = findSchemaChanges(oldSchema, newSchema).filter(function (change) {\n    return change.type in DangerousChangeType;\n  });\n  return dangerousChanges;\n}\nfunction findSchemaChanges(oldSchema, newSchema) {\n  return [].concat(findTypeChanges(oldSchema, newSchema), findDirectiveChanges(oldSchema, newSchema));\n}\nfunction findDirectiveChanges(oldSchema, newSchema) {\n  var schemaChanges = [];\n  var directivesDiff = diff(oldSchema.getDirectives(), newSchema.getDirectives());\n  for (var _i2 = 0, _directivesDiff$remov2 = directivesDiff.removed; _i2 < _directivesDiff$remov2.length; _i2++) {\n    var oldDirective = _directivesDiff$remov2[_i2];\n    schemaChanges.push({\n      type: BreakingChangeType.DIRECTIVE_REMOVED,\n      description: \"\".concat(oldDirective.name, \" was removed.\")\n    });\n  }\n  for (var _i4 = 0, _directivesDiff$persi2 = directivesDiff.persisted; _i4 < _directivesDiff$persi2.length; _i4++) {\n    var _ref2 = _directivesDiff$persi2[_i4];\n    var _oldDirective = _ref2[0];\n    var newDirective = _ref2[1];\n    var argsDiff = diff(_oldDirective.args, newDirective.args);\n    for (var _i6 = 0, _argsDiff$added2 = argsDiff.added; _i6 < _argsDiff$added2.length; _i6++) {\n      var newArg = _argsDiff$added2[_i6];\n      if (isRequiredArgument(newArg)) {\n        schemaChanges.push({\n          type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,\n          description: \"A required arg \".concat(newArg.name, \" on directive \").concat(_oldDirective.name, \" was added.\")\n        });\n      }\n    }\n    for (var _i8 = 0, _argsDiff$removed2 = argsDiff.removed; _i8 < _argsDiff$removed2.length; _i8++) {\n      var oldArg = _argsDiff$removed2[_i8];\n      schemaChanges.push({\n        type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,\n        description: \"\".concat(oldArg.name, \" was removed from \").concat(_oldDirective.name, \".\")\n      });\n    }\n    for (var _i10 = 0, _oldDirective$locatio2 = _oldDirective.locations; _i10 < _oldDirective$locatio2.length; _i10++) {\n      var location = _oldDirective$locatio2[_i10];\n      if (newDirective.locations.indexOf(location) === -1) {\n        schemaChanges.push({\n          type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,\n          description: \"\".concat(location, \" was removed from \").concat(_oldDirective.name, \".\")\n        });\n      }\n    }\n  }\n  return schemaChanges;\n}\nfunction findTypeChanges(oldSchema, newSchema) {\n  var schemaChanges = [];\n  var typesDiff = diff(objectValues(oldSchema.getTypeMap()), objectValues(newSchema.getTypeMap()));\n  for (var _i12 = 0, _typesDiff$removed2 = typesDiff.removed; _i12 < _typesDiff$removed2.length; _i12++) {\n    var oldType = _typesDiff$removed2[_i12];\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED,\n      description: \"\".concat(oldType.name, \" was removed.\")\n    });\n  }\n  for (var _i14 = 0, _typesDiff$persisted2 = typesDiff.persisted; _i14 < _typesDiff$persisted2.length; _i14++) {\n    var _ref4 = _typesDiff$persisted2[_i14];\n    var _oldType = _ref4[0];\n    var newType = _ref4[1];\n    if (isEnumType(_oldType) && isEnumType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findEnumTypeChanges(_oldType, newType));\n    } else if (isUnionType(_oldType) && isUnionType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findUnionTypeChanges(_oldType, newType));\n    } else if (isInputObjectType(_oldType) && isInputObjectType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findInputObjectTypeChanges(_oldType, newType));\n    } else if (isObjectType(_oldType) && isObjectType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findObjectTypeChanges(_oldType, newType));\n    } else if (isInterfaceType(_oldType) && isInterfaceType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findFieldChanges(_oldType, newType));\n    } else if (_oldType.constructor !== newType.constructor) {\n      schemaChanges.push({\n        type: BreakingChangeType.TYPE_CHANGED_KIND,\n        description: \"\".concat(_oldType.name, \" changed from \") + \"\".concat(typeKindName(_oldType), \" to \").concat(typeKindName(newType), \".\")\n      });\n    }\n  }\n  return schemaChanges;\n}\nfunction findInputObjectTypeChanges(oldType, newType) {\n  var schemaChanges = [];\n  var fieldsDiff = diff(objectValues(oldType.getFields()), objectValues(newType.getFields()));\n  for (var _i16 = 0, _fieldsDiff$added2 = fieldsDiff.added; _i16 < _fieldsDiff$added2.length; _i16++) {\n    var newField = _fieldsDiff$added2[_i16];\n    if (isRequiredInputField(newField)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,\n        description: \"A required field \".concat(newField.name, \" on input type \").concat(oldType.name, \" was added.\")\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,\n        description: \"An optional field \".concat(newField.name, \" on input type \").concat(oldType.name, \" was added.\")\n      });\n    }\n  }\n  for (var _i18 = 0, _fieldsDiff$removed2 = fieldsDiff.removed; _i18 < _fieldsDiff$removed2.length; _i18++) {\n    var oldField = _fieldsDiff$removed2[_i18];\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" was removed.\")\n    });\n  }\n  for (var _i20 = 0, _fieldsDiff$persisted2 = fieldsDiff.persisted; _i20 < _fieldsDiff$persisted2.length; _i20++) {\n    var _ref6 = _fieldsDiff$persisted2[_i20];\n    var _oldField = _ref6[0];\n    var _newField = _ref6[1];\n    var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldField.type, _newField.type);\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description: \"\".concat(oldType.name, \".\").concat(_oldField.name, \" changed type from \") + \"\".concat(String(_oldField.type), \" to \").concat(String(_newField.type), \".\")\n      });\n    }\n  }\n  return schemaChanges;\n}\nfunction findUnionTypeChanges(oldType, newType) {\n  var schemaChanges = [];\n  var possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());\n  for (var _i22 = 0, _possibleTypesDiff$ad2 = possibleTypesDiff.added; _i22 < _possibleTypesDiff$ad2.length; _i22++) {\n    var newPossibleType = _possibleTypesDiff$ad2[_i22];\n    schemaChanges.push({\n      type: DangerousChangeType.TYPE_ADDED_TO_UNION,\n      description: \"\".concat(newPossibleType.name, \" was added to union type \").concat(oldType.name, \".\")\n    });\n  }\n  for (var _i24 = 0, _possibleTypesDiff$re2 = possibleTypesDiff.removed; _i24 < _possibleTypesDiff$re2.length; _i24++) {\n    var oldPossibleType = _possibleTypesDiff$re2[_i24];\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,\n      description: \"\".concat(oldPossibleType.name, \" was removed from union type \").concat(oldType.name, \".\")\n    });\n  }\n  return schemaChanges;\n}\nfunction findEnumTypeChanges(oldType, newType) {\n  var schemaChanges = [];\n  var valuesDiff = diff(oldType.getValues(), newType.getValues());\n  for (var _i26 = 0, _valuesDiff$added2 = valuesDiff.added; _i26 < _valuesDiff$added2.length; _i26++) {\n    var newValue = _valuesDiff$added2[_i26];\n    schemaChanges.push({\n      type: DangerousChangeType.VALUE_ADDED_TO_ENUM,\n      description: \"\".concat(newValue.name, \" was added to enum type \").concat(oldType.name, \".\")\n    });\n  }\n  for (var _i28 = 0, _valuesDiff$removed2 = valuesDiff.removed; _i28 < _valuesDiff$removed2.length; _i28++) {\n    var oldValue = _valuesDiff$removed2[_i28];\n    schemaChanges.push({\n      type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,\n      description: \"\".concat(oldValue.name, \" was removed from enum type \").concat(oldType.name, \".\")\n    });\n  }\n  return schemaChanges;\n}\nfunction findObjectTypeChanges(oldType, newType) {\n  var schemaChanges = findFieldChanges(oldType, newType);\n  var interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());\n  for (var _i30 = 0, _interfacesDiff$added2 = interfacesDiff.added; _i30 < _interfacesDiff$added2.length; _i30++) {\n    var newInterface = _interfacesDiff$added2[_i30];\n    schemaChanges.push({\n      type: DangerousChangeType.INTERFACE_ADDED_TO_OBJECT,\n      description: \"\".concat(newInterface.name, \" added to interfaces implemented by \").concat(oldType.name, \".\")\n    });\n  }\n  for (var _i32 = 0, _interfacesDiff$remov2 = interfacesDiff.removed; _i32 < _interfacesDiff$remov2.length; _i32++) {\n    var oldInterface = _interfacesDiff$remov2[_i32];\n    schemaChanges.push({\n      type: BreakingChangeType.INTERFACE_REMOVED_FROM_OBJECT,\n      description: \"\".concat(oldType.name, \" no longer implements interface \").concat(oldInterface.name, \".\")\n    });\n  }\n  return schemaChanges;\n}\nfunction findFieldChanges(oldType, newType) {\n  var schemaChanges = [];\n  var fieldsDiff = diff(objectValues(oldType.getFields()), objectValues(newType.getFields()));\n  for (var _i34 = 0, _fieldsDiff$removed4 = fieldsDiff.removed; _i34 < _fieldsDiff$removed4.length; _i34++) {\n    var oldField = _fieldsDiff$removed4[_i34];\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" was removed.\")\n    });\n  }\n  for (var _i36 = 0, _fieldsDiff$persisted4 = fieldsDiff.persisted; _i36 < _fieldsDiff$persisted4.length; _i36++) {\n    var _ref8 = _fieldsDiff$persisted4[_i36];\n    var _oldField2 = _ref8[0];\n    var newField = _ref8[1];\n    schemaChanges.push.apply(schemaChanges, findArgChanges(oldType, _oldField2, newField));\n    var isSafe = isChangeSafeForObjectOrInterfaceField(_oldField2.type, newField.type);\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description: \"\".concat(oldType.name, \".\").concat(_oldField2.name, \" changed type from \") + \"\".concat(String(_oldField2.type), \" to \").concat(String(newField.type), \".\")\n      });\n    }\n  }\n  return schemaChanges;\n}\nfunction findArgChanges(oldType, oldField, newField) {\n  var schemaChanges = [];\n  var argsDiff = diff(oldField.args, newField.args);\n  for (var _i38 = 0, _argsDiff$removed4 = argsDiff.removed; _i38 < _argsDiff$removed4.length; _i38++) {\n    var oldArg = _argsDiff$removed4[_i38];\n    schemaChanges.push({\n      type: BreakingChangeType.ARG_REMOVED,\n      description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(oldArg.name, \" was removed.\")\n    });\n  }\n  for (var _i40 = 0, _argsDiff$persisted2 = argsDiff.persisted; _i40 < _argsDiff$persisted2.length; _i40++) {\n    var _ref10 = _argsDiff$persisted2[_i40];\n    var _oldArg = _ref10[0];\n    var newArg = _ref10[1];\n    var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldArg.type, newArg.type);\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.ARG_CHANGED_KIND,\n        description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(_oldArg.name, \" has changed type from \") + \"\".concat(String(_oldArg.type), \" to \").concat(String(newArg.type), \".\")\n      });\n    } else if (_oldArg.defaultValue !== undefined) {\n      if (newArg.defaultValue === undefined) {\n        schemaChanges.push({\n          type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n          description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(_oldArg.name, \" defaultValue was removed.\")\n        });\n      } else {\n        var oldValueStr = stringifyValue(_oldArg.defaultValue, _oldArg.type);\n        var newValueStr = stringifyValue(newArg.defaultValue, newArg.type);\n        if (oldValueStr !== newValueStr) {\n          schemaChanges.push({\n            type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n            description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(_oldArg.name, \" has changed defaultValue from \").concat(oldValueStr, \" to \").concat(newValueStr, \".\")\n          });\n        }\n      }\n    }\n  }\n  for (var _i42 = 0, _argsDiff$added4 = argsDiff.added; _i42 < _argsDiff$added4.length; _i42++) {\n    var _newArg = _argsDiff$added4[_i42];\n    if (isRequiredArgument(_newArg)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_ARG_ADDED,\n        description: \"A required arg \".concat(_newArg.name, \" on \").concat(oldType.name, \".\").concat(oldField.name, \" was added.\")\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_ARG_ADDED,\n        description: \"An optional arg \".concat(_newArg.name, \" on \").concat(oldType.name, \".\").concat(oldField.name, \" was added.\")\n      });\n    }\n  }\n  return schemaChanges;\n}\nfunction isChangeSafeForObjectOrInterfaceField(oldType, newType) {\n  if (isListType(oldType)) {\n    return (\n      // if they're both lists, make sure the underlying types are compatible\n      isListType(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) ||\n      // moving from nullable to non-null of the same underlying type is safe\n      isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n    );\n  }\n  if (isNonNullType(oldType)) {\n    // if they're both non-null, make sure the underlying types are compatible\n    return isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);\n  }\n  return (\n    // if they're both named types, see if their names are equivalent\n    isNamedType(newType) && oldType.name === newType.name ||\n    // moving from nullable to non-null of the same underlying type is safe\n    isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n  );\n}\nfunction isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {\n  if (isListType(oldType)) {\n    // if they're both lists, make sure the underlying types are compatible\n    return isListType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);\n  }\n  if (isNonNullType(oldType)) {\n    return (\n      // if they're both non-null, make sure the underlying types are\n      // compatible\n      isNonNullType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) ||\n      // moving from non-null to nullable of the same underlying type is safe\n      !isNonNullType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType)\n    );\n  } // if they're both named types, see if their names are equivalent\n\n  return isNamedType(newType) && oldType.name === newType.name;\n}\nfunction typeKindName(type) {\n  if (isScalarType(type)) {\n    return 'a Scalar type';\n  }\n  if (isObjectType(type)) {\n    return 'an Object type';\n  }\n  if (isInterfaceType(type)) {\n    return 'an Interface type';\n  }\n  if (isUnionType(type)) {\n    return 'a Union type';\n  }\n  if (isEnumType(type)) {\n    return 'an Enum type';\n  }\n\n  /* istanbul ignore else */\n  if (isInputObjectType(type)) {\n    return 'an Input type';\n  } // Not reachable. All possible named types have been considered.\n\n  /* istanbul ignore next */\n  invariant(false, 'Unexpected type: ' + inspect(type));\n}\nfunction stringifyValue(value, type) {\n  var ast = astFromValue(value, type);\n\n  /* istanbul ignore next */\n  ast != null || invariant(0);\n  return print(ast);\n}\nfunction diff(oldArray, newArray) {\n  var added = [];\n  var removed = [];\n  var persisted = [];\n  var oldMap = keyMap(oldArray, function (_ref11) {\n    var name = _ref11.name;\n    return name;\n  });\n  var newMap = keyMap(newArray, function (_ref12) {\n    var name = _ref12.name;\n    return name;\n  });\n  for (var _i44 = 0; _i44 < oldArray.length; _i44++) {\n    var oldItem = oldArray[_i44];\n    var newItem = newMap[oldItem.name];\n    if (newItem === undefined) {\n      removed.push(oldItem);\n    } else {\n      persisted.push([oldItem, newItem]);\n    }\n  }\n  for (var _i46 = 0; _i46 < newArray.length; _i46++) {\n    var _newItem = newArray[_i46];\n    if (oldMap[_newItem.name] === undefined) {\n      added.push(_newItem);\n    }\n  }\n  return {\n    added: added,\n    persisted: persisted,\n    removed: removed\n  };\n}","map":{"version":3,"names":["objectValues","keyMap","inspect","invariant","print","isScalarType","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","isNonNullType","isListType","isNamedType","isRequiredArgument","isRequiredInputField","astFromValue","BreakingChangeType","Object","freeze","TYPE_REMOVED","TYPE_CHANGED_KIND","TYPE_REMOVED_FROM_UNION","VALUE_REMOVED_FROM_ENUM","REQUIRED_INPUT_FIELD_ADDED","INTERFACE_REMOVED_FROM_OBJECT","FIELD_REMOVED","FIELD_CHANGED_KIND","REQUIRED_ARG_ADDED","ARG_REMOVED","ARG_CHANGED_KIND","DIRECTIVE_REMOVED","DIRECTIVE_ARG_REMOVED","REQUIRED_DIRECTIVE_ARG_ADDED","DIRECTIVE_LOCATION_REMOVED","DangerousChangeType","VALUE_ADDED_TO_ENUM","TYPE_ADDED_TO_UNION","OPTIONAL_INPUT_FIELD_ADDED","OPTIONAL_ARG_ADDED","INTERFACE_ADDED_TO_OBJECT","ARG_DEFAULT_VALUE_CHANGE","findBreakingChanges","oldSchema","newSchema","breakingChanges","findSchemaChanges","filter","change","type","findDangerousChanges","dangerousChanges","concat","findTypeChanges","findDirectiveChanges","schemaChanges","directivesDiff","diff","getDirectives","_i2","_directivesDiff$remov2","removed","length","oldDirective","push","description","name","_i4","_directivesDiff$persi2","persisted","_ref2","_oldDirective","newDirective","argsDiff","args","_i6","_argsDiff$added2","added","newArg","_i8","_argsDiff$removed2","oldArg","_i10","_oldDirective$locatio2","locations","location","indexOf","typesDiff","getTypeMap","_i12","_typesDiff$removed2","oldType","_i14","_typesDiff$persisted2","_ref4","_oldType","newType","apply","findEnumTypeChanges","findUnionTypeChanges","findInputObjectTypeChanges","findObjectTypeChanges","findFieldChanges","constructor","typeKindName","fieldsDiff","getFields","_i16","_fieldsDiff$added2","newField","_i18","_fieldsDiff$removed2","oldField","_i20","_fieldsDiff$persisted2","_ref6","_oldField","_newField","isSafe","isChangeSafeForInputObjectFieldOrFieldArg","String","possibleTypesDiff","getTypes","_i22","_possibleTypesDiff$ad2","newPossibleType","_i24","_possibleTypesDiff$re2","oldPossibleType","valuesDiff","getValues","_i26","_valuesDiff$added2","newValue","_i28","_valuesDiff$removed2","oldValue","interfacesDiff","getInterfaces","_i30","_interfacesDiff$added2","newInterface","_i32","_interfacesDiff$remov2","oldInterface","_i34","_fieldsDiff$removed4","_i36","_fieldsDiff$persisted4","_ref8","_oldField2","findArgChanges","isChangeSafeForObjectOrInterfaceField","_i38","_argsDiff$removed4","_i40","_argsDiff$persisted2","_ref10","_oldArg","defaultValue","undefined","oldValueStr","stringifyValue","newValueStr","_i42","_argsDiff$added4","_newArg","ofType","value","ast","oldArray","newArray","oldMap","_ref11","newMap","_ref12","_i44","oldItem","newItem","_i46","_newItem"],"sources":["/Users/Junhaeng/untitled folder/junior-design/amplifyapp/node_modules/graphql/utilities/findBreakingChanges.mjs"],"sourcesContent":["import objectValues from '../polyfills/objectValues';\nimport keyMap from '../jsutils/keyMap';\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport { print } from '../language/printer';\nimport { isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isNonNullType, isListType, isNamedType, isRequiredArgument, isRequiredInputField } from '../type/definition';\nimport { astFromValue } from './astFromValue';\nexport var BreakingChangeType = Object.freeze({\n  TYPE_REMOVED: 'TYPE_REMOVED',\n  TYPE_CHANGED_KIND: 'TYPE_CHANGED_KIND',\n  TYPE_REMOVED_FROM_UNION: 'TYPE_REMOVED_FROM_UNION',\n  VALUE_REMOVED_FROM_ENUM: 'VALUE_REMOVED_FROM_ENUM',\n  REQUIRED_INPUT_FIELD_ADDED: 'REQUIRED_INPUT_FIELD_ADDED',\n  INTERFACE_REMOVED_FROM_OBJECT: 'INTERFACE_REMOVED_FROM_OBJECT',\n  FIELD_REMOVED: 'FIELD_REMOVED',\n  FIELD_CHANGED_KIND: 'FIELD_CHANGED_KIND',\n  REQUIRED_ARG_ADDED: 'REQUIRED_ARG_ADDED',\n  ARG_REMOVED: 'ARG_REMOVED',\n  ARG_CHANGED_KIND: 'ARG_CHANGED_KIND',\n  DIRECTIVE_REMOVED: 'DIRECTIVE_REMOVED',\n  DIRECTIVE_ARG_REMOVED: 'DIRECTIVE_ARG_REMOVED',\n  REQUIRED_DIRECTIVE_ARG_ADDED: 'REQUIRED_DIRECTIVE_ARG_ADDED',\n  DIRECTIVE_LOCATION_REMOVED: 'DIRECTIVE_LOCATION_REMOVED'\n});\nexport var DangerousChangeType = Object.freeze({\n  VALUE_ADDED_TO_ENUM: 'VALUE_ADDED_TO_ENUM',\n  TYPE_ADDED_TO_UNION: 'TYPE_ADDED_TO_UNION',\n  OPTIONAL_INPUT_FIELD_ADDED: 'OPTIONAL_INPUT_FIELD_ADDED',\n  OPTIONAL_ARG_ADDED: 'OPTIONAL_ARG_ADDED',\n  INTERFACE_ADDED_TO_OBJECT: 'INTERFACE_ADDED_TO_OBJECT',\n  ARG_DEFAULT_VALUE_CHANGE: 'ARG_DEFAULT_VALUE_CHANGE'\n});\n\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of breaking changes covered by the other functions down below.\n */\nexport function findBreakingChanges(oldSchema, newSchema) {\n  var breakingChanges = findSchemaChanges(oldSchema, newSchema).filter(function (change) {\n    return change.type in BreakingChangeType;\n  });\n  return breakingChanges;\n}\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of potentially dangerous changes covered by the other functions down below.\n */\n\nexport function findDangerousChanges(oldSchema, newSchema) {\n  var dangerousChanges = findSchemaChanges(oldSchema, newSchema).filter(function (change) {\n    return change.type in DangerousChangeType;\n  });\n  return dangerousChanges;\n}\n\nfunction findSchemaChanges(oldSchema, newSchema) {\n  return [].concat(findTypeChanges(oldSchema, newSchema), findDirectiveChanges(oldSchema, newSchema));\n}\n\nfunction findDirectiveChanges(oldSchema, newSchema) {\n  var schemaChanges = [];\n  var directivesDiff = diff(oldSchema.getDirectives(), newSchema.getDirectives());\n\n  for (var _i2 = 0, _directivesDiff$remov2 = directivesDiff.removed; _i2 < _directivesDiff$remov2.length; _i2++) {\n    var oldDirective = _directivesDiff$remov2[_i2];\n    schemaChanges.push({\n      type: BreakingChangeType.DIRECTIVE_REMOVED,\n      description: \"\".concat(oldDirective.name, \" was removed.\")\n    });\n  }\n\n  for (var _i4 = 0, _directivesDiff$persi2 = directivesDiff.persisted; _i4 < _directivesDiff$persi2.length; _i4++) {\n    var _ref2 = _directivesDiff$persi2[_i4];\n    var _oldDirective = _ref2[0];\n    var newDirective = _ref2[1];\n    var argsDiff = diff(_oldDirective.args, newDirective.args);\n\n    for (var _i6 = 0, _argsDiff$added2 = argsDiff.added; _i6 < _argsDiff$added2.length; _i6++) {\n      var newArg = _argsDiff$added2[_i6];\n\n      if (isRequiredArgument(newArg)) {\n        schemaChanges.push({\n          type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,\n          description: \"A required arg \".concat(newArg.name, \" on directive \").concat(_oldDirective.name, \" was added.\")\n        });\n      }\n    }\n\n    for (var _i8 = 0, _argsDiff$removed2 = argsDiff.removed; _i8 < _argsDiff$removed2.length; _i8++) {\n      var oldArg = _argsDiff$removed2[_i8];\n      schemaChanges.push({\n        type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,\n        description: \"\".concat(oldArg.name, \" was removed from \").concat(_oldDirective.name, \".\")\n      });\n    }\n\n    for (var _i10 = 0, _oldDirective$locatio2 = _oldDirective.locations; _i10 < _oldDirective$locatio2.length; _i10++) {\n      var location = _oldDirective$locatio2[_i10];\n\n      if (newDirective.locations.indexOf(location) === -1) {\n        schemaChanges.push({\n          type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,\n          description: \"\".concat(location, \" was removed from \").concat(_oldDirective.name, \".\")\n        });\n      }\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findTypeChanges(oldSchema, newSchema) {\n  var schemaChanges = [];\n  var typesDiff = diff(objectValues(oldSchema.getTypeMap()), objectValues(newSchema.getTypeMap()));\n\n  for (var _i12 = 0, _typesDiff$removed2 = typesDiff.removed; _i12 < _typesDiff$removed2.length; _i12++) {\n    var oldType = _typesDiff$removed2[_i12];\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED,\n      description: \"\".concat(oldType.name, \" was removed.\")\n    });\n  }\n\n  for (var _i14 = 0, _typesDiff$persisted2 = typesDiff.persisted; _i14 < _typesDiff$persisted2.length; _i14++) {\n    var _ref4 = _typesDiff$persisted2[_i14];\n    var _oldType = _ref4[0];\n    var newType = _ref4[1];\n\n    if (isEnumType(_oldType) && isEnumType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findEnumTypeChanges(_oldType, newType));\n    } else if (isUnionType(_oldType) && isUnionType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findUnionTypeChanges(_oldType, newType));\n    } else if (isInputObjectType(_oldType) && isInputObjectType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findInputObjectTypeChanges(_oldType, newType));\n    } else if (isObjectType(_oldType) && isObjectType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findObjectTypeChanges(_oldType, newType));\n    } else if (isInterfaceType(_oldType) && isInterfaceType(newType)) {\n      schemaChanges.push.apply(schemaChanges, findFieldChanges(_oldType, newType));\n    } else if (_oldType.constructor !== newType.constructor) {\n      schemaChanges.push({\n        type: BreakingChangeType.TYPE_CHANGED_KIND,\n        description: \"\".concat(_oldType.name, \" changed from \") + \"\".concat(typeKindName(_oldType), \" to \").concat(typeKindName(newType), \".\")\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findInputObjectTypeChanges(oldType, newType) {\n  var schemaChanges = [];\n  var fieldsDiff = diff(objectValues(oldType.getFields()), objectValues(newType.getFields()));\n\n  for (var _i16 = 0, _fieldsDiff$added2 = fieldsDiff.added; _i16 < _fieldsDiff$added2.length; _i16++) {\n    var newField = _fieldsDiff$added2[_i16];\n\n    if (isRequiredInputField(newField)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,\n        description: \"A required field \".concat(newField.name, \" on input type \").concat(oldType.name, \" was added.\")\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,\n        description: \"An optional field \".concat(newField.name, \" on input type \").concat(oldType.name, \" was added.\")\n      });\n    }\n  }\n\n  for (var _i18 = 0, _fieldsDiff$removed2 = fieldsDiff.removed; _i18 < _fieldsDiff$removed2.length; _i18++) {\n    var oldField = _fieldsDiff$removed2[_i18];\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" was removed.\")\n    });\n  }\n\n  for (var _i20 = 0, _fieldsDiff$persisted2 = fieldsDiff.persisted; _i20 < _fieldsDiff$persisted2.length; _i20++) {\n    var _ref6 = _fieldsDiff$persisted2[_i20];\n    var _oldField = _ref6[0];\n    var _newField = _ref6[1];\n    var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldField.type, _newField.type);\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description: \"\".concat(oldType.name, \".\").concat(_oldField.name, \" changed type from \") + \"\".concat(String(_oldField.type), \" to \").concat(String(_newField.type), \".\")\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findUnionTypeChanges(oldType, newType) {\n  var schemaChanges = [];\n  var possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());\n\n  for (var _i22 = 0, _possibleTypesDiff$ad2 = possibleTypesDiff.added; _i22 < _possibleTypesDiff$ad2.length; _i22++) {\n    var newPossibleType = _possibleTypesDiff$ad2[_i22];\n    schemaChanges.push({\n      type: DangerousChangeType.TYPE_ADDED_TO_UNION,\n      description: \"\".concat(newPossibleType.name, \" was added to union type \").concat(oldType.name, \".\")\n    });\n  }\n\n  for (var _i24 = 0, _possibleTypesDiff$re2 = possibleTypesDiff.removed; _i24 < _possibleTypesDiff$re2.length; _i24++) {\n    var oldPossibleType = _possibleTypesDiff$re2[_i24];\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,\n      description: \"\".concat(oldPossibleType.name, \" was removed from union type \").concat(oldType.name, \".\")\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findEnumTypeChanges(oldType, newType) {\n  var schemaChanges = [];\n  var valuesDiff = diff(oldType.getValues(), newType.getValues());\n\n  for (var _i26 = 0, _valuesDiff$added2 = valuesDiff.added; _i26 < _valuesDiff$added2.length; _i26++) {\n    var newValue = _valuesDiff$added2[_i26];\n    schemaChanges.push({\n      type: DangerousChangeType.VALUE_ADDED_TO_ENUM,\n      description: \"\".concat(newValue.name, \" was added to enum type \").concat(oldType.name, \".\")\n    });\n  }\n\n  for (var _i28 = 0, _valuesDiff$removed2 = valuesDiff.removed; _i28 < _valuesDiff$removed2.length; _i28++) {\n    var oldValue = _valuesDiff$removed2[_i28];\n    schemaChanges.push({\n      type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,\n      description: \"\".concat(oldValue.name, \" was removed from enum type \").concat(oldType.name, \".\")\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findObjectTypeChanges(oldType, newType) {\n  var schemaChanges = findFieldChanges(oldType, newType);\n  var interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());\n\n  for (var _i30 = 0, _interfacesDiff$added2 = interfacesDiff.added; _i30 < _interfacesDiff$added2.length; _i30++) {\n    var newInterface = _interfacesDiff$added2[_i30];\n    schemaChanges.push({\n      type: DangerousChangeType.INTERFACE_ADDED_TO_OBJECT,\n      description: \"\".concat(newInterface.name, \" added to interfaces implemented by \").concat(oldType.name, \".\")\n    });\n  }\n\n  for (var _i32 = 0, _interfacesDiff$remov2 = interfacesDiff.removed; _i32 < _interfacesDiff$remov2.length; _i32++) {\n    var oldInterface = _interfacesDiff$remov2[_i32];\n    schemaChanges.push({\n      type: BreakingChangeType.INTERFACE_REMOVED_FROM_OBJECT,\n      description: \"\".concat(oldType.name, \" no longer implements interface \").concat(oldInterface.name, \".\")\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findFieldChanges(oldType, newType) {\n  var schemaChanges = [];\n  var fieldsDiff = diff(objectValues(oldType.getFields()), objectValues(newType.getFields()));\n\n  for (var _i34 = 0, _fieldsDiff$removed4 = fieldsDiff.removed; _i34 < _fieldsDiff$removed4.length; _i34++) {\n    var oldField = _fieldsDiff$removed4[_i34];\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" was removed.\")\n    });\n  }\n\n  for (var _i36 = 0, _fieldsDiff$persisted4 = fieldsDiff.persisted; _i36 < _fieldsDiff$persisted4.length; _i36++) {\n    var _ref8 = _fieldsDiff$persisted4[_i36];\n    var _oldField2 = _ref8[0];\n    var newField = _ref8[1];\n    schemaChanges.push.apply(schemaChanges, findArgChanges(oldType, _oldField2, newField));\n    var isSafe = isChangeSafeForObjectOrInterfaceField(_oldField2.type, newField.type);\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description: \"\".concat(oldType.name, \".\").concat(_oldField2.name, \" changed type from \") + \"\".concat(String(_oldField2.type), \" to \").concat(String(newField.type), \".\")\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findArgChanges(oldType, oldField, newField) {\n  var schemaChanges = [];\n  var argsDiff = diff(oldField.args, newField.args);\n\n  for (var _i38 = 0, _argsDiff$removed4 = argsDiff.removed; _i38 < _argsDiff$removed4.length; _i38++) {\n    var oldArg = _argsDiff$removed4[_i38];\n    schemaChanges.push({\n      type: BreakingChangeType.ARG_REMOVED,\n      description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(oldArg.name, \" was removed.\")\n    });\n  }\n\n  for (var _i40 = 0, _argsDiff$persisted2 = argsDiff.persisted; _i40 < _argsDiff$persisted2.length; _i40++) {\n    var _ref10 = _argsDiff$persisted2[_i40];\n    var _oldArg = _ref10[0];\n    var newArg = _ref10[1];\n    var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldArg.type, newArg.type);\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.ARG_CHANGED_KIND,\n        description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(_oldArg.name, \" has changed type from \") + \"\".concat(String(_oldArg.type), \" to \").concat(String(newArg.type), \".\")\n      });\n    } else if (_oldArg.defaultValue !== undefined) {\n      if (newArg.defaultValue === undefined) {\n        schemaChanges.push({\n          type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n          description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(_oldArg.name, \" defaultValue was removed.\")\n        });\n      } else {\n        var oldValueStr = stringifyValue(_oldArg.defaultValue, _oldArg.type);\n        var newValueStr = stringifyValue(newArg.defaultValue, newArg.type);\n\n        if (oldValueStr !== newValueStr) {\n          schemaChanges.push({\n            type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n            description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(_oldArg.name, \" has changed defaultValue from \").concat(oldValueStr, \" to \").concat(newValueStr, \".\")\n          });\n        }\n      }\n    }\n  }\n\n  for (var _i42 = 0, _argsDiff$added4 = argsDiff.added; _i42 < _argsDiff$added4.length; _i42++) {\n    var _newArg = _argsDiff$added4[_i42];\n\n    if (isRequiredArgument(_newArg)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_ARG_ADDED,\n        description: \"A required arg \".concat(_newArg.name, \" on \").concat(oldType.name, \".\").concat(oldField.name, \" was added.\")\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_ARG_ADDED,\n        description: \"An optional arg \".concat(_newArg.name, \" on \").concat(oldType.name, \".\").concat(oldField.name, \" was added.\")\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction isChangeSafeForObjectOrInterfaceField(oldType, newType) {\n  if (isListType(oldType)) {\n    return (// if they're both lists, make sure the underlying types are compatible\n      isListType(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) || // moving from nullable to non-null of the same underlying type is safe\n      isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n    );\n  }\n\n  if (isNonNullType(oldType)) {\n    // if they're both non-null, make sure the underlying types are compatible\n    return isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);\n  }\n\n  return (// if they're both named types, see if their names are equivalent\n    isNamedType(newType) && oldType.name === newType.name || // moving from nullable to non-null of the same underlying type is safe\n    isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n  );\n}\n\nfunction isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {\n  if (isListType(oldType)) {\n    // if they're both lists, make sure the underlying types are compatible\n    return isListType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);\n  }\n\n  if (isNonNullType(oldType)) {\n    return (// if they're both non-null, make sure the underlying types are\n      // compatible\n      isNonNullType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) || // moving from non-null to nullable of the same underlying type is safe\n      !isNonNullType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType)\n    );\n  } // if they're both named types, see if their names are equivalent\n\n\n  return isNamedType(newType) && oldType.name === newType.name;\n}\n\nfunction typeKindName(type) {\n  if (isScalarType(type)) {\n    return 'a Scalar type';\n  }\n\n  if (isObjectType(type)) {\n    return 'an Object type';\n  }\n\n  if (isInterfaceType(type)) {\n    return 'an Interface type';\n  }\n\n  if (isUnionType(type)) {\n    return 'a Union type';\n  }\n\n  if (isEnumType(type)) {\n    return 'an Enum type';\n  }\n\n  /* istanbul ignore else */\n  if (isInputObjectType(type)) {\n    return 'an Input type';\n  } // Not reachable. All possible named types have been considered.\n\n\n  /* istanbul ignore next */\n  invariant(false, 'Unexpected type: ' + inspect(type));\n}\n\nfunction stringifyValue(value, type) {\n  var ast = astFromValue(value, type);\n\n  /* istanbul ignore next */\n  ast != null || invariant(0);\n  return print(ast);\n}\n\nfunction diff(oldArray, newArray) {\n  var added = [];\n  var removed = [];\n  var persisted = [];\n  var oldMap = keyMap(oldArray, function (_ref11) {\n    var name = _ref11.name;\n    return name;\n  });\n  var newMap = keyMap(newArray, function (_ref12) {\n    var name = _ref12.name;\n    return name;\n  });\n\n  for (var _i44 = 0; _i44 < oldArray.length; _i44++) {\n    var oldItem = oldArray[_i44];\n    var newItem = newMap[oldItem.name];\n\n    if (newItem === undefined) {\n      removed.push(oldItem);\n    } else {\n      persisted.push([oldItem, newItem]);\n    }\n  }\n\n  for (var _i46 = 0; _i46 < newArray.length; _i46++) {\n    var _newItem = newArray[_i46];\n\n    if (oldMap[_newItem.name] === undefined) {\n      added.push(_newItem);\n    }\n  }\n\n  return {\n    added: added,\n    persisted: persisted,\n    removed: removed\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}