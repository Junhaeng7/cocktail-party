{"ast":null,"code":"import _slicedToArray from \"/Users/Junhaeng/Desktop/cocktail/amplifyapp/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/Junhaeng/Desktop/cocktail/amplifyapp/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/Junhaeng/Desktop/cocktail/amplifyapp/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/Junhaeng/Desktop/cocktail/amplifyapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/Junhaeng/Desktop/cocktail/amplifyapp/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/Junhaeng/Desktop/cocktail/amplifyapp/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _get from \"/Users/Junhaeng/Desktop/cocktail/amplifyapp/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/Junhaeng/Desktop/cocktail/amplifyapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport { MixedType } from './MixedType';\nimport { createValidator, createValidatorAsync, checkRequired, isEmpty } from './utils';\nexport var ObjectType = /*#__PURE__*/function (_MixedType) {\n  _inherits(ObjectType, _MixedType);\n  var _super = _createSuper(ObjectType);\n  function ObjectType(errorMessage) {\n    var _thisSuper, _this;\n    _classCallCheck(this, ObjectType);\n    _this = _super.call(this, 'object');\n    _get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(ObjectType.prototype)), \"pushRule\", _thisSuper).call(_thisSuper, {\n      onValid: function onValid(v) {\n        return typeof v === 'object';\n      },\n      errorMessage: errorMessage || _this.locale.type\n    });\n    return _this;\n  }\n  _createClass(ObjectType, [{\n    key: \"check\",\n    value: function check() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.value;\n      var data = arguments.length > 1 ? arguments[1] : undefined;\n      var fieldName = arguments.length > 2 ? arguments[2] : undefined;\n      var check = function check(value, data, type) {\n        if (type.required && !checkRequired(value, type.trim, type.emptyAllowed)) {\n          return {\n            hasError: true,\n            errorMessage: type.requiredMessage\n          };\n        }\n        if (type.objectTypeSchemaSpec && typeof value === 'object') {\n          var checkResultObject = {};\n          var hasError = false;\n          Object.entries(type.objectTypeSchemaSpec).forEach(function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n              k = _ref2[0],\n              v = _ref2[1];\n            var checkResult = check(value[k], value, v);\n            if (checkResult === null || checkResult === void 0 ? void 0 : checkResult.hasError) {\n              hasError = true;\n            }\n            checkResultObject[k] = checkResult;\n          });\n          return {\n            hasError: hasError,\n            object: checkResultObject\n          };\n        }\n        var validator = createValidator(data, fieldName);\n        var checkStatus = validator(value, type.priorityRules);\n        if (checkStatus) {\n          return checkStatus;\n        }\n        if (!type.required && isEmpty(value)) {\n          return {\n            hasError: false\n          };\n        }\n        return validator(value, type.rules) || {\n          hasError: false\n        };\n      };\n      return check(value, data, this);\n    }\n  }, {\n    key: \"checkAsync\",\n    value: function checkAsync() {\n      var _this2 = this;\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.value;\n      var data = arguments.length > 1 ? arguments[1] : undefined;\n      var fieldName = arguments.length > 2 ? arguments[2] : undefined;\n      var check = function check(value, data, type) {\n        if (type.required && !checkRequired(value, type.trim, type.emptyAllowed)) {\n          return Promise.resolve({\n            hasError: true,\n            errorMessage: _this2.requiredMessage\n          });\n        }\n        var validator = createValidatorAsync(data, fieldName);\n        return new Promise(function (resolve) {\n          if (type.objectTypeSchemaSpec && typeof value === 'object') {\n            var checkResult = {};\n            var checkAll = [];\n            var keys = [];\n            Object.entries(type.objectTypeSchemaSpec).forEach(function (_ref3) {\n              var _ref4 = _slicedToArray(_ref3, 2),\n                k = _ref4[0],\n                v = _ref4[1];\n              checkAll.push(check(value[k], value, v));\n              keys.push(k);\n            });\n            return Promise.all(checkAll).then(function (values) {\n              values.forEach(function (v, index) {\n                checkResult[keys[index]] = v;\n              });\n              resolve({\n                object: checkResult\n              });\n            });\n          }\n          return validator(value, type.priorityRules).then(function (checkStatus) {\n            if (checkStatus) {\n              resolve(checkStatus);\n            }\n          }).then(function () {\n            if (!type.required && isEmpty(value)) {\n              resolve({\n                hasError: false\n              });\n            }\n          }).then(function () {\n            return validator(value, type.rules);\n          }).then(function (checkStatus) {\n            if (checkStatus) {\n              resolve(checkStatus);\n            }\n            resolve({\n              hasError: false\n            });\n          });\n        });\n      };\n      return check(value, data, this);\n    }\n    /**\n     * @example\n     * ObjectType().shape({\n     *  name: StringType(),\n     *  age: NumberType()\n     * })\n     */\n  }, {\n    key: \"shape\",\n    value: function shape(fields) {\n      this.objectTypeSchemaSpec = fields;\n      return this;\n    }\n  }]);\n  return ObjectType;\n}(MixedType);\nexport default function getObjectType(errorMessage) {\n  return new ObjectType(errorMessage);\n}","map":{"version":3,"sources":["../src/ObjectType.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { MixedType } from './MixedType';\nimport { createValidator, createValidatorAsync, checkRequired, isEmpty } from './utils';\nexport class ObjectType extends MixedType {\n    constructor(errorMessage) {\n        super('object');\n        super.pushRule({\n            onValid: v => typeof v === 'object',\n            errorMessage: errorMessage || this.locale.type\n        });\n    }\n    check(value = this.value, data, fieldName) {\n        const check = (value, data, type) => {\n            if (type.required && !checkRequired(value, type.trim, type.emptyAllowed)) {\n                return { hasError: true, errorMessage: type.requiredMessage };\n            }\n            if (type.objectTypeSchemaSpec && typeof value === 'object') {\n                const checkResultObject = {};\n                let hasError = false;\n                Object.entries(type.objectTypeSchemaSpec).forEach(([k, v]) => {\n                    const checkResult = check(value[k], value, v);\n                    if (checkResult === null || checkResult === void 0 ? void 0 : checkResult.hasError) {\n                        hasError = true;\n                    }\n                    checkResultObject[k] = checkResult;\n                });\n                return { hasError, object: checkResultObject };\n            }\n            const validator = createValidator(data, fieldName);\n            const checkStatus = validator(value, type.priorityRules);\n            if (checkStatus) {\n                return checkStatus;\n            }\n            if (!type.required && isEmpty(value)) {\n                return { hasError: false };\n            }\n            return validator(value, type.rules) || { hasError: false };\n        };\n        return check(value, data, this);\n    }\n    checkAsync(value = this.value, data, fieldName) {\n        const check = (value, data, type) => {\n            if (type.required && !checkRequired(value, type.trim, type.emptyAllowed)) {\n                return Promise.resolve({ hasError: true, errorMessage: this.requiredMessage });\n            }\n            const validator = createValidatorAsync(data, fieldName);\n            return new Promise(resolve => {\n                if (type.objectTypeSchemaSpec && typeof value === 'object') {\n                    const checkResult = {};\n                    const checkAll = [];\n                    const keys = [];\n                    Object.entries(type.objectTypeSchemaSpec).forEach(([k, v]) => {\n                        checkAll.push(check(value[k], value, v));\n                        keys.push(k);\n                    });\n                    return Promise.all(checkAll).then(values => {\n                        values.forEach((v, index) => {\n                            checkResult[keys[index]] = v;\n                        });\n                        resolve({ object: checkResult });\n                    });\n                }\n                return validator(value, type.priorityRules)\n                    .then((checkStatus) => {\n                    if (checkStatus) {\n                        resolve(checkStatus);\n                    }\n                })\n                    .then(() => {\n                    if (!type.required && isEmpty(value)) {\n                        resolve({ hasError: false });\n                    }\n                })\n                    .then(() => validator(value, type.rules))\n                    .then((checkStatus) => {\n                    if (checkStatus) {\n                        resolve(checkStatus);\n                    }\n                    resolve({ hasError: false });\n                });\n            });\n        };\n        return check(value, data, this);\n    }\n    /**\n     * @example\n     * ObjectType().shape({\n     *  name: StringType(),\n     *  age: NumberType()\n     * })\n     */\n    shape(fields) {\n        this.objectTypeSchemaSpec = fields;\n        return this;\n    }\n}\nexport default function getObjectType(errorMessage) {\n    return new ObjectType(errorMessage);\n}\n//# sourceMappingURL=ObjectType.js.map"]},"metadata":{},"sourceType":"module"}