{"ast":null,"code":"import { useRef, useCallback, useEffect } from 'react';\nimport getWidth from 'dom-lib/getWidth';\nimport getHeight from 'dom-lib/getHeight';\nimport getOffset from 'dom-lib/getOffset';\nimport { SCROLLBAR_WIDTH } from '../constants';\nimport debounce from 'lodash/debounce';\nimport bindElementResize, { unbind as unbindElementResize } from 'element-resize-event';\nimport useMount from './useMount';\nimport useUpdateLayoutEffect from './useUpdateLayoutEffect';\nimport isNumberOrTrue from './isNumberOrTrue';\n\n/**\n * The dimension information of the table,\n * including the height, width, scrollable distance and the coordinates of the scroll handle, etc.\n * @param props\n * @returns\n */\nvar useTableDimension = function useTableDimension(props) {\n  var data = props.data,\n    rowHeight = props.rowHeight,\n    tableRef = props.tableRef,\n    headerWrapperRef = props.headerWrapperRef,\n    prefix = props.prefix,\n    widthProp = props.width,\n    affixHeader = props.affixHeader,\n    affixHorizontalScrollbar = props.affixHorizontalScrollbar,\n    headerHeight = props.headerHeight,\n    height = props.height,\n    autoHeight = props.autoHeight,\n    children = props.children,\n    expandedRowKeys = props.expandedRowKeys,\n    onTableWidthChange = props.onTableWidthChange,\n    onTableContentWidthChange = props.onTableContentWidthChange,\n    onTableContentHeightChange = props.onTableContentHeightChange,\n    onTableScroll = props.onTableScroll;\n  var contentHeight = useRef(0);\n  var contentWidth = useRef(0);\n  var minScrollY = useRef(0);\n  var scrollY = useRef(0);\n  var scrollX = useRef(0);\n  var minScrollX = useRef(0);\n  var tableWidth = useRef(widthProp || 0);\n  var columnCount = useRef(0);\n  var headerOffset = useRef(null);\n  var tableOffset = useRef(null);\n  var calculateTableContextHeight = useCallback(function () {\n    var prevContentHeight = contentHeight.current;\n    var table = tableRef.current;\n    var rows = table.querySelectorAll(\".\" + prefix('row')) || [];\n    var nextContentHeight = rows.length ? Array.from(rows).map(function (row) {\n      return getHeight(row) || rowHeight;\n    }).reduce(function (x, y) {\n      return x + y;\n    }) : 0; // After setting the affixHeader property, the height of the two headers should be subtracted.\n\n    contentHeight.current = Math.round(nextContentHeight - (affixHeader ? headerHeight * 2 : headerHeight));\n    if (!autoHeight) {\n      /**\n       *  The purpose of subtracting SCROLLBAR_WIDTH is to keep the scroll bar from blocking the content part.\n       *  But it will only be calculated when there is a horizontal scroll bar (contentWidth > tableWidth).\n       */\n      minScrollY.current = -(nextContentHeight - height) - (contentWidth.current > tableWidth.current ? SCROLLBAR_WIDTH : 0);\n    } // If the height of the content area is less than the height of the table, the vertical scroll bar is reset.\n\n    if (nextContentHeight < height) {\n      onTableScroll({\n        y: 0\n      });\n    } // If the value of scrollTop is greater than the scrollable range, the vertical scroll bar is reset.\n    // When Table is set to virtualized, the logic will be entered every time the wheel event is triggered\n    // to avoid resetting the scroll bar after scrolling to the bottom, so add the SCROLLBAR_WIDTH value.\n\n    if (Math.abs(scrollY.current) + height - headerHeight > nextContentHeight + SCROLLBAR_WIDTH) {\n      onTableScroll({\n        y: scrollY.current\n      });\n    }\n    if (prevContentHeight !== contentHeight.current) {\n      onTableContentHeightChange(prevContentHeight);\n    }\n  }, [affixHeader, autoHeight, headerHeight, height, onTableScroll, onTableContentHeightChange, prefix, rowHeight, tableRef]);\n  var setOffsetByAffix = useCallback(function () {\n    var headerNode = headerWrapperRef === null || headerWrapperRef === void 0 ? void 0 : headerWrapperRef.current;\n    if (isNumberOrTrue(affixHeader) && headerNode) {\n      headerOffset.current = getOffset(headerNode);\n    }\n    if (isNumberOrTrue(affixHorizontalScrollbar) && tableRef !== null && tableRef !== void 0 && tableRef.current) {\n      tableOffset.current = getOffset(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);\n    }\n  }, [affixHeader, affixHorizontalScrollbar, headerWrapperRef, tableRef]);\n  var calculateTableContentWidth = useCallback(function () {\n    var prevWidth = contentWidth.current;\n    var prevColumnCount = columnCount.current;\n    var table = tableRef === null || tableRef === void 0 ? void 0 : tableRef.current;\n    var row = table.querySelector(\".\" + prefix('row') + \":not(.virtualized)\");\n    var nextContentWidth = row ? getWidth(row) : 0;\n    contentWidth.current = nextContentWidth;\n    columnCount.current = (row === null || row === void 0 ? void 0 : row.querySelectorAll(\".\" + prefix('cell')).length) || 0; // The value of SCROLLBAR_WIDTH is subtracted so that the scroll bar does not block the content part.\n    // There is no vertical scroll bar after autoHeight.\n\n    minScrollX.current = -(nextContentWidth - tableWidth.current) - (autoHeight ? 0 : SCROLLBAR_WIDTH);\n    /**\n     * If the width of the content area and the number of columns change,\n     * the horizontal scroll bar is reset.\n     * fix: https://github.com/rsuite/rsuite/issues/2039\n     */\n\n    if (prevWidth > 0 && prevWidth !== contentWidth.current && prevColumnCount > 0 && prevColumnCount !== columnCount.current) {\n      onTableContentWidthChange(prevWidth);\n    }\n  }, [autoHeight, onTableContentWidthChange, prefix, tableRef]);\n  var calculateTableWidth = useCallback(function () {\n    var prevWidth = tableWidth.current;\n    if (tableRef !== null && tableRef !== void 0 && tableRef.current) {\n      var nextWidth = getWidth(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);\n      tableWidth.current = nextWidth;\n    }\n    if (prevWidth !== tableWidth.current) {\n      scrollX.current = 0;\n      onTableWidthChange === null || onTableWidthChange === void 0 ? void 0 : onTableWidthChange(prevWidth);\n    }\n    setOffsetByAffix();\n  }, [onTableWidthChange, setOffsetByAffix, tableRef]);\n  useMount(function () {\n    calculateTableContextHeight();\n    calculateTableContentWidth();\n    calculateTableWidth();\n    setOffsetByAffix();\n    bindElementResize(tableRef.current, debounce(calculateTableWidth, 400));\n  });\n  useUpdateLayoutEffect(function () {\n    calculateTableWidth();\n    calculateTableContextHeight();\n    calculateTableContentWidth();\n  }, [data, height, contentHeight, expandedRowKeys, children, calculateTableContextHeight, calculateTableContentWidth]);\n  useEffect(function () {\n    return function () {\n      if (tableRef.current) {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        unbindElementResize(tableRef.current);\n      }\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var setScrollY = useCallback(function (value) {\n    scrollY.current = value;\n  }, []);\n  var setScrollX = useCallback(function (value) {\n    scrollX.current = value;\n  }, []);\n  return {\n    contentHeight: contentHeight,\n    contentWidth: contentWidth,\n    minScrollY: minScrollY,\n    minScrollX: minScrollX,\n    scrollY: scrollY,\n    scrollX: scrollX,\n    tableWidth: tableWidth,\n    headerOffset: headerOffset,\n    tableOffset: tableOffset,\n    setScrollY: setScrollY,\n    setScrollX: setScrollX\n  };\n};\nexport default useTableDimension;","map":{"version":3,"names":["useRef","useCallback","useEffect","getWidth","getHeight","getOffset","SCROLLBAR_WIDTH","debounce","bindElementResize","unbind","unbindElementResize","useMount","useUpdateLayoutEffect","isNumberOrTrue","useTableDimension","props","data","rowHeight","tableRef","headerWrapperRef","prefix","widthProp","width","affixHeader","affixHorizontalScrollbar","headerHeight","height","autoHeight","children","expandedRowKeys","onTableWidthChange","onTableContentWidthChange","onTableContentHeightChange","onTableScroll","contentHeight","contentWidth","minScrollY","scrollY","scrollX","minScrollX","tableWidth","columnCount","headerOffset","tableOffset","calculateTableContextHeight","prevContentHeight","current","table","rows","querySelectorAll","nextContentHeight","length","Array","from","map","row","reduce","x","y","Math","round","abs","setOffsetByAffix","headerNode","calculateTableContentWidth","prevWidth","prevColumnCount","querySelector","nextContentWidth","calculateTableWidth","nextWidth","setScrollY","value","setScrollX"],"sources":["/Users/Junhaeng/untitled folder/junior-design/amplifyapp/node_modules/rsuite-table/es/utils/useTableDimension.js"],"sourcesContent":["import { useRef, useCallback, useEffect } from 'react';\nimport getWidth from 'dom-lib/getWidth';\nimport getHeight from 'dom-lib/getHeight';\nimport getOffset from 'dom-lib/getOffset';\nimport { SCROLLBAR_WIDTH } from '../constants';\nimport debounce from 'lodash/debounce';\nimport bindElementResize, { unbind as unbindElementResize } from 'element-resize-event';\nimport useMount from './useMount';\nimport useUpdateLayoutEffect from './useUpdateLayoutEffect';\nimport isNumberOrTrue from './isNumberOrTrue';\n\n/**\n * The dimension information of the table,\n * including the height, width, scrollable distance and the coordinates of the scroll handle, etc.\n * @param props\n * @returns\n */\nvar useTableDimension = function useTableDimension(props) {\n  var data = props.data,\n      rowHeight = props.rowHeight,\n      tableRef = props.tableRef,\n      headerWrapperRef = props.headerWrapperRef,\n      prefix = props.prefix,\n      widthProp = props.width,\n      affixHeader = props.affixHeader,\n      affixHorizontalScrollbar = props.affixHorizontalScrollbar,\n      headerHeight = props.headerHeight,\n      height = props.height,\n      autoHeight = props.autoHeight,\n      children = props.children,\n      expandedRowKeys = props.expandedRowKeys,\n      onTableWidthChange = props.onTableWidthChange,\n      onTableContentWidthChange = props.onTableContentWidthChange,\n      onTableContentHeightChange = props.onTableContentHeightChange,\n      onTableScroll = props.onTableScroll;\n  var contentHeight = useRef(0);\n  var contentWidth = useRef(0);\n  var minScrollY = useRef(0);\n  var scrollY = useRef(0);\n  var scrollX = useRef(0);\n  var minScrollX = useRef(0);\n  var tableWidth = useRef(widthProp || 0);\n  var columnCount = useRef(0);\n  var headerOffset = useRef(null);\n  var tableOffset = useRef(null);\n  var calculateTableContextHeight = useCallback(function () {\n    var prevContentHeight = contentHeight.current;\n    var table = tableRef.current;\n    var rows = table.querySelectorAll(\".\" + prefix('row')) || [];\n    var nextContentHeight = rows.length ? Array.from(rows).map(function (row) {\n      return getHeight(row) || rowHeight;\n    }).reduce(function (x, y) {\n      return x + y;\n    }) : 0; // After setting the affixHeader property, the height of the two headers should be subtracted.\n\n    contentHeight.current = Math.round(nextContentHeight - (affixHeader ? headerHeight * 2 : headerHeight));\n\n    if (!autoHeight) {\n      /**\n       *  The purpose of subtracting SCROLLBAR_WIDTH is to keep the scroll bar from blocking the content part.\n       *  But it will only be calculated when there is a horizontal scroll bar (contentWidth > tableWidth).\n       */\n      minScrollY.current = -(nextContentHeight - height) - (contentWidth.current > tableWidth.current ? SCROLLBAR_WIDTH : 0);\n    } // If the height of the content area is less than the height of the table, the vertical scroll bar is reset.\n\n\n    if (nextContentHeight < height) {\n      onTableScroll({\n        y: 0\n      });\n    } // If the value of scrollTop is greater than the scrollable range, the vertical scroll bar is reset.\n    // When Table is set to virtualized, the logic will be entered every time the wheel event is triggered\n    // to avoid resetting the scroll bar after scrolling to the bottom, so add the SCROLLBAR_WIDTH value.\n\n\n    if (Math.abs(scrollY.current) + height - headerHeight > nextContentHeight + SCROLLBAR_WIDTH) {\n      onTableScroll({\n        y: scrollY.current\n      });\n    }\n\n    if (prevContentHeight !== contentHeight.current) {\n      onTableContentHeightChange(prevContentHeight);\n    }\n  }, [affixHeader, autoHeight, headerHeight, height, onTableScroll, onTableContentHeightChange, prefix, rowHeight, tableRef]);\n  var setOffsetByAffix = useCallback(function () {\n    var headerNode = headerWrapperRef === null || headerWrapperRef === void 0 ? void 0 : headerWrapperRef.current;\n\n    if (isNumberOrTrue(affixHeader) && headerNode) {\n      headerOffset.current = getOffset(headerNode);\n    }\n\n    if (isNumberOrTrue(affixHorizontalScrollbar) && tableRef !== null && tableRef !== void 0 && tableRef.current) {\n      tableOffset.current = getOffset(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);\n    }\n  }, [affixHeader, affixHorizontalScrollbar, headerWrapperRef, tableRef]);\n  var calculateTableContentWidth = useCallback(function () {\n    var prevWidth = contentWidth.current;\n    var prevColumnCount = columnCount.current;\n    var table = tableRef === null || tableRef === void 0 ? void 0 : tableRef.current;\n    var row = table.querySelector(\".\" + prefix('row') + \":not(.virtualized)\");\n    var nextContentWidth = row ? getWidth(row) : 0;\n    contentWidth.current = nextContentWidth;\n    columnCount.current = (row === null || row === void 0 ? void 0 : row.querySelectorAll(\".\" + prefix('cell')).length) || 0; // The value of SCROLLBAR_WIDTH is subtracted so that the scroll bar does not block the content part.\n    // There is no vertical scroll bar after autoHeight.\n\n    minScrollX.current = -(nextContentWidth - tableWidth.current) - (autoHeight ? 0 : SCROLLBAR_WIDTH);\n    /**\n     * If the width of the content area and the number of columns change,\n     * the horizontal scroll bar is reset.\n     * fix: https://github.com/rsuite/rsuite/issues/2039\n     */\n\n    if (prevWidth > 0 && prevWidth !== contentWidth.current && prevColumnCount > 0 && prevColumnCount !== columnCount.current) {\n      onTableContentWidthChange(prevWidth);\n    }\n  }, [autoHeight, onTableContentWidthChange, prefix, tableRef]);\n  var calculateTableWidth = useCallback(function () {\n    var prevWidth = tableWidth.current;\n\n    if (tableRef !== null && tableRef !== void 0 && tableRef.current) {\n      var nextWidth = getWidth(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);\n      tableWidth.current = nextWidth;\n    }\n\n    if (prevWidth !== tableWidth.current) {\n      scrollX.current = 0;\n      onTableWidthChange === null || onTableWidthChange === void 0 ? void 0 : onTableWidthChange(prevWidth);\n    }\n\n    setOffsetByAffix();\n  }, [onTableWidthChange, setOffsetByAffix, tableRef]);\n  useMount(function () {\n    calculateTableContextHeight();\n    calculateTableContentWidth();\n    calculateTableWidth();\n    setOffsetByAffix();\n    bindElementResize(tableRef.current, debounce(calculateTableWidth, 400));\n  });\n  useUpdateLayoutEffect(function () {\n    calculateTableWidth();\n    calculateTableContextHeight();\n    calculateTableContentWidth();\n  }, [data, height, contentHeight, expandedRowKeys, children, calculateTableContextHeight, calculateTableContentWidth]);\n  useEffect(function () {\n    return function () {\n      if (tableRef.current) {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        unbindElementResize(tableRef.current);\n      }\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var setScrollY = useCallback(function (value) {\n    scrollY.current = value;\n  }, []);\n  var setScrollX = useCallback(function (value) {\n    scrollX.current = value;\n  }, []);\n  return {\n    contentHeight: contentHeight,\n    contentWidth: contentWidth,\n    minScrollY: minScrollY,\n    minScrollX: minScrollX,\n    scrollY: scrollY,\n    scrollX: scrollX,\n    tableWidth: tableWidth,\n    headerOffset: headerOffset,\n    tableOffset: tableOffset,\n    setScrollY: setScrollY,\n    setScrollX: setScrollX\n  };\n};\n\nexport default useTableDimension;"],"mappings":"AAAA,SAASA,MAAM,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AACtD,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,SAAS,MAAM,mBAAmB;AACzC,OAAOC,SAAS,MAAM,mBAAmB;AACzC,SAASC,eAAe,QAAQ,cAAc;AAC9C,OAAOC,QAAQ,MAAM,iBAAiB;AACtC,OAAOC,iBAAiB,IAAIC,MAAM,IAAIC,mBAAmB,QAAQ,sBAAsB;AACvF,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,qBAAqB,MAAM,yBAAyB;AAC3D,OAAOC,cAAc,MAAM,kBAAkB;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,iBAAiB,GAAG,SAASA,iBAAiBA,CAACC,KAAK,EAAE;EACxD,IAAIC,IAAI,GAAGD,KAAK,CAACC,IAAI;IACjBC,SAAS,GAAGF,KAAK,CAACE,SAAS;IAC3BC,QAAQ,GAAGH,KAAK,CAACG,QAAQ;IACzBC,gBAAgB,GAAGJ,KAAK,CAACI,gBAAgB;IACzCC,MAAM,GAAGL,KAAK,CAACK,MAAM;IACrBC,SAAS,GAAGN,KAAK,CAACO,KAAK;IACvBC,WAAW,GAAGR,KAAK,CAACQ,WAAW;IAC/BC,wBAAwB,GAAGT,KAAK,CAACS,wBAAwB;IACzDC,YAAY,GAAGV,KAAK,CAACU,YAAY;IACjCC,MAAM,GAAGX,KAAK,CAACW,MAAM;IACrBC,UAAU,GAAGZ,KAAK,CAACY,UAAU;IAC7BC,QAAQ,GAAGb,KAAK,CAACa,QAAQ;IACzBC,eAAe,GAAGd,KAAK,CAACc,eAAe;IACvCC,kBAAkB,GAAGf,KAAK,CAACe,kBAAkB;IAC7CC,yBAAyB,GAAGhB,KAAK,CAACgB,yBAAyB;IAC3DC,0BAA0B,GAAGjB,KAAK,CAACiB,0BAA0B;IAC7DC,aAAa,GAAGlB,KAAK,CAACkB,aAAa;EACvC,IAAIC,aAAa,GAAGlC,MAAM,CAAC,CAAC,CAAC;EAC7B,IAAImC,YAAY,GAAGnC,MAAM,CAAC,CAAC,CAAC;EAC5B,IAAIoC,UAAU,GAAGpC,MAAM,CAAC,CAAC,CAAC;EAC1B,IAAIqC,OAAO,GAAGrC,MAAM,CAAC,CAAC,CAAC;EACvB,IAAIsC,OAAO,GAAGtC,MAAM,CAAC,CAAC,CAAC;EACvB,IAAIuC,UAAU,GAAGvC,MAAM,CAAC,CAAC,CAAC;EAC1B,IAAIwC,UAAU,GAAGxC,MAAM,CAACqB,SAAS,IAAI,CAAC,CAAC;EACvC,IAAIoB,WAAW,GAAGzC,MAAM,CAAC,CAAC,CAAC;EAC3B,IAAI0C,YAAY,GAAG1C,MAAM,CAAC,IAAI,CAAC;EAC/B,IAAI2C,WAAW,GAAG3C,MAAM,CAAC,IAAI,CAAC;EAC9B,IAAI4C,2BAA2B,GAAG3C,WAAW,CAAC,YAAY;IACxD,IAAI4C,iBAAiB,GAAGX,aAAa,CAACY,OAAO;IAC7C,IAAIC,KAAK,GAAG7B,QAAQ,CAAC4B,OAAO;IAC5B,IAAIE,IAAI,GAAGD,KAAK,CAACE,gBAAgB,CAAC,GAAG,GAAG7B,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE;IAC5D,IAAI8B,iBAAiB,GAAGF,IAAI,CAACG,MAAM,GAAGC,KAAK,CAACC,IAAI,CAACL,IAAI,CAAC,CAACM,GAAG,CAAC,UAAUC,GAAG,EAAE;MACxE,OAAOnD,SAAS,CAACmD,GAAG,CAAC,IAAItC,SAAS;IACpC,CAAC,CAAC,CAACuC,MAAM,CAAC,UAAUC,CAAC,EAAEC,CAAC,EAAE;MACxB,OAAOD,CAAC,GAAGC,CAAC;IACd,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;;IAERxB,aAAa,CAACY,OAAO,GAAGa,IAAI,CAACC,KAAK,CAACV,iBAAiB,IAAI3B,WAAW,GAAGE,YAAY,GAAG,CAAC,GAAGA,YAAY,CAAC,CAAC;IAEvG,IAAI,CAACE,UAAU,EAAE;MACf;AACN;AACA;AACA;MACMS,UAAU,CAACU,OAAO,GAAG,EAAEI,iBAAiB,GAAGxB,MAAM,CAAC,IAAIS,YAAY,CAACW,OAAO,GAAGN,UAAU,CAACM,OAAO,GAAGxC,eAAe,GAAG,CAAC,CAAC;IACxH,CAAC,CAAC;;IAGF,IAAI4C,iBAAiB,GAAGxB,MAAM,EAAE;MAC9BO,aAAa,CAAC;QACZyB,CAAC,EAAE;MACL,CAAC,CAAC;IACJ,CAAC,CAAC;IACF;IACA;;IAGA,IAAIC,IAAI,CAACE,GAAG,CAACxB,OAAO,CAACS,OAAO,CAAC,GAAGpB,MAAM,GAAGD,YAAY,GAAGyB,iBAAiB,GAAG5C,eAAe,EAAE;MAC3F2B,aAAa,CAAC;QACZyB,CAAC,EAAErB,OAAO,CAACS;MACb,CAAC,CAAC;IACJ;IAEA,IAAID,iBAAiB,KAAKX,aAAa,CAACY,OAAO,EAAE;MAC/Cd,0BAA0B,CAACa,iBAAiB,CAAC;IAC/C;EACF,CAAC,EAAE,CAACtB,WAAW,EAAEI,UAAU,EAAEF,YAAY,EAAEC,MAAM,EAAEO,aAAa,EAAED,0BAA0B,EAAEZ,MAAM,EAAEH,SAAS,EAAEC,QAAQ,CAAC,CAAC;EAC3H,IAAI4C,gBAAgB,GAAG7D,WAAW,CAAC,YAAY;IAC7C,IAAI8D,UAAU,GAAG5C,gBAAgB,KAAK,IAAI,IAAIA,gBAAgB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,gBAAgB,CAAC2B,OAAO;IAE7G,IAAIjC,cAAc,CAACU,WAAW,CAAC,IAAIwC,UAAU,EAAE;MAC7CrB,YAAY,CAACI,OAAO,GAAGzC,SAAS,CAAC0D,UAAU,CAAC;IAC9C;IAEA,IAAIlD,cAAc,CAACW,wBAAwB,CAAC,IAAIN,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,IAAIA,QAAQ,CAAC4B,OAAO,EAAE;MAC5GH,WAAW,CAACG,OAAO,GAAGzC,SAAS,CAACa,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAAC4B,OAAO,CAAC;IACvG;EACF,CAAC,EAAE,CAACvB,WAAW,EAAEC,wBAAwB,EAAEL,gBAAgB,EAAED,QAAQ,CAAC,CAAC;EACvE,IAAI8C,0BAA0B,GAAG/D,WAAW,CAAC,YAAY;IACvD,IAAIgE,SAAS,GAAG9B,YAAY,CAACW,OAAO;IACpC,IAAIoB,eAAe,GAAGzB,WAAW,CAACK,OAAO;IACzC,IAAIC,KAAK,GAAG7B,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAAC4B,OAAO;IAChF,IAAIS,GAAG,GAAGR,KAAK,CAACoB,aAAa,CAAC,GAAG,GAAG/C,MAAM,CAAC,KAAK,CAAC,GAAG,oBAAoB,CAAC;IACzE,IAAIgD,gBAAgB,GAAGb,GAAG,GAAGpD,QAAQ,CAACoD,GAAG,CAAC,GAAG,CAAC;IAC9CpB,YAAY,CAACW,OAAO,GAAGsB,gBAAgB;IACvC3B,WAAW,CAACK,OAAO,GAAG,CAACS,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,GAAG,CAACN,gBAAgB,CAAC,GAAG,GAAG7B,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC+B,MAAM,KAAK,CAAC,CAAC,CAAC;IAC1H;;IAEAZ,UAAU,CAACO,OAAO,GAAG,EAAEsB,gBAAgB,GAAG5B,UAAU,CAACM,OAAO,CAAC,IAAInB,UAAU,GAAG,CAAC,GAAGrB,eAAe,CAAC;IAClG;AACJ;AACA;AACA;AACA;;IAEI,IAAI2D,SAAS,GAAG,CAAC,IAAIA,SAAS,KAAK9B,YAAY,CAACW,OAAO,IAAIoB,eAAe,GAAG,CAAC,IAAIA,eAAe,KAAKzB,WAAW,CAACK,OAAO,EAAE;MACzHf,yBAAyB,CAACkC,SAAS,CAAC;IACtC;EACF,CAAC,EAAE,CAACtC,UAAU,EAAEI,yBAAyB,EAAEX,MAAM,EAAEF,QAAQ,CAAC,CAAC;EAC7D,IAAImD,mBAAmB,GAAGpE,WAAW,CAAC,YAAY;IAChD,IAAIgE,SAAS,GAAGzB,UAAU,CAACM,OAAO;IAElC,IAAI5B,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,IAAIA,QAAQ,CAAC4B,OAAO,EAAE;MAChE,IAAIwB,SAAS,GAAGnE,QAAQ,CAACe,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAAC4B,OAAO,CAAC;MAC9FN,UAAU,CAACM,OAAO,GAAGwB,SAAS;IAChC;IAEA,IAAIL,SAAS,KAAKzB,UAAU,CAACM,OAAO,EAAE;MACpCR,OAAO,CAACQ,OAAO,GAAG,CAAC;MACnBhB,kBAAkB,KAAK,IAAI,IAAIA,kBAAkB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,kBAAkB,CAACmC,SAAS,CAAC;IACvG;IAEAH,gBAAgB,EAAE;EACpB,CAAC,EAAE,CAAChC,kBAAkB,EAAEgC,gBAAgB,EAAE5C,QAAQ,CAAC,CAAC;EACpDP,QAAQ,CAAC,YAAY;IACnBiC,2BAA2B,EAAE;IAC7BoB,0BAA0B,EAAE;IAC5BK,mBAAmB,EAAE;IACrBP,gBAAgB,EAAE;IAClBtD,iBAAiB,CAACU,QAAQ,CAAC4B,OAAO,EAAEvC,QAAQ,CAAC8D,mBAAmB,EAAE,GAAG,CAAC,CAAC;EACzE,CAAC,CAAC;EACFzD,qBAAqB,CAAC,YAAY;IAChCyD,mBAAmB,EAAE;IACrBzB,2BAA2B,EAAE;IAC7BoB,0BAA0B,EAAE;EAC9B,CAAC,EAAE,CAAChD,IAAI,EAAEU,MAAM,EAAEQ,aAAa,EAAEL,eAAe,EAAED,QAAQ,EAAEgB,2BAA2B,EAAEoB,0BAA0B,CAAC,CAAC;EACrH9D,SAAS,CAAC,YAAY;IACpB,OAAO,YAAY;MACjB,IAAIgB,QAAQ,CAAC4B,OAAO,EAAE;QACpB;QACApC,mBAAmB,CAACQ,QAAQ,CAAC4B,OAAO,CAAC;MACvC;IACF,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EACN,IAAIyB,UAAU,GAAGtE,WAAW,CAAC,UAAUuE,KAAK,EAAE;IAC5CnC,OAAO,CAACS,OAAO,GAAG0B,KAAK;EACzB,CAAC,EAAE,EAAE,CAAC;EACN,IAAIC,UAAU,GAAGxE,WAAW,CAAC,UAAUuE,KAAK,EAAE;IAC5ClC,OAAO,CAACQ,OAAO,GAAG0B,KAAK;EACzB,CAAC,EAAE,EAAE,CAAC;EACN,OAAO;IACLtC,aAAa,EAAEA,aAAa;IAC5BC,YAAY,EAAEA,YAAY;IAC1BC,UAAU,EAAEA,UAAU;IACtBG,UAAU,EAAEA,UAAU;IACtBF,OAAO,EAAEA,OAAO;IAChBC,OAAO,EAAEA,OAAO;IAChBE,UAAU,EAAEA,UAAU;IACtBE,YAAY,EAAEA,YAAY;IAC1BC,WAAW,EAAEA,WAAW;IACxB4B,UAAU,EAAEA,UAAU;IACtBE,UAAU,EAAEA;EACd,CAAC;AACH,CAAC;AAED,eAAe3D,iBAAiB"},"metadata":{},"sourceType":"module"}