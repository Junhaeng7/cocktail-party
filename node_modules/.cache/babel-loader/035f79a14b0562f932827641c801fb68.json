{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { AdaptiveRetryStrategy } from \"./AdaptiveRetryStrategy\";\nimport { DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE, RETRY_MODES } from \"./config\";\nimport { StandardRetryStrategy } from \"./StandardRetryStrategy\";\nexport var ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\nexport var CONFIG_MAX_ATTEMPTS = \"max_attempts\";\nexport var NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {\n  environmentVariableSelector: function environmentVariableSelector(env) {\n    var value = env[ENV_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    var maxAttempt = parseInt(value);\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(\"Environment variable \" + ENV_MAX_ATTEMPTS + \" mast be a number, got \\\"\" + value + \"\\\"\");\n    }\n    return maxAttempt;\n  },\n  configFileSelector: function configFileSelector(profile) {\n    var value = profile[CONFIG_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    var maxAttempt = parseInt(value);\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(\"Shared config file entry \" + CONFIG_MAX_ATTEMPTS + \" mast be a number, got \\\"\" + value + \"\\\"\");\n    }\n    return maxAttempt;\n  },\n  default: DEFAULT_MAX_ATTEMPTS\n};\nexport var resolveRetryConfig = function resolveRetryConfig(input) {\n  var maxAttempts = normalizeMaxAttempts(input.maxAttempts);\n  return __assign(__assign({}, input), {\n    maxAttempts: maxAttempts,\n    retryStrategy: function retryStrategy() {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var retryMode;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (input.retryStrategy) {\n                return [2, input.retryStrategy];\n              }\n              return [4, getRetryMode(input.retryMode)];\n            case 1:\n              retryMode = _a.sent();\n              if (retryMode === RETRY_MODES.ADAPTIVE) {\n                return [2, new AdaptiveRetryStrategy(maxAttempts)];\n              }\n              return [2, new StandardRetryStrategy(maxAttempts)];\n          }\n        });\n      });\n    }\n  });\n};\nvar getRetryMode = function getRetryMode(retryMode) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (typeof retryMode === \"string\") {\n            return [2, retryMode];\n          }\n          return [4, retryMode()];\n        case 1:\n          return [2, _a.sent()];\n      }\n    });\n  });\n};\nvar normalizeMaxAttempts = function normalizeMaxAttempts(maxAttempts) {\n  if (maxAttempts === void 0) {\n    maxAttempts = DEFAULT_MAX_ATTEMPTS;\n  }\n  if (typeof maxAttempts === \"number\") {\n    var promisified_1 = Promise.resolve(maxAttempts);\n    return function () {\n      return promisified_1;\n    };\n  }\n  return maxAttempts;\n};\nexport var ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\nexport var CONFIG_RETRY_MODE = \"retry_mode\";\nexport var NODE_RETRY_MODE_CONFIG_OPTIONS = {\n  environmentVariableSelector: function environmentVariableSelector(env) {\n    return env[ENV_RETRY_MODE];\n  },\n  configFileSelector: function configFileSelector(profile) {\n    return profile[CONFIG_RETRY_MODE];\n  },\n  default: DEFAULT_RETRY_MODE\n};","map":{"version":3,"names":["__assign","__awaiter","__generator","AdaptiveRetryStrategy","DEFAULT_MAX_ATTEMPTS","DEFAULT_RETRY_MODE","RETRY_MODES","StandardRetryStrategy","ENV_MAX_ATTEMPTS","CONFIG_MAX_ATTEMPTS","NODE_MAX_ATTEMPT_CONFIG_OPTIONS","environmentVariableSelector","env","value","undefined","maxAttempt","parseInt","Number","isNaN","Error","configFileSelector","profile","default","resolveRetryConfig","input","maxAttempts","normalizeMaxAttempts","retryStrategy","retryMode","_a","label","getRetryMode","sent","ADAPTIVE","promisified_1","Promise","resolve","ENV_RETRY_MODE","CONFIG_RETRY_MODE","NODE_RETRY_MODE_CONFIG_OPTIONS"],"sources":["/Users/Junhaeng/untitled folder/junior-design/amplifyapp/node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/middleware-retry/dist-es/configurations.js"],"sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { AdaptiveRetryStrategy } from \"./AdaptiveRetryStrategy\";\nimport { DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE, RETRY_MODES } from \"./config\";\nimport { StandardRetryStrategy } from \"./StandardRetryStrategy\";\nexport var ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\nexport var CONFIG_MAX_ATTEMPTS = \"max_attempts\";\nexport var NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {\n    environmentVariableSelector: function (env) {\n        var value = env[ENV_MAX_ATTEMPTS];\n        if (!value)\n            return undefined;\n        var maxAttempt = parseInt(value);\n        if (Number.isNaN(maxAttempt)) {\n            throw new Error(\"Environment variable \" + ENV_MAX_ATTEMPTS + \" mast be a number, got \\\"\" + value + \"\\\"\");\n        }\n        return maxAttempt;\n    },\n    configFileSelector: function (profile) {\n        var value = profile[CONFIG_MAX_ATTEMPTS];\n        if (!value)\n            return undefined;\n        var maxAttempt = parseInt(value);\n        if (Number.isNaN(maxAttempt)) {\n            throw new Error(\"Shared config file entry \" + CONFIG_MAX_ATTEMPTS + \" mast be a number, got \\\"\" + value + \"\\\"\");\n        }\n        return maxAttempt;\n    },\n    default: DEFAULT_MAX_ATTEMPTS,\n};\nexport var resolveRetryConfig = function (input) {\n    var maxAttempts = normalizeMaxAttempts(input.maxAttempts);\n    return __assign(__assign({}, input), { maxAttempts: maxAttempts, retryStrategy: function () { return __awaiter(void 0, void 0, void 0, function () {\n            var retryMode;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (input.retryStrategy) {\n                            return [2, input.retryStrategy];\n                        }\n                        return [4, getRetryMode(input.retryMode)];\n                    case 1:\n                        retryMode = _a.sent();\n                        if (retryMode === RETRY_MODES.ADAPTIVE) {\n                            return [2, new AdaptiveRetryStrategy(maxAttempts)];\n                        }\n                        return [2, new StandardRetryStrategy(maxAttempts)];\n                }\n            });\n        }); } });\n};\nvar getRetryMode = function (retryMode) { return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (typeof retryMode === \"string\") {\n                    return [2, retryMode];\n                }\n                return [4, retryMode()];\n            case 1: return [2, _a.sent()];\n        }\n    });\n}); };\nvar normalizeMaxAttempts = function (maxAttempts) {\n    if (maxAttempts === void 0) { maxAttempts = DEFAULT_MAX_ATTEMPTS; }\n    if (typeof maxAttempts === \"number\") {\n        var promisified_1 = Promise.resolve(maxAttempts);\n        return function () { return promisified_1; };\n    }\n    return maxAttempts;\n};\nexport var ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\nexport var CONFIG_RETRY_MODE = \"retry_mode\";\nexport var NODE_RETRY_MODE_CONFIG_OPTIONS = {\n    environmentVariableSelector: function (env) { return env[ENV_RETRY_MODE]; },\n    configFileSelector: function (profile) { return profile[CONFIG_RETRY_MODE]; },\n    default: DEFAULT_RETRY_MODE,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}