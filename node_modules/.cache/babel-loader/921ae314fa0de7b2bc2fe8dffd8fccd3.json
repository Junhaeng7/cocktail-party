{"ast":null,"code":"/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2]) _.ops.pop();\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { PutObjectCommand, CreateMultipartUploadCommand, UploadPartCommand, CompleteMultipartUploadCommand, ListPartsCommand, AbortMultipartUploadCommand } from '@aws-sdk/client-s3';\nimport { SEND_UPLOAD_PROGRESS_EVENT, SEND_DOWNLOAD_PROGRESS_EVENT } from './axios-http-handler';\nimport * as events from 'events';\nimport { createPrefixMiddleware, prefixMiddlewareOptions, autoAdjustClockskewMiddleware, autoAdjustClockskewMiddlewareOptions, createS3Client } from '../common/S3ClientUtils';\nvar logger = new Logger('AWSS3ProviderManagedUpload');\nvar AWSS3ProviderManagedUpload = /** @class */function () {\n  function AWSS3ProviderManagedUpload(params, opts, emitter) {\n    // Defaults\n    this.minPartSize = 5 * 1024 * 1024; // in MB\n    this.queueSize = 4;\n    // Data for current upload\n    this.body = null;\n    this.params = null;\n    this.opts = null;\n    this.completedParts = [];\n    this.cancel = false;\n    // Progress reporting\n    this.bytesUploaded = 0;\n    this.totalBytesToUpload = 0;\n    this.emitter = null;\n    this.params = params;\n    this.opts = opts;\n    this.emitter = emitter;\n    this.s3client = this._createNewS3Client(opts, emitter);\n  }\n  AWSS3ProviderManagedUpload.prototype.upload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, putObjectCommand, uploadId, numberOfPartsToUpload, parts, start;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this;\n            return [4 /*yield*/, this.validateAndSanitizeBody(this.params.Body)];\n          case 1:\n            _a.body = _b.sent();\n            this.totalBytesToUpload = this.byteLength(this.body);\n            if (!(this.totalBytesToUpload <= this.minPartSize)) return [3 /*break*/, 2];\n            // Multipart upload is not required. Upload the sanitized body as is\n            this.params.Body = this.body;\n            putObjectCommand = new PutObjectCommand(this.params);\n            return [2 /*return*/, this.s3client.send(putObjectCommand)];\n          case 2:\n            return [4 /*yield*/, this.createMultiPartUpload()];\n          case 3:\n            uploadId = _b.sent();\n            numberOfPartsToUpload = Math.ceil(this.totalBytesToUpload / this.minPartSize);\n            parts = this.createParts();\n            start = 0;\n            _b.label = 4;\n          case 4:\n            if (!(start < numberOfPartsToUpload)) return [3 /*break*/, 9];\n            /** This first block will try to cancel the upload if the cancel\n             *\trequest came before any parts uploads have started.\n             **/\n            return [4 /*yield*/, this.checkIfUploadCancelled(uploadId)];\n          case 5:\n            /** This first block will try to cancel the upload if the cancel\n             *\trequest came before any parts uploads have started.\n             **/\n            _b.sent();\n            // Upload as many as `queueSize` parts simultaneously\n            return [4 /*yield*/, this.uploadParts(uploadId, parts.slice(start, start + this.queueSize))];\n          case 6:\n            // Upload as many as `queueSize` parts simultaneously\n            _b.sent();\n            /** Call cleanup a second time in case there were part upload requests\n             *  in flight. This is to ensure that all parts are cleaned up.\n             */\n            return [4 /*yield*/, this.checkIfUploadCancelled(uploadId)];\n          case 7:\n            /** Call cleanup a second time in case there were part upload requests\n             *  in flight. This is to ensure that all parts are cleaned up.\n             */\n            _b.sent();\n            _b.label = 8;\n          case 8:\n            start += this.queueSize;\n            return [3 /*break*/, 4];\n          case 9:\n            parts.map(function (part) {\n              _this.removeEventListener(part);\n            });\n            return [4 /*yield*/, this.finishMultiPartUpload(uploadId)];\n          case 10:\n            // Step 3: Finalize the upload such that S3 can recreate the file\n            return [2 /*return*/, _b.sent()];\n        }\n      });\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.createParts = function () {\n    var parts = [];\n    for (var bodyStart = 0; bodyStart < this.totalBytesToUpload;) {\n      var bodyEnd = Math.min(bodyStart + this.minPartSize, this.totalBytesToUpload);\n      parts.push({\n        bodyPart: this.body.slice(bodyStart, bodyEnd),\n        partNumber: parts.length + 1,\n        emitter: new events.EventEmitter(),\n        _lastUploadedBytes: 0\n      });\n      bodyStart += this.minPartSize;\n    }\n    return parts;\n  };\n  AWSS3ProviderManagedUpload.prototype.createMultiPartUpload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var createMultiPartUploadCommand, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            createMultiPartUploadCommand = new CreateMultipartUploadCommand(this.params);\n            return [4 /*yield*/, this.s3client.send(createMultiPartUploadCommand)];\n          case 1:\n            response = _a.sent();\n            logger.debug(response.UploadId);\n            return [2 /*return*/, response.UploadId];\n        }\n      });\n    });\n  };\n  /**\n   * @private Not to be extended outside of tests\n   * @VisibleFotTesting\n   */\n  AWSS3ProviderManagedUpload.prototype.uploadParts = function (uploadId, parts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var allResults, i, error_1;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, Promise.all(parts.map(function (part) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var options, _a, Key, Bucket, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, res;\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      this.setupEventListener(part);\n                      options = {\n                        emitter: part.emitter\n                      };\n                      _a = this.params, Key = _a.Key, Bucket = _a.Bucket, SSECustomerAlgorithm = _a.SSECustomerAlgorithm, SSECustomerKey = _a.SSECustomerKey, SSECustomerKeyMD5 = _a.SSECustomerKeyMD5;\n                      return [4 /*yield*/, this.s3client.send(new UploadPartCommand(__assign(__assign(__assign({\n                        PartNumber: part.partNumber,\n                        Body: part.bodyPart,\n                        UploadId: uploadId,\n                        Key: Key,\n                        Bucket: Bucket\n                      }, SSECustomerAlgorithm && {\n                        SSECustomerAlgorithm: SSECustomerAlgorithm\n                      }), SSECustomerKey && {\n                        SSECustomerKey: SSECustomerKey\n                      }), SSECustomerKeyMD5 && {\n                        SSECustomerKeyMD5: SSECustomerKeyMD5\n                      })), options)];\n                    case 1:\n                      res = _b.sent();\n                      return [2 /*return*/, res];\n                  }\n                });\n              });\n            }))];\n          case 1:\n            allResults = _a.sent();\n            // The order of resolved promises is the same as input promise order.\n            for (i = 0; i < allResults.length; i++) {\n              this.completedParts.push({\n                PartNumber: parts[i].partNumber,\n                ETag: allResults[i].ETag\n              });\n            }\n            return [3 /*break*/, 3];\n          case 2:\n            error_1 = _a.sent();\n            logger.error('error happened while uploading a part. Cancelling the multipart upload', error_1);\n            this.cancelUpload();\n            return [2 /*return*/];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.finishMultiPartUpload = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var input, completeUploadCommand, data, error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            input = {\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: uploadId,\n              MultipartUpload: {\n                Parts: this.completedParts\n              }\n            };\n            completeUploadCommand = new CompleteMultipartUploadCommand(input);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.s3client.send(completeUploadCommand)];\n          case 2:\n            data = _a.sent();\n            return [2 /*return*/, data.Key];\n          case 3:\n            error_2 = _a.sent();\n            logger.error('error happened while finishing the upload. Cancelling the multipart upload', error_2);\n            this.cancelUpload();\n            return [2 /*return*/];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.checkIfUploadCancelled = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var errorMessage, error_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.cancel) return [3 /*break*/, 5];\n            errorMessage = 'Upload was cancelled.';\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.cleanup(uploadId)];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            error_3 = _a.sent();\n            errorMessage += \" \" + error_3.message;\n            return [3 /*break*/, 4];\n          case 4:\n            throw new Error(errorMessage);\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.cancelUpload = function () {\n    this.cancel = true;\n  };\n  AWSS3ProviderManagedUpload.prototype.cleanup = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var input, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Reset this's state\n            this.body = null;\n            this.completedParts = [];\n            this.bytesUploaded = 0;\n            this.totalBytesToUpload = 0;\n            input = {\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: uploadId\n            };\n            return [4 /*yield*/, this.s3client.send(new AbortMultipartUploadCommand(input))];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this.s3client.send(new ListPartsCommand(input))];\n          case 2:\n            data = _a.sent();\n            if (data && data.Parts && data.Parts.length > 0) {\n              throw new Error('Multi Part upload clean up failed');\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.removeEventListener = function (part) {\n    part.emitter.removeAllListeners(SEND_UPLOAD_PROGRESS_EVENT);\n    part.emitter.removeAllListeners(SEND_DOWNLOAD_PROGRESS_EVENT);\n  };\n  AWSS3ProviderManagedUpload.prototype.setupEventListener = function (part) {\n    var _this = this;\n    part.emitter.on(SEND_UPLOAD_PROGRESS_EVENT, function (progress) {\n      _this.progressChanged(part.partNumber, progress.loaded - part._lastUploadedBytes);\n      part._lastUploadedBytes = progress.loaded;\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.progressChanged = function (partNumber, incrementalUpdate) {\n    this.bytesUploaded += incrementalUpdate;\n    this.emitter.emit(SEND_UPLOAD_PROGRESS_EVENT, {\n      loaded: this.bytesUploaded,\n      total: this.totalBytesToUpload,\n      part: partNumber,\n      key: this.params.Key\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.byteLength = function (input) {\n    if (input === null || input === undefined) return 0;\n    if (typeof input.byteLength === 'number') {\n      return input.byteLength;\n    } else if (typeof input.length === 'number') {\n      return input.length;\n    } else if (typeof input.size === 'number') {\n      return input.size;\n    } else if (typeof input.path === 'string') {\n      /* NodeJs Support\n      return require('fs').lstatSync(input.path).size;\n      */\n    } else {\n      throw new Error('Cannot determine length of ' + input);\n    }\n  };\n  AWSS3ProviderManagedUpload.prototype.validateAndSanitizeBody = function (body) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (this.isGenericObject(body)) {\n          // Any javascript object\n          return [2 /*return*/, JSON.stringify(body)];\n        } else {\n          // Files, arrayBuffer etc\n          return [2 /*return*/, body];\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.isGenericObject = function (body) {\n    if (body !== null && typeof body === 'object') {\n      try {\n        return !(this.byteLength(body) >= 0);\n      } catch (error) {\n        // If we cannot determine the length of the body, consider it\n        // as a generic object and upload a stringified version of it\n        return true;\n      }\n    }\n    return false;\n  };\n  AWSS3ProviderManagedUpload.prototype._createNewS3Client = function (config, emitter) {\n    var s3client = createS3Client(config, emitter);\n    s3client.middlewareStack.add(createPrefixMiddleware(this.opts, this.params.Key), prefixMiddlewareOptions);\n    s3client.middlewareStack.add(autoAdjustClockskewMiddleware(s3client.config), autoAdjustClockskewMiddlewareOptions);\n    return s3client;\n  };\n  return AWSS3ProviderManagedUpload;\n}();\nexport { AWSS3ProviderManagedUpload };","map":{"version":3,"names":["ConsoleLogger","Logger","PutObjectCommand","CreateMultipartUploadCommand","UploadPartCommand","CompleteMultipartUploadCommand","ListPartsCommand","AbortMultipartUploadCommand","SEND_UPLOAD_PROGRESS_EVENT","SEND_DOWNLOAD_PROGRESS_EVENT","events","createPrefixMiddleware","prefixMiddlewareOptions","autoAdjustClockskewMiddleware","autoAdjustClockskewMiddlewareOptions","createS3Client","logger","AWSS3ProviderManagedUpload","params","opts","emitter","minPartSize","queueSize","body","completedParts","cancel","bytesUploaded","totalBytesToUpload","s3client","_createNewS3Client","prototype","upload","_a","validateAndSanitizeBody","Body","_b","sent","byteLength","putObjectCommand","send","createMultiPartUpload","uploadId","numberOfPartsToUpload","Math","ceil","parts","createParts","start","checkIfUploadCancelled","uploadParts","slice","map","part","_this","removeEventListener","finishMultiPartUpload","bodyStart","bodyEnd","min","push","bodyPart","partNumber","length","EventEmitter","_lastUploadedBytes","createMultiPartUploadCommand","response","debug","UploadId","Promise","all","__awaiter","setupEventListener","options","Key","Bucket","SSECustomerAlgorithm","SSECustomerKey","SSECustomerKeyMD5","__assign","PartNumber","res","allResults","i","ETag","error","error_1","cancelUpload","input","MultipartUpload","Parts","completeUploadCommand","data","error_2","errorMessage","cleanup","error_3","message","Error","removeAllListeners","on","progress","progressChanged","loaded","incrementalUpdate","emit","total","key","undefined","size","path","isGenericObject","JSON","stringify","config","middlewareStack","add"],"sources":["../../src/providers/AWSS3ProviderManagedUpload.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module"}