{"ast":null,"code":"/*!\n * hotkeys-js v3.8.7\n * A simple micro-library for defining and dispatching keyboard shortcuts. It has no dependencies.\n * \n * Copyright (c) 2021 kenny wong <wowohoo@qq.com>\n * http://jaywcjlove.github.io/hotkeys\n * \n * Licensed under the MIT license.\n */\n\nvar isff = typeof navigator !== 'undefined' ? navigator.userAgent.toLowerCase().indexOf('firefox') > 0 : false; // 绑定事件\n\nfunction addEvent(object, event, method) {\n  if (object.addEventListener) {\n    object.addEventListener(event, method, false);\n  } else if (object.attachEvent) {\n    object.attachEvent(\"on\".concat(event), function () {\n      method(window.event);\n    });\n  }\n} // 修饰键转换成对应的键码\n\nfunction getMods(modifier, key) {\n  var mods = key.slice(0, key.length - 1);\n  for (var i = 0; i < mods.length; i++) {\n    mods[i] = modifier[mods[i].toLowerCase()];\n  }\n  return mods;\n} // 处理传的key字符串转换成数组\n\nfunction getKeys(key) {\n  if (typeof key !== 'string') key = '';\n  key = key.replace(/\\s/g, ''); // 匹配任何空白字符,包括空格、制表符、换页符等等\n\n  var keys = key.split(','); // 同时设置多个快捷键，以','分割\n\n  var index = keys.lastIndexOf(''); // 快捷键可能包含','，需特殊处理\n\n  for (; index >= 0;) {\n    keys[index - 1] += ',';\n    keys.splice(index, 1);\n    index = keys.lastIndexOf('');\n  }\n  return keys;\n} // 比较修饰键的数组\n\nfunction compareArray(a1, a2) {\n  var arr1 = a1.length >= a2.length ? a1 : a2;\n  var arr2 = a1.length >= a2.length ? a2 : a1;\n  var isIndex = true;\n  for (var i = 0; i < arr1.length; i++) {\n    if (arr2.indexOf(arr1[i]) === -1) isIndex = false;\n  }\n  return isIndex;\n}\nvar _keyMap = {\n  backspace: 8,\n  tab: 9,\n  clear: 12,\n  enter: 13,\n  return: 13,\n  esc: 27,\n  escape: 27,\n  space: 32,\n  left: 37,\n  up: 38,\n  right: 39,\n  down: 40,\n  del: 46,\n  delete: 46,\n  ins: 45,\n  insert: 45,\n  home: 36,\n  end: 35,\n  pageup: 33,\n  pagedown: 34,\n  capslock: 20,\n  num_0: 96,\n  num_1: 97,\n  num_2: 98,\n  num_3: 99,\n  num_4: 100,\n  num_5: 101,\n  num_6: 102,\n  num_7: 103,\n  num_8: 104,\n  num_9: 105,\n  num_multiply: 106,\n  num_add: 107,\n  num_enter: 108,\n  num_subtract: 109,\n  num_decimal: 110,\n  num_divide: 111,\n  '⇪': 20,\n  ',': 188,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '-': isff ? 173 : 189,\n  '=': isff ? 61 : 187,\n  ';': isff ? 59 : 186,\n  '\\'': 222,\n  '[': 219,\n  ']': 221,\n  '\\\\': 220\n}; // Modifier Keys\n\nvar _modifier = {\n  // shiftKey\n  '⇧': 16,\n  shift: 16,\n  // altKey\n  '⌥': 18,\n  alt: 18,\n  option: 18,\n  // ctrlKey\n  '⌃': 17,\n  ctrl: 17,\n  control: 17,\n  // metaKey\n  '⌘': 91,\n  cmd: 91,\n  command: 91\n};\nvar modifierMap = {\n  16: 'shiftKey',\n  18: 'altKey',\n  17: 'ctrlKey',\n  91: 'metaKey',\n  shiftKey: 16,\n  ctrlKey: 17,\n  altKey: 18,\n  metaKey: 91\n};\nvar _mods = {\n  16: false,\n  18: false,\n  17: false,\n  91: false\n};\nvar _handlers = {}; // F1~F12 special key\n\nfor (var k = 1; k < 20; k++) {\n  _keyMap[\"f\".concat(k)] = 111 + k;\n}\nvar _downKeys = []; // 记录摁下的绑定键\n\nvar _scope = 'all'; // 默认热键范围\n\nvar elementHasBindEvent = []; // 已绑定事件的节点记录\n// 返回键码\n\nvar code = function code(x) {\n  return _keyMap[x.toLowerCase()] || _modifier[x.toLowerCase()] || x.toUpperCase().charCodeAt(0);\n}; // 设置获取当前范围（默认为'所有'）\n\nfunction setScope(scope) {\n  _scope = scope || 'all';\n} // 获取当前范围\n\nfunction getScope() {\n  return _scope || 'all';\n} // 获取摁下绑定键的键值\n\nfunction getPressedKeyCodes() {\n  return _downKeys.slice(0);\n} // 表单控件控件判断 返回 Boolean\n// hotkey is effective only when filter return true\n\nfunction filter(event) {\n  var target = event.target || event.srcElement;\n  var tagName = target.tagName;\n  var flag = true; // ignore: isContentEditable === 'true', <input> and <textarea> when readOnly state is false, <select>\n\n  if (target.isContentEditable || (tagName === 'INPUT' || tagName === 'TEXTAREA' || tagName === 'SELECT') && !target.readOnly) {\n    flag = false;\n  }\n  return flag;\n} // 判断摁下的键是否为某个键，返回true或者false\n\nfunction isPressed(keyCode) {\n  if (typeof keyCode === 'string') {\n    keyCode = code(keyCode); // 转换成键码\n  }\n\n  return _downKeys.indexOf(keyCode) !== -1;\n} // 循环删除handlers中的所有 scope(范围)\n\nfunction deleteScope(scope, newScope) {\n  var handlers;\n  var i; // 没有指定scope，获取scope\n\n  if (!scope) scope = getScope();\n  for (var key in _handlers) {\n    if (Object.prototype.hasOwnProperty.call(_handlers, key)) {\n      handlers = _handlers[key];\n      for (i = 0; i < handlers.length;) {\n        if (handlers[i].scope === scope) handlers.splice(i, 1);else i++;\n      }\n    }\n  } // 如果scope被删除，将scope重置为all\n\n  if (getScope() === scope) setScope(newScope || 'all');\n} // 清除修饰键\n\nfunction clearModifier(event) {\n  var key = event.keyCode || event.which || event.charCode;\n  var i = _downKeys.indexOf(key); // 从列表中清除按压过的键\n\n  if (i >= 0) {\n    _downKeys.splice(i, 1);\n  } // 特殊处理 cmmand 键，在 cmmand 组合快捷键 keyup 只执行一次的问题\n\n  if (event.key && event.key.toLowerCase() === 'meta') {\n    _downKeys.splice(0, _downKeys.length);\n  } // 修饰键 shiftKey altKey ctrlKey (command||metaKey) 清除\n\n  if (key === 93 || key === 224) key = 91;\n  if (key in _mods) {\n    _mods[key] = false; // 将修饰键重置为false\n\n    for (var k in _modifier) {\n      if (_modifier[k] === key) hotkeys[k] = false;\n    }\n  }\n}\nfunction unbind(keysInfo) {\n  // unbind(), unbind all keys\n  if (!keysInfo) {\n    Object.keys(_handlers).forEach(function (key) {\n      return delete _handlers[key];\n    });\n  } else if (Array.isArray(keysInfo)) {\n    // support like : unbind([{key: 'ctrl+a', scope: 's1'}, {key: 'ctrl-a', scope: 's2', splitKey: '-'}])\n    keysInfo.forEach(function (info) {\n      if (info.key) eachUnbind(info);\n    });\n  } else if (typeof keysInfo === 'object') {\n    // support like unbind({key: 'ctrl+a, ctrl+b', scope:'abc'})\n    if (keysInfo.key) eachUnbind(keysInfo);\n  } else if (typeof keysInfo === 'string') {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    // support old method\n    // eslint-disable-line\n    var scope = args[0],\n      method = args[1];\n    if (typeof scope === 'function') {\n      method = scope;\n      scope = '';\n    }\n    eachUnbind({\n      key: keysInfo,\n      scope: scope,\n      method: method,\n      splitKey: '+'\n    });\n  }\n} // 解除绑定某个范围的快捷键\n\nvar eachUnbind = function eachUnbind(_ref) {\n  var key = _ref.key,\n    scope = _ref.scope,\n    method = _ref.method,\n    _ref$splitKey = _ref.splitKey,\n    splitKey = _ref$splitKey === void 0 ? '+' : _ref$splitKey;\n  var multipleKeys = getKeys(key);\n  multipleKeys.forEach(function (originKey) {\n    var unbindKeys = originKey.split(splitKey);\n    var len = unbindKeys.length;\n    var lastKey = unbindKeys[len - 1];\n    var keyCode = lastKey === '*' ? '*' : code(lastKey);\n    if (!_handlers[keyCode]) return; // 判断是否传入范围，没有就获取范围\n\n    if (!scope) scope = getScope();\n    var mods = len > 1 ? getMods(_modifier, unbindKeys) : [];\n    _handlers[keyCode] = _handlers[keyCode].map(function (record) {\n      // 通过函数判断，是否解除绑定，函数相等直接返回\n      var isMatchingMethod = method ? record.method === method : true;\n      if (isMatchingMethod && record.scope === scope && compareArray(record.mods, mods)) {\n        return {};\n      }\n      return record;\n    });\n  });\n}; // 对监听对应快捷键的回调函数进行处理\n\nfunction eventHandler(event, handler, scope) {\n  var modifiersMatch; // 看它是否在当前范围\n\n  if (handler.scope === scope || handler.scope === 'all') {\n    // 检查是否匹配修饰符（如果有返回true）\n    modifiersMatch = handler.mods.length > 0;\n    for (var y in _mods) {\n      if (Object.prototype.hasOwnProperty.call(_mods, y)) {\n        if (!_mods[y] && handler.mods.indexOf(+y) > -1 || _mods[y] && handler.mods.indexOf(+y) === -1) {\n          modifiersMatch = false;\n        }\n      }\n    } // 调用处理程序，如果是修饰键不做处理\n\n    if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === '*') {\n      if (handler.method(event, handler) === false) {\n        if (event.preventDefault) event.preventDefault();else event.returnValue = false;\n        if (event.stopPropagation) event.stopPropagation();\n        if (event.cancelBubble) event.cancelBubble = true;\n      }\n    }\n  }\n} // 处理keydown事件\n\nfunction dispatch(event) {\n  var asterisk = _handlers['*'];\n  var key = event.keyCode || event.which || event.charCode; // 表单控件过滤 默认表单控件不触发快捷键\n\n  if (!hotkeys.filter.call(this, event)) return; // Gecko(Firefox)的command键值224，在Webkit(Chrome)中保持一致\n  // Webkit左右 command 键值不一样\n\n  if (key === 93 || key === 224) key = 91;\n  /**\n   * Collect bound keys\n   * If an Input Method Editor is processing key input and the event is keydown, return 229.\n   * https://stackoverflow.com/questions/25043934/is-it-ok-to-ignore-keydown-events-with-keycode-229\n   * http://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html\n   */\n\n  if (_downKeys.indexOf(key) === -1 && key !== 229) _downKeys.push(key);\n  /**\n   * Jest test cases are required.\n   * ===============================\n   */\n\n  ['ctrlKey', 'altKey', 'shiftKey', 'metaKey'].forEach(function (keyName) {\n    var keyNum = modifierMap[keyName];\n    if (event[keyName] && _downKeys.indexOf(keyNum) === -1) {\n      _downKeys.push(keyNum);\n    } else if (!event[keyName] && _downKeys.indexOf(keyNum) > -1) {\n      _downKeys.splice(_downKeys.indexOf(keyNum), 1);\n    } else if (keyName === 'metaKey' && event[keyName] && _downKeys.length === 3) {\n      /**\n       * Fix if Command is pressed:\n       * ===============================\n       */\n      if (!(event.ctrlKey || event.shiftKey || event.altKey)) {\n        _downKeys = _downKeys.slice(_downKeys.indexOf(keyNum));\n      }\n    }\n  });\n  /**\n   * -------------------------------\n   */\n\n  if (key in _mods) {\n    _mods[key] = true; // 将特殊字符的key注册到 hotkeys 上\n\n    for (var k in _modifier) {\n      if (_modifier[k] === key) hotkeys[k] = true;\n    }\n    if (!asterisk) return;\n  } // 将 modifierMap 里面的修饰键绑定到 event 中\n\n  for (var e in _mods) {\n    if (Object.prototype.hasOwnProperty.call(_mods, e)) {\n      _mods[e] = event[modifierMap[e]];\n    }\n  }\n  /**\n   * https://github.com/jaywcjlove/hotkeys/pull/129\n   * This solves the issue in Firefox on Windows where hotkeys corresponding to special characters would not trigger.\n   * An example of this is ctrl+alt+m on a Swedish keyboard which is used to type μ.\n   * Browser support: https://caniuse.com/#feat=keyboardevent-getmodifierstate\n   */\n\n  if (event.getModifierState && !(event.altKey && !event.ctrlKey) && event.getModifierState('AltGraph')) {\n    if (_downKeys.indexOf(17) === -1) {\n      _downKeys.push(17);\n    }\n    if (_downKeys.indexOf(18) === -1) {\n      _downKeys.push(18);\n    }\n    _mods[17] = true;\n    _mods[18] = true;\n  } // 获取范围 默认为 `all`\n\n  var scope = getScope(); // 对任何快捷键都需要做的处理\n\n  if (asterisk) {\n    for (var i = 0; i < asterisk.length; i++) {\n      if (asterisk[i].scope === scope && (event.type === 'keydown' && asterisk[i].keydown || event.type === 'keyup' && asterisk[i].keyup)) {\n        eventHandler(event, asterisk[i], scope);\n      }\n    }\n  } // key 不在 _handlers 中返回\n\n  if (!(key in _handlers)) return;\n  for (var _i = 0; _i < _handlers[key].length; _i++) {\n    if (event.type === 'keydown' && _handlers[key][_i].keydown || event.type === 'keyup' && _handlers[key][_i].keyup) {\n      if (_handlers[key][_i].key) {\n        var record = _handlers[key][_i];\n        var splitKey = record.splitKey;\n        var keyShortcut = record.key.split(splitKey);\n        var _downKeysCurrent = []; // 记录当前按键键值\n\n        for (var a = 0; a < keyShortcut.length; a++) {\n          _downKeysCurrent.push(code(keyShortcut[a]));\n        }\n        if (_downKeysCurrent.sort().join('') === _downKeys.sort().join('')) {\n          // 找到处理内容\n          eventHandler(event, record, scope);\n        }\n      }\n    }\n  }\n} // 判断 element 是否已经绑定事件\n\nfunction isElementBind(element) {\n  return elementHasBindEvent.indexOf(element) > -1;\n}\nfunction hotkeys(key, option, method) {\n  _downKeys = [];\n  var keys = getKeys(key); // 需要处理的快捷键列表\n\n  var mods = [];\n  var scope = 'all'; // scope默认为all，所有范围都有效\n\n  var element = document; // 快捷键事件绑定节点\n\n  var i = 0;\n  var keyup = false;\n  var keydown = true;\n  var splitKey = '+'; // 对为设定范围的判断\n\n  if (method === undefined && typeof option === 'function') {\n    method = option;\n  }\n  if (Object.prototype.toString.call(option) === '[object Object]') {\n    if (option.scope) scope = option.scope; // eslint-disable-line\n\n    if (option.element) element = option.element; // eslint-disable-line\n\n    if (option.keyup) keyup = option.keyup; // eslint-disable-line\n\n    if (option.keydown !== undefined) keydown = option.keydown; // eslint-disable-line\n\n    if (typeof option.splitKey === 'string') splitKey = option.splitKey; // eslint-disable-line\n  }\n\n  if (typeof option === 'string') scope = option; // 对于每个快捷键进行处理\n\n  for (; i < keys.length; i++) {\n    key = keys[i].split(splitKey); // 按键列表\n\n    mods = []; // 如果是组合快捷键取得组合快捷键\n\n    if (key.length > 1) mods = getMods(_modifier, key); // 将非修饰键转化为键码\n\n    key = key[key.length - 1];\n    key = key === '*' ? '*' : code(key); // *表示匹配所有快捷键\n    // 判断key是否在_handlers中，不在就赋一个空数组\n\n    if (!(key in _handlers)) _handlers[key] = [];\n    _handlers[key].push({\n      keyup: keyup,\n      keydown: keydown,\n      scope: scope,\n      mods: mods,\n      shortcut: keys[i],\n      method: method,\n      key: keys[i],\n      splitKey: splitKey\n    });\n  } // 在全局document上设置快捷键\n\n  if (typeof element !== 'undefined' && !isElementBind(element) && window) {\n    elementHasBindEvent.push(element);\n    addEvent(element, 'keydown', function (e) {\n      dispatch(e);\n    });\n    addEvent(window, 'focus', function () {\n      _downKeys = [];\n    });\n    addEvent(element, 'keyup', function (e) {\n      dispatch(e);\n      clearModifier(e);\n    });\n  }\n}\nvar _api = {\n  setScope: setScope,\n  getScope: getScope,\n  deleteScope: deleteScope,\n  getPressedKeyCodes: getPressedKeyCodes,\n  isPressed: isPressed,\n  filter: filter,\n  unbind: unbind\n};\nfor (var a in _api) {\n  if (Object.prototype.hasOwnProperty.call(_api, a)) {\n    hotkeys[a] = _api[a];\n  }\n}\nif (typeof window !== 'undefined') {\n  var _hotkeys = window.hotkeys;\n  hotkeys.noConflict = function (deep) {\n    if (deep && window.hotkeys === hotkeys) {\n      window.hotkeys = _hotkeys;\n    }\n    return hotkeys;\n  };\n  window.hotkeys = hotkeys;\n}\nexport default hotkeys;","map":{"version":3,"names":["isff","navigator","userAgent","toLowerCase","indexOf","addEvent","object","event","method","addEventListener","attachEvent","concat","window","getMods","modifier","key","mods","slice","length","i","getKeys","replace","keys","split","index","lastIndexOf","splice","compareArray","a1","a2","arr1","arr2","isIndex","_keyMap","backspace","tab","clear","enter","return","esc","escape","space","left","up","right","down","del","delete","ins","insert","home","end","pageup","pagedown","capslock","num_0","num_1","num_2","num_3","num_4","num_5","num_6","num_7","num_8","num_9","num_multiply","num_add","num_enter","num_subtract","num_decimal","num_divide","_modifier","shift","alt","option","ctrl","control","cmd","command","modifierMap","shiftKey","ctrlKey","altKey","metaKey","_mods","_handlers","k","_downKeys","_scope","elementHasBindEvent","code","x","toUpperCase","charCodeAt","setScope","scope","getScope","getPressedKeyCodes","filter","target","srcElement","tagName","flag","isContentEditable","readOnly","isPressed","keyCode","deleteScope","newScope","handlers","Object","prototype","hasOwnProperty","call","clearModifier","which","charCode","hotkeys","unbind","keysInfo","forEach","Array","isArray","info","eachUnbind","_len","arguments","args","_key","splitKey","_ref","_ref$splitKey","multipleKeys","originKey","unbindKeys","len","lastKey","map","record","isMatchingMethod","eventHandler","handler","modifiersMatch","y","shortcut","preventDefault","returnValue","stopPropagation","cancelBubble","dispatch","asterisk","push","keyName","keyNum","e","getModifierState","type","keydown","keyup","_i","keyShortcut","_downKeysCurrent","a","sort","join","isElementBind","element","document","undefined","toString","_api","_hotkeys","noConflict","deep"],"sources":["/Users/Junhaeng/untitled folder/junior-design/amplifyapp/node_modules/hotkeys-js/dist/hotkeys.esm.js"],"sourcesContent":["/*!\n * hotkeys-js v3.8.7\n * A simple micro-library for defining and dispatching keyboard shortcuts. It has no dependencies.\n * \n * Copyright (c) 2021 kenny wong <wowohoo@qq.com>\n * http://jaywcjlove.github.io/hotkeys\n * \n * Licensed under the MIT license.\n */\n\nvar isff = typeof navigator !== 'undefined' ? navigator.userAgent.toLowerCase().indexOf('firefox') > 0 : false; // 绑定事件\n\nfunction addEvent(object, event, method) {\n  if (object.addEventListener) {\n    object.addEventListener(event, method, false);\n  } else if (object.attachEvent) {\n    object.attachEvent(\"on\".concat(event), function () {\n      method(window.event);\n    });\n  }\n} // 修饰键转换成对应的键码\n\n\nfunction getMods(modifier, key) {\n  var mods = key.slice(0, key.length - 1);\n\n  for (var i = 0; i < mods.length; i++) {\n    mods[i] = modifier[mods[i].toLowerCase()];\n  }\n\n  return mods;\n} // 处理传的key字符串转换成数组\n\n\nfunction getKeys(key) {\n  if (typeof key !== 'string') key = '';\n  key = key.replace(/\\s/g, ''); // 匹配任何空白字符,包括空格、制表符、换页符等等\n\n  var keys = key.split(','); // 同时设置多个快捷键，以','分割\n\n  var index = keys.lastIndexOf(''); // 快捷键可能包含','，需特殊处理\n\n  for (; index >= 0;) {\n    keys[index - 1] += ',';\n    keys.splice(index, 1);\n    index = keys.lastIndexOf('');\n  }\n\n  return keys;\n} // 比较修饰键的数组\n\n\nfunction compareArray(a1, a2) {\n  var arr1 = a1.length >= a2.length ? a1 : a2;\n  var arr2 = a1.length >= a2.length ? a2 : a1;\n  var isIndex = true;\n\n  for (var i = 0; i < arr1.length; i++) {\n    if (arr2.indexOf(arr1[i]) === -1) isIndex = false;\n  }\n\n  return isIndex;\n}\n\nvar _keyMap = {\n  backspace: 8,\n  tab: 9,\n  clear: 12,\n  enter: 13,\n  return: 13,\n  esc: 27,\n  escape: 27,\n  space: 32,\n  left: 37,\n  up: 38,\n  right: 39,\n  down: 40,\n  del: 46,\n  delete: 46,\n  ins: 45,\n  insert: 45,\n  home: 36,\n  end: 35,\n  pageup: 33,\n  pagedown: 34,\n  capslock: 20,\n  num_0: 96,\n  num_1: 97,\n  num_2: 98,\n  num_3: 99,\n  num_4: 100,\n  num_5: 101,\n  num_6: 102,\n  num_7: 103,\n  num_8: 104,\n  num_9: 105,\n  num_multiply: 106,\n  num_add: 107,\n  num_enter: 108,\n  num_subtract: 109,\n  num_decimal: 110,\n  num_divide: 111,\n  '⇪': 20,\n  ',': 188,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '-': isff ? 173 : 189,\n  '=': isff ? 61 : 187,\n  ';': isff ? 59 : 186,\n  '\\'': 222,\n  '[': 219,\n  ']': 221,\n  '\\\\': 220\n}; // Modifier Keys\n\nvar _modifier = {\n  // shiftKey\n  '⇧': 16,\n  shift: 16,\n  // altKey\n  '⌥': 18,\n  alt: 18,\n  option: 18,\n  // ctrlKey\n  '⌃': 17,\n  ctrl: 17,\n  control: 17,\n  // metaKey\n  '⌘': 91,\n  cmd: 91,\n  command: 91\n};\nvar modifierMap = {\n  16: 'shiftKey',\n  18: 'altKey',\n  17: 'ctrlKey',\n  91: 'metaKey',\n  shiftKey: 16,\n  ctrlKey: 17,\n  altKey: 18,\n  metaKey: 91\n};\nvar _mods = {\n  16: false,\n  18: false,\n  17: false,\n  91: false\n};\nvar _handlers = {}; // F1~F12 special key\n\nfor (var k = 1; k < 20; k++) {\n  _keyMap[\"f\".concat(k)] = 111 + k;\n}\n\nvar _downKeys = []; // 记录摁下的绑定键\n\nvar _scope = 'all'; // 默认热键范围\n\nvar elementHasBindEvent = []; // 已绑定事件的节点记录\n// 返回键码\n\nvar code = function code(x) {\n  return _keyMap[x.toLowerCase()] || _modifier[x.toLowerCase()] || x.toUpperCase().charCodeAt(0);\n}; // 设置获取当前范围（默认为'所有'）\n\n\nfunction setScope(scope) {\n  _scope = scope || 'all';\n} // 获取当前范围\n\n\nfunction getScope() {\n  return _scope || 'all';\n} // 获取摁下绑定键的键值\n\n\nfunction getPressedKeyCodes() {\n  return _downKeys.slice(0);\n} // 表单控件控件判断 返回 Boolean\n// hotkey is effective only when filter return true\n\n\nfunction filter(event) {\n  var target = event.target || event.srcElement;\n  var tagName = target.tagName;\n  var flag = true; // ignore: isContentEditable === 'true', <input> and <textarea> when readOnly state is false, <select>\n\n  if (target.isContentEditable || (tagName === 'INPUT' || tagName === 'TEXTAREA' || tagName === 'SELECT') && !target.readOnly) {\n    flag = false;\n  }\n\n  return flag;\n} // 判断摁下的键是否为某个键，返回true或者false\n\n\nfunction isPressed(keyCode) {\n  if (typeof keyCode === 'string') {\n    keyCode = code(keyCode); // 转换成键码\n  }\n\n  return _downKeys.indexOf(keyCode) !== -1;\n} // 循环删除handlers中的所有 scope(范围)\n\n\nfunction deleteScope(scope, newScope) {\n  var handlers;\n  var i; // 没有指定scope，获取scope\n\n  if (!scope) scope = getScope();\n\n  for (var key in _handlers) {\n    if (Object.prototype.hasOwnProperty.call(_handlers, key)) {\n      handlers = _handlers[key];\n\n      for (i = 0; i < handlers.length;) {\n        if (handlers[i].scope === scope) handlers.splice(i, 1);else i++;\n      }\n    }\n  } // 如果scope被删除，将scope重置为all\n\n\n  if (getScope() === scope) setScope(newScope || 'all');\n} // 清除修饰键\n\n\nfunction clearModifier(event) {\n  var key = event.keyCode || event.which || event.charCode;\n\n  var i = _downKeys.indexOf(key); // 从列表中清除按压过的键\n\n\n  if (i >= 0) {\n    _downKeys.splice(i, 1);\n  } // 特殊处理 cmmand 键，在 cmmand 组合快捷键 keyup 只执行一次的问题\n\n\n  if (event.key && event.key.toLowerCase() === 'meta') {\n    _downKeys.splice(0, _downKeys.length);\n  } // 修饰键 shiftKey altKey ctrlKey (command||metaKey) 清除\n\n\n  if (key === 93 || key === 224) key = 91;\n\n  if (key in _mods) {\n    _mods[key] = false; // 将修饰键重置为false\n\n    for (var k in _modifier) {\n      if (_modifier[k] === key) hotkeys[k] = false;\n    }\n  }\n}\n\nfunction unbind(keysInfo) {\n  // unbind(), unbind all keys\n  if (!keysInfo) {\n    Object.keys(_handlers).forEach(function (key) {\n      return delete _handlers[key];\n    });\n  } else if (Array.isArray(keysInfo)) {\n    // support like : unbind([{key: 'ctrl+a', scope: 's1'}, {key: 'ctrl-a', scope: 's2', splitKey: '-'}])\n    keysInfo.forEach(function (info) {\n      if (info.key) eachUnbind(info);\n    });\n  } else if (typeof keysInfo === 'object') {\n    // support like unbind({key: 'ctrl+a, ctrl+b', scope:'abc'})\n    if (keysInfo.key) eachUnbind(keysInfo);\n  } else if (typeof keysInfo === 'string') {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    // support old method\n    // eslint-disable-line\n    var scope = args[0],\n        method = args[1];\n\n    if (typeof scope === 'function') {\n      method = scope;\n      scope = '';\n    }\n\n    eachUnbind({\n      key: keysInfo,\n      scope: scope,\n      method: method,\n      splitKey: '+'\n    });\n  }\n} // 解除绑定某个范围的快捷键\n\n\nvar eachUnbind = function eachUnbind(_ref) {\n  var key = _ref.key,\n      scope = _ref.scope,\n      method = _ref.method,\n      _ref$splitKey = _ref.splitKey,\n      splitKey = _ref$splitKey === void 0 ? '+' : _ref$splitKey;\n  var multipleKeys = getKeys(key);\n  multipleKeys.forEach(function (originKey) {\n    var unbindKeys = originKey.split(splitKey);\n    var len = unbindKeys.length;\n    var lastKey = unbindKeys[len - 1];\n    var keyCode = lastKey === '*' ? '*' : code(lastKey);\n    if (!_handlers[keyCode]) return; // 判断是否传入范围，没有就获取范围\n\n    if (!scope) scope = getScope();\n    var mods = len > 1 ? getMods(_modifier, unbindKeys) : [];\n    _handlers[keyCode] = _handlers[keyCode].map(function (record) {\n      // 通过函数判断，是否解除绑定，函数相等直接返回\n      var isMatchingMethod = method ? record.method === method : true;\n\n      if (isMatchingMethod && record.scope === scope && compareArray(record.mods, mods)) {\n        return {};\n      }\n\n      return record;\n    });\n  });\n}; // 对监听对应快捷键的回调函数进行处理\n\n\nfunction eventHandler(event, handler, scope) {\n  var modifiersMatch; // 看它是否在当前范围\n\n  if (handler.scope === scope || handler.scope === 'all') {\n    // 检查是否匹配修饰符（如果有返回true）\n    modifiersMatch = handler.mods.length > 0;\n\n    for (var y in _mods) {\n      if (Object.prototype.hasOwnProperty.call(_mods, y)) {\n        if (!_mods[y] && handler.mods.indexOf(+y) > -1 || _mods[y] && handler.mods.indexOf(+y) === -1) {\n          modifiersMatch = false;\n        }\n      }\n    } // 调用处理程序，如果是修饰键不做处理\n\n\n    if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === '*') {\n      if (handler.method(event, handler) === false) {\n        if (event.preventDefault) event.preventDefault();else event.returnValue = false;\n        if (event.stopPropagation) event.stopPropagation();\n        if (event.cancelBubble) event.cancelBubble = true;\n      }\n    }\n  }\n} // 处理keydown事件\n\n\nfunction dispatch(event) {\n  var asterisk = _handlers['*'];\n  var key = event.keyCode || event.which || event.charCode; // 表单控件过滤 默认表单控件不触发快捷键\n\n  if (!hotkeys.filter.call(this, event)) return; // Gecko(Firefox)的command键值224，在Webkit(Chrome)中保持一致\n  // Webkit左右 command 键值不一样\n\n  if (key === 93 || key === 224) key = 91;\n  /**\n   * Collect bound keys\n   * If an Input Method Editor is processing key input and the event is keydown, return 229.\n   * https://stackoverflow.com/questions/25043934/is-it-ok-to-ignore-keydown-events-with-keycode-229\n   * http://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html\n   */\n\n  if (_downKeys.indexOf(key) === -1 && key !== 229) _downKeys.push(key);\n  /**\n   * Jest test cases are required.\n   * ===============================\n   */\n\n  ['ctrlKey', 'altKey', 'shiftKey', 'metaKey'].forEach(function (keyName) {\n    var keyNum = modifierMap[keyName];\n\n    if (event[keyName] && _downKeys.indexOf(keyNum) === -1) {\n      _downKeys.push(keyNum);\n    } else if (!event[keyName] && _downKeys.indexOf(keyNum) > -1) {\n      _downKeys.splice(_downKeys.indexOf(keyNum), 1);\n    } else if (keyName === 'metaKey' && event[keyName] && _downKeys.length === 3) {\n      /**\n       * Fix if Command is pressed:\n       * ===============================\n       */\n      if (!(event.ctrlKey || event.shiftKey || event.altKey)) {\n        _downKeys = _downKeys.slice(_downKeys.indexOf(keyNum));\n      }\n    }\n  });\n  /**\n   * -------------------------------\n   */\n\n  if (key in _mods) {\n    _mods[key] = true; // 将特殊字符的key注册到 hotkeys 上\n\n    for (var k in _modifier) {\n      if (_modifier[k] === key) hotkeys[k] = true;\n    }\n\n    if (!asterisk) return;\n  } // 将 modifierMap 里面的修饰键绑定到 event 中\n\n\n  for (var e in _mods) {\n    if (Object.prototype.hasOwnProperty.call(_mods, e)) {\n      _mods[e] = event[modifierMap[e]];\n    }\n  }\n  /**\n   * https://github.com/jaywcjlove/hotkeys/pull/129\n   * This solves the issue in Firefox on Windows where hotkeys corresponding to special characters would not trigger.\n   * An example of this is ctrl+alt+m on a Swedish keyboard which is used to type μ.\n   * Browser support: https://caniuse.com/#feat=keyboardevent-getmodifierstate\n   */\n\n\n  if (event.getModifierState && !(event.altKey && !event.ctrlKey) && event.getModifierState('AltGraph')) {\n    if (_downKeys.indexOf(17) === -1) {\n      _downKeys.push(17);\n    }\n\n    if (_downKeys.indexOf(18) === -1) {\n      _downKeys.push(18);\n    }\n\n    _mods[17] = true;\n    _mods[18] = true;\n  } // 获取范围 默认为 `all`\n\n\n  var scope = getScope(); // 对任何快捷键都需要做的处理\n\n  if (asterisk) {\n    for (var i = 0; i < asterisk.length; i++) {\n      if (asterisk[i].scope === scope && (event.type === 'keydown' && asterisk[i].keydown || event.type === 'keyup' && asterisk[i].keyup)) {\n        eventHandler(event, asterisk[i], scope);\n      }\n    }\n  } // key 不在 _handlers 中返回\n\n\n  if (!(key in _handlers)) return;\n\n  for (var _i = 0; _i < _handlers[key].length; _i++) {\n    if (event.type === 'keydown' && _handlers[key][_i].keydown || event.type === 'keyup' && _handlers[key][_i].keyup) {\n      if (_handlers[key][_i].key) {\n        var record = _handlers[key][_i];\n        var splitKey = record.splitKey;\n        var keyShortcut = record.key.split(splitKey);\n        var _downKeysCurrent = []; // 记录当前按键键值\n\n        for (var a = 0; a < keyShortcut.length; a++) {\n          _downKeysCurrent.push(code(keyShortcut[a]));\n        }\n\n        if (_downKeysCurrent.sort().join('') === _downKeys.sort().join('')) {\n          // 找到处理内容\n          eventHandler(event, record, scope);\n        }\n      }\n    }\n  }\n} // 判断 element 是否已经绑定事件\n\n\nfunction isElementBind(element) {\n  return elementHasBindEvent.indexOf(element) > -1;\n}\n\nfunction hotkeys(key, option, method) {\n  _downKeys = [];\n  var keys = getKeys(key); // 需要处理的快捷键列表\n\n  var mods = [];\n  var scope = 'all'; // scope默认为all，所有范围都有效\n\n  var element = document; // 快捷键事件绑定节点\n\n  var i = 0;\n  var keyup = false;\n  var keydown = true;\n  var splitKey = '+'; // 对为设定范围的判断\n\n  if (method === undefined && typeof option === 'function') {\n    method = option;\n  }\n\n  if (Object.prototype.toString.call(option) === '[object Object]') {\n    if (option.scope) scope = option.scope; // eslint-disable-line\n\n    if (option.element) element = option.element; // eslint-disable-line\n\n    if (option.keyup) keyup = option.keyup; // eslint-disable-line\n\n    if (option.keydown !== undefined) keydown = option.keydown; // eslint-disable-line\n\n    if (typeof option.splitKey === 'string') splitKey = option.splitKey; // eslint-disable-line\n  }\n\n  if (typeof option === 'string') scope = option; // 对于每个快捷键进行处理\n\n  for (; i < keys.length; i++) {\n    key = keys[i].split(splitKey); // 按键列表\n\n    mods = []; // 如果是组合快捷键取得组合快捷键\n\n    if (key.length > 1) mods = getMods(_modifier, key); // 将非修饰键转化为键码\n\n    key = key[key.length - 1];\n    key = key === '*' ? '*' : code(key); // *表示匹配所有快捷键\n    // 判断key是否在_handlers中，不在就赋一个空数组\n\n    if (!(key in _handlers)) _handlers[key] = [];\n\n    _handlers[key].push({\n      keyup: keyup,\n      keydown: keydown,\n      scope: scope,\n      mods: mods,\n      shortcut: keys[i],\n      method: method,\n      key: keys[i],\n      splitKey: splitKey\n    });\n  } // 在全局document上设置快捷键\n\n\n  if (typeof element !== 'undefined' && !isElementBind(element) && window) {\n    elementHasBindEvent.push(element);\n    addEvent(element, 'keydown', function (e) {\n      dispatch(e);\n    });\n    addEvent(window, 'focus', function () {\n      _downKeys = [];\n    });\n    addEvent(element, 'keyup', function (e) {\n      dispatch(e);\n      clearModifier(e);\n    });\n  }\n}\n\nvar _api = {\n  setScope: setScope,\n  getScope: getScope,\n  deleteScope: deleteScope,\n  getPressedKeyCodes: getPressedKeyCodes,\n  isPressed: isPressed,\n  filter: filter,\n  unbind: unbind\n};\n\nfor (var a in _api) {\n  if (Object.prototype.hasOwnProperty.call(_api, a)) {\n    hotkeys[a] = _api[a];\n  }\n}\n\nif (typeof window !== 'undefined') {\n  var _hotkeys = window.hotkeys;\n\n  hotkeys.noConflict = function (deep) {\n    if (deep && window.hotkeys === hotkeys) {\n      window.hotkeys = _hotkeys;\n    }\n\n    return hotkeys;\n  };\n\n  window.hotkeys = hotkeys;\n}\n\nexport default hotkeys;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}