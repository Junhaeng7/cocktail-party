{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2]) _.ops.pop();\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\n/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport Observable from 'zen-observable-ts';\nimport { GraphQLError } from 'graphql';\nimport * as url from 'url';\nimport { v4 as uuid } from 'uuid';\nimport { Buffer } from 'buffer';\nimport { Logger, Credentials, Signer, Hub, Constants, USER_AGENT_HEADER, jitteredExponentialRetry, NonRetryableError } from '@aws-amplify/core';\nimport Cache from '@aws-amplify/cache';\nimport Auth from '@aws-amplify/auth';\nimport { AbstractPubSubProvider } from './PubSubProvider';\nimport { CONTROL_MSG } from '../index';\nvar logger = new Logger('AWSAppSyncRealTimeProvider');\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\nvar dispatchApiEvent = function dispatchApiEvent(event, data, message) {\n  Hub.dispatch('api', {\n    event: event,\n    data: data,\n    message: message\n  }, 'PubSub', AMPLIFY_SYMBOL);\n};\nvar MAX_DELAY_MS = 5000;\nvar NON_RETRYABLE_CODES = [400, 401, 403];\nvar MESSAGE_TYPES;\n(function (MESSAGE_TYPES) {\n  /**\n   * Client -> Server message.\n   * This message type is the first message after handshake and this will initialize AWS AppSync RealTime communication\n   */\n  MESSAGE_TYPES[\"GQL_CONNECTION_INIT\"] = \"connection_init\";\n  /**\n   * Server -> Client message\n   * This message type is in case there is an issue with AWS AppSync RealTime when establishing connection\n   */\n  MESSAGE_TYPES[\"GQL_CONNECTION_ERROR\"] = \"connection_error\";\n  /**\n   * Server -> Client message.\n   * This message type is for the ack response from AWS AppSync RealTime for GQL_CONNECTION_INIT message\n   */\n  MESSAGE_TYPES[\"GQL_CONNECTION_ACK\"] = \"connection_ack\";\n  /**\n   * Client -> Server message.\n   * This message type is for register subscriptions with AWS AppSync RealTime\n   */\n  MESSAGE_TYPES[\"GQL_START\"] = \"start\";\n  /**\n   * Server -> Client message.\n   * This message type is for the ack response from AWS AppSync RealTime for GQL_START message\n   */\n  MESSAGE_TYPES[\"GQL_START_ACK\"] = \"start_ack\";\n  /**\n   * Server -> Client message.\n   * This message type is for subscription message from AWS AppSync RealTime\n   */\n  MESSAGE_TYPES[\"GQL_DATA\"] = \"data\";\n  /**\n   * Server -> Client message.\n   * This message type helps the client to know is still receiving messages from AWS AppSync RealTime\n   */\n  MESSAGE_TYPES[\"GQL_CONNECTION_KEEP_ALIVE\"] = \"ka\";\n  /**\n   * Client -> Server message.\n   * This message type is for unregister subscriptions with AWS AppSync RealTime\n   */\n  MESSAGE_TYPES[\"GQL_STOP\"] = \"stop\";\n  /**\n   * Server -> Client message.\n   * This message type is for the ack response from AWS AppSync RealTime for GQL_STOP message\n   */\n  MESSAGE_TYPES[\"GQL_COMPLETE\"] = \"complete\";\n  /**\n   * Server -> Client message.\n   * This message type is for sending error messages from AWS AppSync RealTime to the client\n   */\n  MESSAGE_TYPES[\"GQL_ERROR\"] = \"error\";\n})(MESSAGE_TYPES || (MESSAGE_TYPES = {}));\nvar SUBSCRIPTION_STATUS;\n(function (SUBSCRIPTION_STATUS) {\n  SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"PENDING\"] = 0] = \"PENDING\";\n  SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"CONNECTED\"] = 1] = \"CONNECTED\";\n  SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"FAILED\"] = 2] = \"FAILED\";\n})(SUBSCRIPTION_STATUS || (SUBSCRIPTION_STATUS = {}));\nvar SOCKET_STATUS;\n(function (SOCKET_STATUS) {\n  SOCKET_STATUS[SOCKET_STATUS[\"CLOSED\"] = 0] = \"CLOSED\";\n  SOCKET_STATUS[SOCKET_STATUS[\"READY\"] = 1] = \"READY\";\n  SOCKET_STATUS[SOCKET_STATUS[\"CONNECTING\"] = 2] = \"CONNECTING\";\n})(SOCKET_STATUS || (SOCKET_STATUS = {}));\nvar AWS_APPSYNC_REALTIME_HEADERS = {\n  accept: 'application/json, text/javascript',\n  'content-encoding': 'amz-1.0',\n  'content-type': 'application/json; charset=UTF-8'\n};\n/**\n * Time in milleseconds to wait for GQL_CONNECTION_INIT message\n */\nvar CONNECTION_INIT_TIMEOUT = 15000;\n/**\n * Time in milleseconds to wait for GQL_START_ACK message\n */\nvar START_ACK_TIMEOUT = 15000;\n/**\n * Default Time in milleseconds to wait for GQL_CONNECTION_KEEP_ALIVE message\n */\nvar DEFAULT_KEEP_ALIVE_TIMEOUT = 5 * 60 * 1000;\nvar standardDomainPattern = /^https:\\/\\/\\w{26}\\.appsync\\-api\\.\\w{2}(?:(?:\\-\\w{2,})+)\\-\\d\\.amazonaws.com\\/graphql$/i;\nvar customDomainPath = '/realtime';\nvar AWSAppSyncRealTimeProvider = /** @class */function (_super) {\n  __extends(AWSAppSyncRealTimeProvider, _super);\n  function AWSAppSyncRealTimeProvider() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.socketStatus = SOCKET_STATUS.CLOSED;\n    _this.keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;\n    _this.subscriptionObserverMap = new Map();\n    _this.promiseArray = [];\n    return _this;\n  }\n  AWSAppSyncRealTimeProvider.prototype.getProviderName = function () {\n    return 'AWSAppSyncRealTimeProvider';\n  };\n  AWSAppSyncRealTimeProvider.prototype.newClient = function () {\n    throw new Error('Not used here');\n  };\n  AWSAppSyncRealTimeProvider.prototype.publish = function (_topics, _msg, _options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error('Operation not supported');\n      });\n    });\n  };\n  // Check if url matches standard domain pattern\n  AWSAppSyncRealTimeProvider.prototype.isCustomDomain = function (url) {\n    return url.match(standardDomainPattern) === null;\n  };\n  AWSAppSyncRealTimeProvider.prototype.subscribe = function (_topics, options) {\n    var _this = this;\n    var appSyncGraphqlEndpoint = options.appSyncGraphqlEndpoint;\n    return new Observable(function (observer) {\n      if (!appSyncGraphqlEndpoint) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(\"Subscribe only available for AWS AppSync endpoint\"))]\n        });\n        observer.complete();\n      } else {\n        var subscriptionId_1 = uuid();\n        _this._startSubscriptionWithAWSAppSyncRealTime({\n          options: options,\n          observer: observer,\n          subscriptionId: subscriptionId_1\n        }).catch(function (err) {\n          observer.error({\n            errors: [__assign({}, new GraphQLError(CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR + \": \" + err))]\n          });\n          observer.complete();\n        });\n        return function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var subscriptionState, err_1;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  _a.trys.push([0, 2, 3, 4]);\n                  // Waiting that subscription has been connected before trying to unsubscribe\n                  return [4 /*yield*/, this._waitForSubscriptionToBeConnected(subscriptionId_1)];\n                case 1:\n                  // Waiting that subscription has been connected before trying to unsubscribe\n                  _a.sent();\n                  subscriptionState = (this.subscriptionObserverMap.get(subscriptionId_1) || {}).subscriptionState;\n                  if (!subscriptionState) {\n                    // subscription already unsubscribed\n                    return [2 /*return*/];\n                  }\n\n                  if (subscriptionState === SUBSCRIPTION_STATUS.CONNECTED) {\n                    this._sendUnsubscriptionMessage(subscriptionId_1);\n                  } else {\n                    throw new Error('Subscription never connected');\n                  }\n                  return [3 /*break*/, 4];\n                case 2:\n                  err_1 = _a.sent();\n                  logger.debug(\"Error while unsubscribing \" + err_1);\n                  return [3 /*break*/, 4];\n                case 3:\n                  this._removeSubscriptionObserver(subscriptionId_1);\n                  return [7 /*endfinally*/];\n                case 4:\n                  return [2 /*return*/];\n              }\n            });\n          });\n        };\n      }\n    });\n  };\n\n  Object.defineProperty(AWSAppSyncRealTimeProvider.prototype, \"isSSLEnabled\", {\n    get: function get() {\n      return !this.options.aws_appsync_dangerously_connect_to_http_endpoint_for_testing;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  AWSAppSyncRealTimeProvider.prototype._startSubscriptionWithAWSAppSyncRealTime = function (_a) {\n    var options = _a.options,\n      observer = _a.observer,\n      subscriptionId = _a.subscriptionId;\n    return __awaiter(this, void 0, void 0, function () {\n      var appSyncGraphqlEndpoint, authenticationType, query, variables, apiKey, region, _b, graphql_headers, _c, additionalHeaders, subscriptionState, data, dataString, headerObj, _d, _e, subscriptionMessage, stringToAWSRealTime, err_2, _f, message, subscriptionFailedCallback_1, _g, subscriptionFailedCallback, subscriptionReadyCallback;\n      var _h;\n      var _this = this;\n      return __generator(this, function (_j) {\n        switch (_j.label) {\n          case 0:\n            appSyncGraphqlEndpoint = options.appSyncGraphqlEndpoint, authenticationType = options.authenticationType, query = options.query, variables = options.variables, apiKey = options.apiKey, region = options.region, _b = options.graphql_headers, graphql_headers = _b === void 0 ? function () {\n              return {};\n            } : _b, _c = options.additionalHeaders, additionalHeaders = _c === void 0 ? {} : _c;\n            subscriptionState = SUBSCRIPTION_STATUS.PENDING;\n            data = {\n              query: query,\n              variables: variables\n            };\n            // Having a subscription id map will make it simple to forward messages received\n            this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              query: query,\n              variables: variables,\n              subscriptionState: subscriptionState,\n              startAckTimeoutId: null\n            });\n            dataString = JSON.stringify(data);\n            _d = [{}];\n            return [4 /*yield*/, this._awsRealTimeHeaderBasedAuth({\n              apiKey: apiKey,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              authenticationType: authenticationType,\n              payload: dataString,\n              canonicalUri: '',\n              region: region,\n              additionalHeaders: additionalHeaders\n            })];\n          case 1:\n            _e = [__assign.apply(void 0, _d.concat([_j.sent()]))];\n            return [4 /*yield*/, graphql_headers()];\n          case 2:\n            headerObj = __assign.apply(void 0, [__assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), additionalHeaders]), (_h = {}, _h[USER_AGENT_HEADER] = Constants.userAgent, _h)]);\n            subscriptionMessage = {\n              id: subscriptionId,\n              payload: {\n                data: dataString,\n                extensions: {\n                  authorization: __assign({}, headerObj)\n                }\n              },\n              type: MESSAGE_TYPES.GQL_START\n            };\n            stringToAWSRealTime = JSON.stringify(subscriptionMessage);\n            _j.label = 3;\n          case 3:\n            _j.trys.push([3, 5,, 6]);\n            return [4 /*yield*/, this._initializeWebSocketConnection({\n              apiKey: apiKey,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              authenticationType: authenticationType,\n              region: region,\n              additionalHeaders: additionalHeaders\n            })];\n          case 4:\n            _j.sent();\n            return [3 /*break*/, 6];\n          case 5:\n            err_2 = _j.sent();\n            logger.debug({\n              err: err_2\n            });\n            _f = err_2.message, message = _f === void 0 ? '' : _f;\n            observer.error({\n              errors: [__assign({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + \": \" + message))]\n            });\n            observer.complete();\n            subscriptionFailedCallback_1 = (this.subscriptionObserverMap.get(subscriptionId) || {}).subscriptionFailedCallback;\n            // Notify concurrent unsubscription\n            if (typeof subscriptionFailedCallback_1 === 'function') {\n              subscriptionFailedCallback_1();\n            }\n            return [2 /*return*/];\n          case 6:\n            _g = this.subscriptionObserverMap.get(subscriptionId), subscriptionFailedCallback = _g.subscriptionFailedCallback, subscriptionReadyCallback = _g.subscriptionReadyCallback;\n            // This must be done before sending the message in order to be listening immediately\n            this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              subscriptionState: subscriptionState,\n              variables: variables,\n              query: query,\n              subscriptionReadyCallback: subscriptionReadyCallback,\n              subscriptionFailedCallback: subscriptionFailedCallback,\n              startAckTimeoutId: setTimeout(function () {\n                _this._timeoutStartSubscriptionAck.call(_this, subscriptionId);\n              }, START_ACK_TIMEOUT)\n            });\n            if (this.awsRealTimeSocket) {\n              this.awsRealTimeSocket.send(stringToAWSRealTime);\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  // Waiting that subscription has been connected before trying to unsubscribe\n  AWSAppSyncRealTimeProvider.prototype._waitForSubscriptionToBeConnected = function (subscriptionId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var subscriptionState;\n      var _this = this;\n      return __generator(this, function (_a) {\n        subscriptionState = this.subscriptionObserverMap.get(subscriptionId).subscriptionState;\n        // This in case unsubscribe is invoked before sending start subscription message\n        if (subscriptionState === SUBSCRIPTION_STATUS.PENDING) {\n          return [2 /*return*/, new Promise(function (res, rej) {\n            var _a = _this.subscriptionObserverMap.get(subscriptionId),\n              observer = _a.observer,\n              subscriptionState = _a.subscriptionState,\n              variables = _a.variables,\n              query = _a.query;\n            _this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              subscriptionState: subscriptionState,\n              variables: variables,\n              query: query,\n              subscriptionReadyCallback: res,\n              subscriptionFailedCallback: rej\n            });\n          })];\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._sendUnsubscriptionMessage = function (subscriptionId) {\n    try {\n      if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN && this.socketStatus === SOCKET_STATUS.READY) {\n        // Preparing unsubscribe message to stop receiving messages for that subscription\n        var unsubscribeMessage = {\n          id: subscriptionId,\n          type: MESSAGE_TYPES.GQL_STOP\n        };\n        var stringToAWSRealTime = JSON.stringify(unsubscribeMessage);\n        this.awsRealTimeSocket.send(stringToAWSRealTime);\n      }\n    } catch (err) {\n      // If GQL_STOP is not sent because of disconnection issue, then there is nothing the client can do\n      logger.debug({\n        err: err\n      });\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._removeSubscriptionObserver = function (subscriptionId) {\n    this.subscriptionObserverMap.delete(subscriptionId);\n    // Verifying 1000ms after removing subscription in case there are new subscription unmount/mount\n    setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n  };\n  AWSAppSyncRealTimeProvider.prototype._closeSocketIfRequired = function () {\n    if (this.subscriptionObserverMap.size > 0) {\n      // Active subscriptions on the WebSocket\n      return;\n    }\n    if (!this.awsRealTimeSocket) {\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n      return;\n    }\n    if (this.awsRealTimeSocket.bufferedAmount > 0) {\n      // Still data on the WebSocket\n      setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n    } else {\n      logger.debug('closing WebSocket...');\n      clearTimeout(this.keepAliveTimeoutId);\n      var tempSocket = this.awsRealTimeSocket;\n      // Cleaning callbacks to avoid race condition, socket still exists\n      tempSocket.onclose = undefined;\n      tempSocket.onerror = undefined;\n      tempSocket.close(1000);\n      this.awsRealTimeSocket = null;\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._handleIncomingSubscriptionMessage = function (message) {\n    logger.debug(\"subscription message from AWS AppSync RealTime: \" + message.data);\n    var _a = JSON.parse(message.data),\n      _b = _a.id,\n      id = _b === void 0 ? '' : _b,\n      payload = _a.payload,\n      type = _a.type;\n    var _c = this.subscriptionObserverMap.get(id) || {},\n      _d = _c.observer,\n      observer = _d === void 0 ? null : _d,\n      _e = _c.query,\n      query = _e === void 0 ? '' : _e,\n      _f = _c.variables,\n      variables = _f === void 0 ? {} : _f,\n      startAckTimeoutId = _c.startAckTimeoutId,\n      subscriptionReadyCallback = _c.subscriptionReadyCallback,\n      subscriptionFailedCallback = _c.subscriptionFailedCallback;\n    logger.debug({\n      id: id,\n      observer: observer,\n      query: query,\n      variables: variables\n    });\n    if (type === MESSAGE_TYPES.GQL_DATA && payload && payload.data) {\n      if (observer) {\n        observer.next(payload);\n      } else {\n        logger.debug(\"observer not found for id: \" + id);\n      }\n      return;\n    }\n    if (type === MESSAGE_TYPES.GQL_START_ACK) {\n      logger.debug(\"subscription ready for \" + JSON.stringify({\n        query: query,\n        variables: variables\n      }));\n      if (typeof subscriptionReadyCallback === 'function') {\n        subscriptionReadyCallback();\n      }\n      clearTimeout(startAckTimeoutId);\n      dispatchApiEvent(CONTROL_MSG.SUBSCRIPTION_ACK, {\n        query: query,\n        variables: variables\n      }, 'Connection established for subscription');\n      var subscriptionState = SUBSCRIPTION_STATUS.CONNECTED;\n      this.subscriptionObserverMap.set(id, {\n        observer: observer,\n        query: query,\n        variables: variables,\n        startAckTimeoutId: null,\n        subscriptionState: subscriptionState,\n        subscriptionReadyCallback: subscriptionReadyCallback,\n        subscriptionFailedCallback: subscriptionFailedCallback\n      });\n      // TODO: emit event on hub but it requires to store the id first\n      return;\n    }\n    if (type === MESSAGE_TYPES.GQL_CONNECTION_KEEP_ALIVE) {\n      clearTimeout(this.keepAliveTimeoutId);\n      this.keepAliveTimeoutId = setTimeout(this._errorDisconnect.bind(this, CONTROL_MSG.TIMEOUT_DISCONNECT), this.keepAliveTimeout);\n      return;\n    }\n    if (type === MESSAGE_TYPES.GQL_ERROR) {\n      var subscriptionState = SUBSCRIPTION_STATUS.FAILED;\n      this.subscriptionObserverMap.set(id, {\n        observer: observer,\n        query: query,\n        variables: variables,\n        startAckTimeoutId: startAckTimeoutId,\n        subscriptionReadyCallback: subscriptionReadyCallback,\n        subscriptionFailedCallback: subscriptionFailedCallback,\n        subscriptionState: subscriptionState\n      });\n      observer.error({\n        errors: [__assign({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + \": \" + JSON.stringify(payload)))]\n      });\n      clearTimeout(startAckTimeoutId);\n      observer.complete();\n      if (typeof subscriptionFailedCallback === 'function') {\n        subscriptionFailedCallback();\n      }\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._errorDisconnect = function (msg) {\n    logger.debug(\"Disconnect error: \" + msg);\n    this.subscriptionObserverMap.forEach(function (_a) {\n      var observer = _a.observer;\n      if (observer && !observer.closed) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(msg))]\n        });\n      }\n    });\n    this.subscriptionObserverMap.clear();\n    if (this.awsRealTimeSocket) {\n      this.awsRealTimeSocket.close();\n    }\n    this.socketStatus = SOCKET_STATUS.CLOSED;\n  };\n  AWSAppSyncRealTimeProvider.prototype._timeoutStartSubscriptionAck = function (subscriptionId) {\n    var _a = this.subscriptionObserverMap.get(subscriptionId) || {},\n      observer = _a.observer,\n      query = _a.query,\n      variables = _a.variables;\n    if (!observer) {\n      return;\n    }\n    this.subscriptionObserverMap.set(subscriptionId, {\n      observer: observer,\n      query: query,\n      variables: variables,\n      subscriptionState: SUBSCRIPTION_STATUS.FAILED\n    });\n    if (observer && !observer.closed) {\n      observer.error({\n        errors: [__assign({}, new GraphQLError(\"Subscription timeout \" + JSON.stringify({\n          query: query,\n          variables: variables\n        })))]\n      });\n      // Cleanup will be automatically executed\n      observer.complete();\n    }\n    logger.debug('timeoutStartSubscription', JSON.stringify({\n      query: query,\n      variables: variables\n    }));\n  };\n  AWSAppSyncRealTimeProvider.prototype._initializeWebSocketConnection = function (_a) {\n    var _this = this;\n    var appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n      authenticationType = _a.authenticationType,\n      apiKey = _a.apiKey,\n      region = _a.region,\n      additionalHeaders = _a.additionalHeaders;\n    if (this.socketStatus === SOCKET_STATUS.READY) {\n      return;\n    }\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var payloadString, headerString, _a, _b, headerQs, payloadQs, discoverableEndpoint, protocol, awsRealTimeUrl, err_3;\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              this.promiseArray.push({\n                res: res,\n                rej: rej\n              });\n              if (!(this.socketStatus === SOCKET_STATUS.CLOSED)) return [3 /*break*/, 5];\n              _c.label = 1;\n            case 1:\n              _c.trys.push([1, 4,, 5]);\n              this.socketStatus = SOCKET_STATUS.CONNECTING;\n              payloadString = '{}';\n              _b = (_a = JSON).stringify;\n              return [4 /*yield*/, this._awsRealTimeHeaderBasedAuth({\n                authenticationType: authenticationType,\n                payload: payloadString,\n                canonicalUri: '/connect',\n                apiKey: apiKey,\n                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                region: region,\n                additionalHeaders: additionalHeaders\n              })];\n            case 2:\n              headerString = _b.apply(_a, [_c.sent()]);\n              headerQs = Buffer.from(headerString).toString('base64');\n              payloadQs = Buffer.from(payloadString).toString('base64');\n              discoverableEndpoint = appSyncGraphqlEndpoint;\n              if (this.isCustomDomain(discoverableEndpoint)) {\n                discoverableEndpoint = discoverableEndpoint.concat(customDomainPath);\n              } else {\n                discoverableEndpoint = discoverableEndpoint.replace('appsync-api', 'appsync-realtime-api').replace('gogi-beta', 'grt-beta');\n              }\n              protocol = this.isSSLEnabled ? 'wss://' : 'ws://';\n              discoverableEndpoint = discoverableEndpoint.replace('https://', protocol).replace('http://', protocol);\n              awsRealTimeUrl = discoverableEndpoint + \"?header=\" + headerQs + \"&payload=\" + payloadQs;\n              return [4 /*yield*/, this._initializeRetryableHandshake({\n                awsRealTimeUrl: awsRealTimeUrl\n              })];\n            case 3:\n              _c.sent();\n              this.promiseArray.forEach(function (_a) {\n                var res = _a.res;\n                logger.debug('Notifying connection successful');\n                res();\n              });\n              this.socketStatus = SOCKET_STATUS.READY;\n              this.promiseArray = [];\n              return [3 /*break*/, 5];\n            case 4:\n              err_3 = _c.sent();\n              this.promiseArray.forEach(function (_a) {\n                var rej = _a.rej;\n                return rej(err_3);\n              });\n              this.promiseArray = [];\n              if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN) {\n                this.awsRealTimeSocket.close(3001);\n              }\n              this.awsRealTimeSocket = null;\n              this.socketStatus = SOCKET_STATUS.CLOSED;\n              return [3 /*break*/, 5];\n            case 5:\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._initializeRetryableHandshake = function (_a) {\n    var awsRealTimeUrl = _a.awsRealTimeUrl;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug(\"Initializaling retryable Handshake\");\n            return [4 /*yield*/, jitteredExponentialRetry(this._initializeHandshake.bind(this), [{\n              awsRealTimeUrl: awsRealTimeUrl\n            }], MAX_DELAY_MS)];\n          case 1:\n            _b.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._initializeHandshake = function (_a) {\n    var awsRealTimeUrl = _a.awsRealTimeUrl;\n    return __awaiter(this, void 0, void 0, function () {\n      var err_4, errorType, errorCode;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug(\"Initializing handshake \" + awsRealTimeUrl);\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 4,, 5]);\n            return [4 /*yield*/, function () {\n              return new Promise(function (res, rej) {\n                var newSocket = new WebSocket(awsRealTimeUrl, 'graphql-ws');\n                newSocket.onerror = function () {\n                  logger.debug(\"WebSocket connection error\");\n                };\n                newSocket.onclose = function () {\n                  rej(new Error('Connection handshake error'));\n                };\n                newSocket.onopen = function () {\n                  _this.awsRealTimeSocket = newSocket;\n                  return res();\n                };\n              });\n            }()];\n          case 2:\n            _b.sent();\n            // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n            return [4 /*yield*/, function () {\n              return new Promise(function (res, rej) {\n                var ackOk = false;\n                _this.awsRealTimeSocket.onerror = function (error) {\n                  logger.debug(\"WebSocket error \" + JSON.stringify(error));\n                };\n                _this.awsRealTimeSocket.onclose = function (event) {\n                  logger.debug(\"WebSocket closed \" + event.reason);\n                  rej(new Error(JSON.stringify(event)));\n                };\n                _this.awsRealTimeSocket.onmessage = function (message) {\n                  logger.debug(\"subscription message from AWS AppSyncRealTime: \" + message.data + \" \");\n                  var data = JSON.parse(message.data);\n                  var type = data.type,\n                    _a = data.payload,\n                    _b = (_a === void 0 ? {} : _a).connectionTimeoutMs,\n                    connectionTimeoutMs = _b === void 0 ? DEFAULT_KEEP_ALIVE_TIMEOUT : _b;\n                  if (type === MESSAGE_TYPES.GQL_CONNECTION_ACK) {\n                    ackOk = true;\n                    _this.keepAliveTimeout = connectionTimeoutMs;\n                    _this.awsRealTimeSocket.onmessage = _this._handleIncomingSubscriptionMessage.bind(_this);\n                    _this.awsRealTimeSocket.onerror = function (err) {\n                      logger.debug(err);\n                      _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                    };\n                    _this.awsRealTimeSocket.onclose = function (event) {\n                      logger.debug(\"WebSocket closed \" + event.reason);\n                      _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                    };\n                    res('Cool, connected to AWS AppSyncRealTime');\n                    return;\n                  }\n                  if (type === MESSAGE_TYPES.GQL_CONNECTION_ERROR) {\n                    var _c = data.payload,\n                      _d = (_c === void 0 ? {} : _c).errors,\n                      _e = __read(_d === void 0 ? [] : _d, 1),\n                      _f = _e[0],\n                      _g = _f === void 0 ? {} : _f,\n                      _h = _g.errorType,\n                      errorType = _h === void 0 ? '' : _h,\n                      _j = _g.errorCode,\n                      errorCode = _j === void 0 ? 0 : _j;\n                    rej({\n                      errorType: errorType,\n                      errorCode: errorCode\n                    });\n                  }\n                };\n                var gqlInit = {\n                  type: MESSAGE_TYPES.GQL_CONNECTION_INIT\n                };\n                _this.awsRealTimeSocket.send(JSON.stringify(gqlInit));\n                function checkAckOk() {\n                  if (!ackOk) {\n                    rej(new Error(\"Connection timeout: ack from AWSRealTime was not received on \" + CONNECTION_INIT_TIMEOUT + \" ms\"));\n                  }\n                }\n                setTimeout(checkAckOk.bind(_this), CONNECTION_INIT_TIMEOUT);\n              });\n            }()];\n          case 3:\n            // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n            _b.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            err_4 = _b.sent();\n            errorType = err_4.errorType, errorCode = err_4.errorCode;\n            if (NON_RETRYABLE_CODES.includes(errorCode)) {\n              throw new NonRetryableError(errorType);\n            } else if (errorType) {\n              throw new Error(errorType);\n            } else {\n              throw err_4;\n            }\n            return [3 /*break*/, 5];\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeHeaderBasedAuth = function (_a) {\n    var authenticationType = _a.authenticationType,\n      payload = _a.payload,\n      canonicalUri = _a.canonicalUri,\n      appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n      apiKey = _a.apiKey,\n      region = _a.region,\n      additionalHeaders = _a.additionalHeaders;\n    return __awaiter(this, void 0, void 0, function () {\n      var headerHandler, handler, host, result;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            headerHandler = {\n              API_KEY: this._awsRealTimeApiKeyHeader.bind(this),\n              AWS_IAM: this._awsRealTimeIAMHeader.bind(this),\n              OPENID_CONNECT: this._awsRealTimeOPENIDHeader.bind(this),\n              AMAZON_COGNITO_USER_POOLS: this._awsRealTimeCUPHeader.bind(this),\n              AWS_LAMBDA: this._customAuthHeader\n            };\n            handler = headerHandler[authenticationType];\n            if (typeof handler !== 'function') {\n              logger.debug(\"Authentication type \" + authenticationType + \" not supported\");\n              return [2 /*return*/, ''];\n            }\n            host = url.parse(appSyncGraphqlEndpoint).host;\n            return [4 /*yield*/, handler({\n              payload: payload,\n              canonicalUri: canonicalUri,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              apiKey: apiKey,\n              region: region,\n              host: host,\n              additionalHeaders: additionalHeaders\n            })];\n          case 1:\n            result = _b.sent();\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeCUPHeader = function (_a) {\n    var host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var session;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, Auth.currentSession()];\n          case 1:\n            session = _b.sent();\n            return [2 /*return*/, {\n              Authorization: session.getAccessToken().getJwtToken(),\n              host: host\n            }];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeOPENIDHeader = function (_a) {\n    var host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var token, federatedInfo, currentUser;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, Cache.getItem('federatedInfo')];\n          case 1:\n            federatedInfo = _b.sent();\n            if (!federatedInfo) return [3 /*break*/, 2];\n            token = federatedInfo.token;\n            return [3 /*break*/, 4];\n          case 2:\n            return [4 /*yield*/, Auth.currentAuthenticatedUser()];\n          case 3:\n            currentUser = _b.sent();\n            if (currentUser) {\n              token = currentUser.token;\n            }\n            _b.label = 4;\n          case 4:\n            if (!token) {\n              throw new Error('No federated jwt');\n            }\n            return [2 /*return*/, {\n              Authorization: token,\n              host: host\n            }];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeApiKeyHeader = function (_a) {\n    var apiKey = _a.apiKey,\n      host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var dt, dtStr;\n      return __generator(this, function (_b) {\n        dt = new Date();\n        dtStr = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n        return [2 /*return*/, {\n          host: host,\n          'x-amz-date': dtStr,\n          'x-api-key': apiKey\n        }];\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeIAMHeader = function (_a) {\n    var payload = _a.payload,\n      canonicalUri = _a.canonicalUri,\n      appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n      region = _a.region;\n    return __awaiter(this, void 0, void 0, function () {\n      var endpointInfo, credentialsOK, creds, request, signed_params;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            endpointInfo = {\n              region: region,\n              service: 'appsync'\n            };\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _b.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            return [4 /*yield*/, Credentials.get().then(function (credentials) {\n              return {\n                secret_key: credentials.secretAccessKey,\n                access_key: credentials.accessKeyId,\n                session_token: credentials.sessionToken\n              };\n            })];\n          case 2:\n            creds = _b.sent();\n            request = {\n              url: \"\" + appSyncGraphqlEndpoint + canonicalUri,\n              data: payload,\n              method: 'POST',\n              headers: __assign({}, AWS_APPSYNC_REALTIME_HEADERS)\n            };\n            signed_params = Signer.sign(request, creds, endpointInfo);\n            return [2 /*return*/, signed_params.headers];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._customAuthHeader = function (_a) {\n    var host = _a.host,\n      additionalHeaders = _a.additionalHeaders;\n    if (!additionalHeaders.Authorization) {\n      throw new Error('No auth token specified');\n    }\n    return {\n      Authorization: additionalHeaders.Authorization,\n      host: host\n    };\n  };\n  /**\n   * @private\n   */\n  AWSAppSyncRealTimeProvider.prototype._ensureCredentials = function () {\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return false;\n      var cred = Credentials.shear(credentials);\n      logger.debug('set credentials for AWSAppSyncRealTimeProvider', cred);\n      return true;\n    }).catch(function (err) {\n      logger.warn('ensure credentials error', err);\n      return false;\n    });\n  };\n  return AWSAppSyncRealTimeProvider;\n}(AbstractPubSubProvider);\nexport { AWSAppSyncRealTimeProvider };","map":{"version":3,"names":["Observable","GraphQLError","url","v4","uuid","Buffer","Logger","Credentials","Signer","Hub","Constants","USER_AGENT_HEADER","jitteredExponentialRetry","NonRetryableError","Cache","Auth","AbstractPubSubProvider","CONTROL_MSG","logger","AMPLIFY_SYMBOL","Symbol","for","dispatchApiEvent","event","data","message","dispatch","MAX_DELAY_MS","NON_RETRYABLE_CODES","MESSAGE_TYPES","SUBSCRIPTION_STATUS","SOCKET_STATUS","AWS_APPSYNC_REALTIME_HEADERS","accept","CONNECTION_INIT_TIMEOUT","START_ACK_TIMEOUT","DEFAULT_KEEP_ALIVE_TIMEOUT","standardDomainPattern","customDomainPath","AWSAppSyncRealTimeProvider","_super","__extends","_this","apply","arguments","socketStatus","CLOSED","keepAliveTimeout","subscriptionObserverMap","Map","promiseArray","prototype","getProviderName","newClient","Error","publish","_topics","_msg","_options","isCustomDomain","match","subscribe","options","appSyncGraphqlEndpoint","observer","error","errors","complete","subscriptionId_1","_startSubscriptionWithAWSAppSyncRealTime","subscriptionId","catch","err","REALTIME_SUBSCRIPTION_INIT_ERROR","__awaiter","_waitForSubscriptionToBeConnected","_a","sent","subscriptionState","get","CONNECTED","_sendUnsubscriptionMessage","debug","err_1","_removeSubscriptionObserver","Object","defineProperty","aws_appsync_dangerously_connect_to_http_endpoint_for_testing","authenticationType","query","variables","apiKey","region","_b","graphql_headers","_c","additionalHeaders","PENDING","set","startAckTimeoutId","dataString","JSON","stringify","_awsRealTimeHeaderBasedAuth","payload","canonicalUri","_j","headerObj","__assign","_e","concat","_h","userAgent","subscriptionMessage","id","extensions","authorization","type","GQL_START","stringToAWSRealTime","_initializeWebSocketConnection","err_2","_f","CONNECTION_FAILED","subscriptionFailedCallback_1","subscriptionFailedCallback","_g","subscriptionReadyCallback","setTimeout","_timeoutStartSubscriptionAck","call","awsRealTimeSocket","send","Promise","res","rej","readyState","WebSocket","OPEN","READY","unsubscribeMessage","GQL_STOP","delete","_closeSocketIfRequired","bind","size","bufferedAmount","clearTimeout","keepAliveTimeoutId","tempSocket","onclose","undefined","onerror","close","_handleIncomingSubscriptionMessage","parse","_d","GQL_DATA","next","GQL_START_ACK","SUBSCRIPTION_ACK","GQL_CONNECTION_KEEP_ALIVE","_errorDisconnect","TIMEOUT_DISCONNECT","GQL_ERROR","FAILED","msg","forEach","closed","clear","push","CONNECTING","payloadString","headerString","headerQs","from","toString","payloadQs","discoverableEndpoint","replace","protocol","isSSLEnabled","awsRealTimeUrl","_initializeRetryableHandshake","err_3","_initializeHandshake","newSocket","onopen","ackOk","reason","onmessage","connectionTimeoutMs","GQL_CONNECTION_ACK","CONNECTION_CLOSED","GQL_CONNECTION_ERROR","__read","errorType","errorCode","gqlInit","GQL_CONNECTION_INIT","checkAckOk","err_4","includes","headerHandler","API_KEY","_awsRealTimeApiKeyHeader","AWS_IAM","_awsRealTimeIAMHeader","OPENID_CONNECT","_awsRealTimeOPENIDHeader","AMAZON_COGNITO_USER_POOLS","_awsRealTimeCUPHeader","AWS_LAMBDA","_customAuthHeader","handler","host","result","currentSession","session","Authorization","getAccessToken","getJwtToken","getItem","federatedInfo","token","currentAuthenticatedUser","currentUser","dt","Date","dtStr","toISOString","endpointInfo","service","_ensureCredentials","credentialsOK","then","credentials","secret_key","secretAccessKey","access_key","accessKeyId","session_token","sessionToken","creds","request","method","headers","signed_params","sign","cred","shear","warn"],"sources":["../../src/Providers/AWSAppSyncRealTimeProvider.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module"}