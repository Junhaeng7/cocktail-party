{"ast":null,"code":"import _objectSpread from \"/Users/Junhaeng/Desktop/cocktail/cocktail-party/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/Junhaeng/Desktop/cocktail/cocktail-party/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/Junhaeng/Desktop/cocktail/cocktail-party/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n *  @since 4.0.0 This class has been split\n *\n * @typedef {Object} RegionsPluginParams\n * @property {?boolean} dragSelection Enable creating regions by dragging with\n * the mouse\n * @property {?boolean} contentEditable=false Allow/disallow editing content of the region\n * @property {?boolean} removeButton=false adds remove region button\n * @property {?RegionParams[]} regions Regions that should be added upon\n * initialisation\n * @property {number} slop=2 The sensitivity of the mouse dragging\n * @property {?number} snapToGridInterval Snap the regions to a grid of the specified multiples in seconds\n * @property {?number} snapToGridOffset Shift the snap-to-grid by the specified seconds. May also be negative.\n * @property {?boolean} deferInit Set to true to manually call\n * @property {number} maxRegions Maximum number of regions that may be created by the user at one time.\n * `initPlugin('regions')`\n * @property {function} formatTimeCallback Allows custom formating for region tooltip.\n * @property {?number} edgeScrollWidth='5% from container edges' Optional width for edgeScroll to start\n */\n\n/**\n * @typedef {Object} RegionParams\n * @desc The parameters used to describe a region.\n * @example wavesurfer.addRegion(regionParams);\n * @property {string} id=â†’random The id of the region\n * @property {number} start=0 The start position of the region (in seconds).\n * @property {number} end=0 The end position of the region (in seconds).\n * @property {?boolean} loop Whether to loop the region when played back.\n * @property {boolean} drag=true Allow/disallow dragging the region.\n * @property {boolean} resize=true Allow/disallow resizing the region.\n * @property {string} [color='rgba(0, 0, 0, 0.1)'] HTML color code.\n * @property {?number} channelIdx Select channel to draw the region on (if there are multiple channel waveforms).\n * @property {?object} handleStyle A set of CSS properties used to style the left and right handle.\n * @property {?boolean} preventContextMenu=false Determines whether the context menu is prevented from being opened.\n * @property {boolean} showTooltip=true Enable/disable tooltip displaying start and end times when hovering over region.\n */\n\nimport { Region } from \"./region.js\";\n\n/**\n * Regions are visual overlays on waveform that can be used to play and loop\n * portions of audio. Regions can be dragged and resized.\n *\n * Visual customization is possible via CSS (using the selectors\n * `.wavesurfer-region` and `.wavesurfer-handle`).\n *\n * @implements {PluginClass}\n * @extends {Observer}\n *\n * @example\n * // es6\n * import RegionsPlugin from 'wavesurfer.regions.js';\n *\n * // commonjs\n * var RegionsPlugin = require('wavesurfer.regions.js');\n *\n * // if you are using <script> tags\n * var RegionsPlugin = window.WaveSurfer.regions;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     RegionsPlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nvar RegionsPlugin = /*#__PURE__*/function () {\n  function RegionsPlugin(params, ws) {\n    var _this = this;\n    _classCallCheck(this, RegionsPlugin);\n    this.params = params;\n    this.wavesurfer = ws;\n    this.util = _objectSpread(_objectSpread({}, ws.util), {}, {\n      getRegionSnapToGridValue: function getRegionSnapToGridValue(value) {\n        return _this.getRegionSnapToGridValue(value, params);\n      }\n    });\n    this.maxRegions = params.maxRegions;\n    this.regionsMinLength = params.regionsMinLength || null;\n\n    // turn the plugin instance into an observer\n    var observerPrototypeKeys = Object.getOwnPropertyNames(this.util.Observer.prototype);\n    observerPrototypeKeys.forEach(function (key) {\n      Region.prototype[key] = _this.util.Observer.prototype[key];\n    });\n    this.wavesurfer.Region = Region;\n\n    // By default, scroll the container if the user drags a region\n    // within 5% (based on its initial size) of its edge\n    var scrollWidthProportion = 0.05;\n    this._onBackendCreated = function () {\n      _this.wrapper = _this.wavesurfer.drawer.wrapper;\n      _this.orientation = _this.wavesurfer.drawer.orientation;\n      _this.defaultEdgeScrollWidth = _this.wrapper.clientWidth * scrollWidthProportion;\n      if (_this.params.regions) {\n        _this.params.regions.forEach(function (region) {\n          _this.add(region);\n        });\n      }\n    };\n\n    // Id-based hash of regions\n    this.list = {};\n    this._onReady = function () {\n      _this.wrapper = _this.wavesurfer.drawer.wrapper;\n      _this.vertical = _this.wavesurfer.drawer.params.vertical;\n      if (_this.params.dragSelection) {\n        _this.enableDragSelection(_this.params);\n      }\n      Object.keys(_this.list).forEach(function (id) {\n        _this.list[id].updateRender();\n      });\n    };\n  }\n  _createClass(RegionsPlugin, [{\n    key: \"init\",\n    value: function init() {\n      // Check if ws is ready\n      if (this.wavesurfer.isReady) {\n        this._onBackendCreated();\n        this._onReady();\n      } else {\n        this.wavesurfer.once('ready', this._onReady);\n        this.wavesurfer.once('backend-created', this._onBackendCreated);\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.wavesurfer.un('ready', this._onReady);\n      this.wavesurfer.un('backend-created', this._onBackendCreated);\n      // Disabling `region-removed' because destroying the plugin calls\n      // the Region.remove() method that is also used to remove regions based\n      // on user input. This can cause confusion since teardown is not a\n      // user event, but would emit `region-removed` as if it was.\n      this.wavesurfer.setDisabledEventEmissions(['region-removed']);\n      this.disableDragSelection();\n      this.clear();\n    }\n\n    /**\n     * check to see if adding a new region would exceed maxRegions\n     * @return {boolean} whether we should proceed and create a region\n     * @private\n     */\n  }, {\n    key: \"wouldExceedMaxRegions\",\n    value: function wouldExceedMaxRegions() {\n      return this.maxRegions && Object.keys(this.list).length >= this.maxRegions;\n    }\n\n    /**\n     * Add a region\n     *\n     * @param {object} params Region parameters\n     * @return {Region} The created region\n     */\n  }, {\n    key: \"add\",\n    value: function add(params) {\n      var _this2 = this;\n      if (this.wouldExceedMaxRegions()) {\n        return null;\n      }\n      params = _objectSpread({\n        edgeScrollWidth: this.params.edgeScrollWidth || this.defaultEdgeScrollWidth,\n        contentEditable: this.params.contentEditable,\n        removeButton: this.params.removeButton\n      }, params);\n\n      // Take formatTimeCallback from plugin params if not already set\n      if (!params.formatTimeCallback && this.params.formatTimeCallback) {\n        params = _objectSpread(_objectSpread({}, params), {}, {\n          formatTimeCallback: this.params.formatTimeCallback\n        });\n      }\n      if (!params.minLength && this.regionsMinLength) {\n        params = _objectSpread(_objectSpread({}, params), {}, {\n          minLength: this.regionsMinLength\n        });\n      }\n      var region = new this.wavesurfer.Region(params, this.util, this.wavesurfer);\n      this.list[region.id] = region;\n      region.on('remove', function () {\n        delete _this2.list[region.id];\n      });\n      return region;\n    }\n\n    /**\n     * Remove all regions\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _this3 = this;\n      Object.keys(this.list).forEach(function (id) {\n        _this3.list[id].remove();\n      });\n    }\n  }, {\n    key: \"enableDragSelection\",\n    value: function enableDragSelection(params) {\n      var _this4 = this;\n      this.disableDragSelection();\n      var slop = params.slop || 2;\n      var container = this.wavesurfer.drawer.container;\n      var scroll = params.scroll !== false && this.wavesurfer.params.scrollParent;\n      var scrollSpeed = params.scrollSpeed || 1;\n      var scrollThreshold = params.scrollThreshold || 10;\n      var drag;\n      var duration = this.wavesurfer.getDuration();\n      var maxScroll;\n      var start;\n      var region;\n      var touchId;\n      var pxMove = 0;\n      var scrollDirection;\n      var wrapperRect;\n\n      // Scroll when the user is dragging within the threshold\n      var edgeScroll = function edgeScroll(e) {\n        if (!region || !scrollDirection) {\n          return;\n        }\n\n        // Update scroll position\n        var scrollLeft = _this4.wrapper.scrollLeft + scrollSpeed * scrollDirection;\n        _this4.wrapper.scrollLeft = scrollLeft = Math.min(maxScroll, Math.max(0, scrollLeft));\n\n        // Update range\n        var end = _this4.wavesurfer.drawer.handleEvent(e);\n        region.update({\n          start: Math.min(end * duration, start * duration),\n          end: Math.max(end * duration, start * duration)\n        });\n\n        // Check that there is more to scroll and repeat\n        if (scrollLeft < maxScroll && scrollLeft > 0) {\n          window.requestAnimationFrame(function () {\n            edgeScroll(e);\n          });\n        }\n      };\n      var eventDown = function eventDown(e) {\n        if (e.touches && e.touches.length > 1) {\n          return;\n        }\n        duration = _this4.wavesurfer.getDuration();\n        touchId = e.targetTouches ? e.targetTouches[0].identifier : null;\n\n        // Store for scroll calculations\n        maxScroll = _this4.wrapper.scrollWidth - _this4.wrapper.clientWidth;\n        wrapperRect = _this4.util.withOrientation(_this4.wrapper.getBoundingClientRect(), _this4.vertical);\n\n        // set the region channel index based on the clicked area\n        if (_this4.wavesurfer.params.splitChannels && _this4.wavesurfer.params.splitChannelsOptions.splitDragSelection) {\n          var y = (e.touches ? e.touches[0].clientY : e.clientY) - wrapperRect.top;\n          var channelCount = _this4.wavesurfer.backend.buffer != null ? _this4.wavesurfer.backend.buffer.numberOfChannels : 1;\n          var channelHeight = _this4.wrapper.clientHeight / channelCount;\n          var channelIdx = Math.floor(y / channelHeight);\n          params.channelIdx = channelIdx;\n          var channelColors = _this4.wavesurfer.params.splitChannelsOptions.channelColors[channelIdx];\n          if (channelColors && channelColors.dragColor) {\n            params.color = channelColors.dragColor;\n          }\n        }\n        drag = true;\n        start = _this4.wavesurfer.drawer.handleEvent(e, true);\n        region = null;\n        scrollDirection = null;\n      };\n      this.wrapper.addEventListener('mousedown', eventDown);\n      this.wrapper.addEventListener('touchstart', eventDown);\n      this.on('disable-drag-selection', function () {\n        _this4.wrapper.removeEventListener('touchstart', eventDown);\n        _this4.wrapper.removeEventListener('mousedown', eventDown);\n      });\n      var eventUp = function eventUp(e) {\n        if (e.touches && e.touches.length > 1) {\n          return;\n        }\n        drag = false;\n        pxMove = 0;\n        scrollDirection = null;\n        if (region) {\n          _this4.util.preventClick();\n          region.fireEvent('update-end', e);\n          _this4.wavesurfer.fireEvent('region-update-end', region, e);\n        }\n        region = null;\n      };\n      this.wrapper.addEventListener('mouseleave', eventUp);\n      this.wrapper.addEventListener('mouseup', eventUp);\n      this.wrapper.addEventListener('touchend', eventUp);\n      document.body.addEventListener('mouseup', eventUp);\n      document.body.addEventListener('touchend', eventUp);\n      this.on('disable-drag-selection', function () {\n        document.body.removeEventListener('mouseup', eventUp);\n        document.body.removeEventListener('touchend', eventUp);\n        _this4.wrapper.removeEventListener('touchend', eventUp);\n        _this4.wrapper.removeEventListener('mouseup', eventUp);\n        _this4.wrapper.removeEventListener('mouseleave', eventUp);\n      });\n      var eventMove = function eventMove(event) {\n        if (!drag) {\n          return;\n        }\n        if (++pxMove <= slop) {\n          return;\n        }\n        if (event.touches && event.touches.length > 1) {\n          return;\n        }\n        if (event.targetTouches && event.targetTouches[0].identifier != touchId) {\n          return;\n        }\n\n        // auto-create a region during mouse drag, unless region-count would exceed \"maxRegions\"\n        if (!region) {\n          region = _this4.add(params || {});\n          if (!region) {\n            return;\n          }\n        }\n        var end = _this4.wavesurfer.drawer.handleEvent(event);\n        var startUpdate = _this4.wavesurfer.regions.util.getRegionSnapToGridValue(start * duration);\n        var endUpdate = _this4.wavesurfer.regions.util.getRegionSnapToGridValue(end * duration);\n        region.update({\n          start: Math.min(endUpdate, startUpdate),\n          end: Math.max(endUpdate, startUpdate)\n        });\n        var orientedEvent = _this4.util.withOrientation(event, _this4.vertical);\n\n        // If scrolling is enabled\n        if (scroll && container.clientWidth < _this4.wrapper.scrollWidth) {\n          // Check threshold based on mouse\n          var x = orientedEvent.clientX - wrapperRect.left;\n          if (x <= scrollThreshold) {\n            scrollDirection = -1;\n          } else if (x >= wrapperRect.right - scrollThreshold) {\n            scrollDirection = 1;\n          } else {\n            scrollDirection = null;\n          }\n          scrollDirection && edgeScroll(event);\n        }\n      };\n      this.wrapper.addEventListener('mousemove', eventMove);\n      this.wrapper.addEventListener('touchmove', eventMove);\n      this.on('disable-drag-selection', function () {\n        _this4.wrapper.removeEventListener('touchmove', eventMove);\n        _this4.wrapper.removeEventListener('mousemove', eventMove);\n      });\n      this.wavesurfer.on('region-created', function (region) {\n        if (_this4.regionsMinLength) {\n          region.minLength = _this4.regionsMinLength;\n        }\n      });\n    }\n  }, {\n    key: \"disableDragSelection\",\n    value: function disableDragSelection() {\n      this.fireEvent('disable-drag-selection');\n    }\n\n    /**\n     * Get current region\n     *\n     * The smallest region that contains the current time. If several such\n     * regions exist, take the first. Return `null` if none exist.\n     *\n     * @returns {Region} The current region\n     */\n  }, {\n    key: \"getCurrentRegion\",\n    value: function getCurrentRegion() {\n      var _this5 = this;\n      var time = this.wavesurfer.getCurrentTime();\n      var min = null;\n      Object.keys(this.list).forEach(function (id) {\n        var cur = _this5.list[id];\n        if (cur.start <= time && cur.end >= time) {\n          if (!min || cur.end - cur.start < min.end - min.start) {\n            min = cur;\n          }\n        }\n      });\n      return min;\n    }\n\n    /**\n     * Match the value to the grid, if required\n     *\n     * If the regions plugin params have a snapToGridInterval set, return the\n     * value matching the nearest grid interval. If no snapToGridInterval is set,\n     * the passed value will be returned without modification.\n     *\n     * @param {number} value the value to snap to the grid, if needed\n     * @param {Object} params the regions plugin params\n     * @returns {number} value\n     */\n  }, {\n    key: \"getRegionSnapToGridValue\",\n    value: function getRegionSnapToGridValue(value, params) {\n      if (params.snapToGridInterval) {\n        // the regions should snap to a grid\n        var offset = params.snapToGridOffset || 0;\n        return Math.round((value - offset) / params.snapToGridInterval) * params.snapToGridInterval + offset;\n      }\n\n      // no snap-to-grid\n      return value;\n    }\n  }], [{\n    key: \"create\",\n    value:\n    /**\n     * Regions plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param {RegionsPluginParams} params parameters use to initialise the plugin\n     * @return {PluginDefinition} an object representing the plugin\n     */\n    function create(params) {\n      return {\n        name: 'regions',\n        deferInit: params && params.deferInit ? params.deferInit : false,\n        params: params,\n        staticProps: {\n          addRegion: function addRegion(options) {\n            if (!this.initialisedPluginList.regions) {\n              this.initPlugin('regions');\n            }\n            return this.regions.add(options);\n          },\n          clearRegions: function clearRegions() {\n            this.regions && this.regions.clear();\n          },\n          enableDragSelection: function enableDragSelection(options) {\n            if (!this.initialisedPluginList.regions) {\n              this.initPlugin('regions');\n            }\n            this.regions.enableDragSelection(options);\n          },\n          disableDragSelection: function disableDragSelection() {\n            this.regions.disableDragSelection();\n          }\n        },\n        instance: RegionsPlugin\n      };\n    }\n  }]);\n  return RegionsPlugin;\n}();\nexport { RegionsPlugin as default };","map":{"version":3,"names":["Region","RegionsPlugin","params","ws","_this","_classCallCheck","wavesurfer","util","_objectSpread","getRegionSnapToGridValue","value","maxRegions","regionsMinLength","observerPrototypeKeys","Object","getOwnPropertyNames","Observer","prototype","forEach","key","scrollWidthProportion","_onBackendCreated","wrapper","drawer","orientation","defaultEdgeScrollWidth","clientWidth","regions","region","add","list","_onReady","vertical","dragSelection","enableDragSelection","keys","id","updateRender","_createClass","init","isReady","once","destroy","un","setDisabledEventEmissions","disableDragSelection","clear","wouldExceedMaxRegions","length","_this2","edgeScrollWidth","contentEditable","removeButton","formatTimeCallback","minLength","on","_this3","remove","_this4","slop","container","scroll","scrollParent","scrollSpeed","scrollThreshold","drag","duration","getDuration","maxScroll","start","touchId","pxMove","scrollDirection","wrapperRect","edgeScroll","e","scrollLeft","Math","min","max","end","handleEvent","update","window","requestAnimationFrame","eventDown","touches","targetTouches","identifier","scrollWidth","withOrientation","getBoundingClientRect","splitChannels","splitChannelsOptions","splitDragSelection","y","clientY","top","channelCount","backend","buffer","numberOfChannels","channelHeight","clientHeight","channelIdx","floor","channelColors","dragColor","color","addEventListener","removeEventListener","eventUp","preventClick","fireEvent","document","body","eventMove","event","startUpdate","endUpdate","orientedEvent","x","clientX","left","right","getCurrentRegion","_this5","time","getCurrentTime","cur","snapToGridInterval","offset","snapToGridOffset","round","create","name","deferInit","staticProps","addRegion","options","initialisedPluginList","initPlugin","clearRegions","instance","default"],"sources":["/Users/Junhaeng/Desktop/cocktail/cocktail-party/node_modules/wavesurfer.js/src/plugin/regions/index.js"],"sourcesContent":["/**\n *  @since 4.0.0 This class has been split\n *\n * @typedef {Object} RegionsPluginParams\n * @property {?boolean} dragSelection Enable creating regions by dragging with\n * the mouse\n * @property {?boolean} contentEditable=false Allow/disallow editing content of the region\n * @property {?boolean} removeButton=false adds remove region button\n * @property {?RegionParams[]} regions Regions that should be added upon\n * initialisation\n * @property {number} slop=2 The sensitivity of the mouse dragging\n * @property {?number} snapToGridInterval Snap the regions to a grid of the specified multiples in seconds\n * @property {?number} snapToGridOffset Shift the snap-to-grid by the specified seconds. May also be negative.\n * @property {?boolean} deferInit Set to true to manually call\n * @property {number} maxRegions Maximum number of regions that may be created by the user at one time.\n * `initPlugin('regions')`\n * @property {function} formatTimeCallback Allows custom formating for region tooltip.\n * @property {?number} edgeScrollWidth='5% from container edges' Optional width for edgeScroll to start\n */\n\n/**\n * @typedef {Object} RegionParams\n * @desc The parameters used to describe a region.\n * @example wavesurfer.addRegion(regionParams);\n * @property {string} id=â†’random The id of the region\n * @property {number} start=0 The start position of the region (in seconds).\n * @property {number} end=0 The end position of the region (in seconds).\n * @property {?boolean} loop Whether to loop the region when played back.\n * @property {boolean} drag=true Allow/disallow dragging the region.\n * @property {boolean} resize=true Allow/disallow resizing the region.\n * @property {string} [color='rgba(0, 0, 0, 0.1)'] HTML color code.\n * @property {?number} channelIdx Select channel to draw the region on (if there are multiple channel waveforms).\n * @property {?object} handleStyle A set of CSS properties used to style the left and right handle.\n * @property {?boolean} preventContextMenu=false Determines whether the context menu is prevented from being opened.\n * @property {boolean} showTooltip=true Enable/disable tooltip displaying start and end times when hovering over region.\n */\n\nimport {Region} from \"./region.js\";\n\n/**\n * Regions are visual overlays on waveform that can be used to play and loop\n * portions of audio. Regions can be dragged and resized.\n *\n * Visual customization is possible via CSS (using the selectors\n * `.wavesurfer-region` and `.wavesurfer-handle`).\n *\n * @implements {PluginClass}\n * @extends {Observer}\n *\n * @example\n * // es6\n * import RegionsPlugin from 'wavesurfer.regions.js';\n *\n * // commonjs\n * var RegionsPlugin = require('wavesurfer.regions.js');\n *\n * // if you are using <script> tags\n * var RegionsPlugin = window.WaveSurfer.regions;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     RegionsPlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nexport default class RegionsPlugin {\n    /**\n     * Regions plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param {RegionsPluginParams} params parameters use to initialise the plugin\n     * @return {PluginDefinition} an object representing the plugin\n     */\n    static create(params) {\n        return {\n            name: 'regions',\n            deferInit: params && params.deferInit ? params.deferInit : false,\n            params: params,\n            staticProps: {\n                addRegion(options) {\n                    if (!this.initialisedPluginList.regions) {\n                        this.initPlugin('regions');\n                    }\n                    return this.regions.add(options);\n                },\n\n                clearRegions() {\n                    this.regions && this.regions.clear();\n                },\n\n                enableDragSelection(options) {\n                    if (!this.initialisedPluginList.regions) {\n                        this.initPlugin('regions');\n                    }\n                    this.regions.enableDragSelection(options);\n                },\n\n                disableDragSelection() {\n                    this.regions.disableDragSelection();\n                }\n            },\n            instance: RegionsPlugin\n        };\n    }\n\n    constructor(params, ws) {\n        this.params = params;\n        this.wavesurfer = ws;\n        this.util = {\n            ...ws.util,\n            getRegionSnapToGridValue: value => {\n                return this.getRegionSnapToGridValue(value, params);\n            }\n        };\n        this.maxRegions = params.maxRegions;\n        this.regionsMinLength = params.regionsMinLength || null;\n\n        // turn the plugin instance into an observer\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\n            this.util.Observer.prototype\n        );\n        observerPrototypeKeys.forEach(key => {\n            Region.prototype[key] = this.util.Observer.prototype[key];\n        });\n        this.wavesurfer.Region = Region;\n\n        // By default, scroll the container if the user drags a region\n        // within 5% (based on its initial size) of its edge\n        const scrollWidthProportion = 0.05;\n        this._onBackendCreated = () => {\n            this.wrapper = this.wavesurfer.drawer.wrapper;\n            this.orientation = this.wavesurfer.drawer.orientation;\n            this.defaultEdgeScrollWidth = this.wrapper.clientWidth * scrollWidthProportion;\n            if (this.params.regions) {\n                this.params.regions.forEach(region => {\n                    this.add(region);\n                });\n            }\n        };\n\n        // Id-based hash of regions\n        this.list = {};\n        this._onReady = () => {\n            this.wrapper = this.wavesurfer.drawer.wrapper;\n            this.vertical = this.wavesurfer.drawer.params.vertical;\n            if (this.params.dragSelection) {\n                this.enableDragSelection(this.params);\n            }\n            Object.keys(this.list).forEach(id => {\n                this.list[id].updateRender();\n            });\n        };\n    }\n\n    init() {\n        // Check if ws is ready\n        if (this.wavesurfer.isReady) {\n            this._onBackendCreated();\n            this._onReady();\n        } else {\n            this.wavesurfer.once('ready', this._onReady);\n            this.wavesurfer.once('backend-created', this._onBackendCreated);\n        }\n    }\n\n    destroy() {\n        this.wavesurfer.un('ready', this._onReady);\n        this.wavesurfer.un('backend-created', this._onBackendCreated);\n        // Disabling `region-removed' because destroying the plugin calls\n        // the Region.remove() method that is also used to remove regions based\n        // on user input. This can cause confusion since teardown is not a\n        // user event, but would emit `region-removed` as if it was.\n        this.wavesurfer.setDisabledEventEmissions(['region-removed']);\n        this.disableDragSelection();\n        this.clear();\n    }\n\n    /**\n     * check to see if adding a new region would exceed maxRegions\n     * @return {boolean} whether we should proceed and create a region\n     * @private\n     */\n    wouldExceedMaxRegions() {\n        return (\n            this.maxRegions && Object.keys(this.list).length >= this.maxRegions\n        );\n    }\n\n    /**\n     * Add a region\n     *\n     * @param {object} params Region parameters\n     * @return {Region} The created region\n     */\n    add(params) {\n        if (this.wouldExceedMaxRegions()) {\n            return null;\n        }\n\n        params = {\n            edgeScrollWidth: this.params.edgeScrollWidth || this.defaultEdgeScrollWidth,\n            contentEditable: this.params.contentEditable,\n            removeButton: this.params.removeButton,\n            ...params\n        };\n\n        // Take formatTimeCallback from plugin params if not already set\n        if (!params.formatTimeCallback && this.params.formatTimeCallback) {\n            params = {...params, formatTimeCallback: this.params.formatTimeCallback};\n        }\n\n        if (!params.minLength && this.regionsMinLength) {\n            params = {...params, minLength: this.regionsMinLength};\n        }\n\n        const region = new this.wavesurfer.Region(params, this.util, this.wavesurfer);\n\n        this.list[region.id] = region;\n\n        region.on('remove', () => {\n            delete this.list[region.id];\n        });\n\n        return region;\n    }\n\n    /**\n     * Remove all regions\n     */\n    clear() {\n        Object.keys(this.list).forEach(id => {\n            this.list[id].remove();\n        });\n    }\n\n    enableDragSelection(params) {\n        this.disableDragSelection();\n\n        const slop = params.slop || 2;\n        const container = this.wavesurfer.drawer.container;\n        const scroll =\n            params.scroll !== false && this.wavesurfer.params.scrollParent;\n        const scrollSpeed = params.scrollSpeed || 1;\n        const scrollThreshold = params.scrollThreshold || 10;\n        let drag;\n        let duration = this.wavesurfer.getDuration();\n        let maxScroll;\n        let start;\n        let region;\n        let touchId;\n        let pxMove = 0;\n        let scrollDirection;\n        let wrapperRect;\n\n        // Scroll when the user is dragging within the threshold\n        const edgeScroll = e => {\n            if (!region || !scrollDirection) {\n                return;\n            }\n\n            // Update scroll position\n            let scrollLeft =\n                this.wrapper.scrollLeft + scrollSpeed * scrollDirection;\n            this.wrapper.scrollLeft = scrollLeft = Math.min(\n                maxScroll,\n                Math.max(0, scrollLeft)\n            );\n\n            // Update range\n            const end = this.wavesurfer.drawer.handleEvent(e);\n            region.update({\n                start: Math.min(end * duration, start * duration),\n                end: Math.max(end * duration, start * duration)\n            });\n\n            // Check that there is more to scroll and repeat\n            if (scrollLeft < maxScroll && scrollLeft > 0) {\n                window.requestAnimationFrame(() => {\n                    edgeScroll(e);\n                });\n            }\n        };\n\n        const eventDown = e => {\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n            duration = this.wavesurfer.getDuration();\n            touchId = e.targetTouches ? e.targetTouches[0].identifier : null;\n\n            // Store for scroll calculations\n            maxScroll = this.wrapper.scrollWidth -\n                this.wrapper.clientWidth;\n            wrapperRect = this.util.withOrientation(\n                this.wrapper.getBoundingClientRect(),\n                this.vertical\n            );\n\n            // set the region channel index based on the clicked area\n            if (this.wavesurfer.params.splitChannels && this.wavesurfer.params.splitChannelsOptions.splitDragSelection) {\n                const y = (e.touches ? e.touches[0].clientY : e.clientY) - wrapperRect.top;\n                const channelCount = this.wavesurfer.backend.buffer != null ? this.wavesurfer.backend.buffer.numberOfChannels : 1;\n                const channelHeight = this.wrapper.clientHeight / channelCount;\n                const channelIdx = Math.floor(y / channelHeight);\n                params.channelIdx = channelIdx;\n                const channelColors = this.wavesurfer.params.splitChannelsOptions.channelColors[channelIdx];\n                if (channelColors && channelColors.dragColor) {\n                    params.color = channelColors.dragColor;\n                }\n            }\n\n            drag = true;\n            start = this.wavesurfer.drawer.handleEvent(e, true);\n            region = null;\n            scrollDirection = null;\n        };\n        this.wrapper.addEventListener('mousedown', eventDown);\n        this.wrapper.addEventListener('touchstart', eventDown);\n        this.on('disable-drag-selection', () => {\n            this.wrapper.removeEventListener('touchstart', eventDown);\n            this.wrapper.removeEventListener('mousedown', eventDown);\n        });\n\n        const eventUp = e => {\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n\n            drag = false;\n            pxMove = 0;\n            scrollDirection = null;\n\n            if (region) {\n                this.util.preventClick();\n                region.fireEvent('update-end', e);\n                this.wavesurfer.fireEvent('region-update-end', region, e);\n            }\n\n            region = null;\n        };\n        this.wrapper.addEventListener('mouseleave', eventUp);\n        this.wrapper.addEventListener('mouseup', eventUp);\n        this.wrapper.addEventListener('touchend', eventUp);\n\n        document.body.addEventListener('mouseup', eventUp);\n        document.body.addEventListener('touchend', eventUp);\n        this.on('disable-drag-selection', () => {\n            document.body.removeEventListener('mouseup', eventUp);\n            document.body.removeEventListener('touchend', eventUp);\n            this.wrapper.removeEventListener('touchend', eventUp);\n            this.wrapper.removeEventListener('mouseup', eventUp);\n            this.wrapper.removeEventListener('mouseleave', eventUp);\n        });\n\n        const eventMove = event => {\n            if (!drag) {\n                return;\n            }\n            if (++pxMove <= slop) {\n                return;\n            }\n\n            if (event.touches && event.touches.length > 1) {\n                return;\n            }\n            if (event.targetTouches && event.targetTouches[0].identifier != touchId) {\n                return;\n            }\n\n            // auto-create a region during mouse drag, unless region-count would exceed \"maxRegions\"\n            if (!region) {\n                region = this.add(params || {});\n                if (!region) {\n                    return;\n                }\n            }\n\n            const end = this.wavesurfer.drawer.handleEvent(event);\n            const startUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                start * duration\n            );\n            const endUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                end * duration\n            );\n            region.update({\n                start: Math.min(endUpdate, startUpdate),\n                end: Math.max(endUpdate, startUpdate)\n            });\n\n            let orientedEvent = this.util.withOrientation(event, this.vertical);\n\n            // If scrolling is enabled\n            if (scroll && container.clientWidth < this.wrapper.scrollWidth) {\n                // Check threshold based on mouse\n                const x = orientedEvent.clientX - wrapperRect.left;\n                if (x <= scrollThreshold) {\n                    scrollDirection = -1;\n                } else if (x >= wrapperRect.right - scrollThreshold) {\n                    scrollDirection = 1;\n                } else {\n                    scrollDirection = null;\n                }\n                scrollDirection && edgeScroll(event);\n            }\n        };\n        this.wrapper.addEventListener('mousemove', eventMove);\n        this.wrapper.addEventListener('touchmove', eventMove);\n        this.on('disable-drag-selection', () => {\n            this.wrapper.removeEventListener('touchmove', eventMove);\n            this.wrapper.removeEventListener('mousemove', eventMove);\n        });\n\n        this.wavesurfer.on('region-created', region => {\n            if (this.regionsMinLength) {\n                region.minLength = this.regionsMinLength;\n            }\n        });\n    }\n\n    disableDragSelection() {\n        this.fireEvent('disable-drag-selection');\n    }\n\n    /**\n     * Get current region\n     *\n     * The smallest region that contains the current time. If several such\n     * regions exist, take the first. Return `null` if none exist.\n     *\n     * @returns {Region} The current region\n     */\n    getCurrentRegion() {\n        const time = this.wavesurfer.getCurrentTime();\n        let min = null;\n        Object.keys(this.list).forEach(id => {\n            const cur = this.list[id];\n            if (cur.start <= time && cur.end >= time) {\n                if (!min || cur.end - cur.start < min.end - min.start) {\n                    min = cur;\n                }\n            }\n        });\n\n        return min;\n    }\n\n    /**\n     * Match the value to the grid, if required\n     *\n     * If the regions plugin params have a snapToGridInterval set, return the\n     * value matching the nearest grid interval. If no snapToGridInterval is set,\n     * the passed value will be returned without modification.\n     *\n     * @param {number} value the value to snap to the grid, if needed\n     * @param {Object} params the regions plugin params\n     * @returns {number} value\n     */\n    getRegionSnapToGridValue(value, params) {\n        if (params.snapToGridInterval) {\n            // the regions should snap to a grid\n            const offset = params.snapToGridOffset || 0;\n            return (\n                Math.round((value - offset) / params.snapToGridInterval) *\n                    params.snapToGridInterval +\n                offset\n            );\n        }\n\n        // no snap-to-grid\n        return value;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}