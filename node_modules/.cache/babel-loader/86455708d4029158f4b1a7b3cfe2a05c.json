{"ast":null,"code":"import { __read } from \"tslib\";\nimport { strictParseByte, strictParseDouble, strictParseFloat32, strictParseShort } from \"./parse-utils\";\nvar DAYS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nvar MONTHS = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nexport function dateToUtcString(date) {\n  var year = date.getUTCFullYear();\n  var month = date.getUTCMonth();\n  var dayOfWeek = date.getUTCDay();\n  var dayOfMonthInt = date.getUTCDate();\n  var hoursInt = date.getUTCHours();\n  var minutesInt = date.getUTCMinutes();\n  var secondsInt = date.getUTCSeconds();\n  var dayOfMonthString = dayOfMonthInt < 10 ? \"0\" + dayOfMonthInt : \"\" + dayOfMonthInt;\n  var hoursString = hoursInt < 10 ? \"0\" + hoursInt : \"\" + hoursInt;\n  var minutesString = minutesInt < 10 ? \"0\" + minutesInt : \"\" + minutesInt;\n  var secondsString = secondsInt < 10 ? \"0\" + secondsInt : \"\" + secondsInt;\n  return DAYS[dayOfWeek] + \", \" + dayOfMonthString + \" \" + MONTHS[month] + \" \" + year + \" \" + hoursString + \":\" + minutesString + \":\" + secondsString + \" GMT\";\n}\nvar RFC3339 = new RegExp(/^(\\d{4})-(\\d{2})-(\\d{2})[tT](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))?[zZ]$/);\nexport var parseRfc3339DateTime = function parseRfc3339DateTime(value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n  if (typeof value !== \"string\") {\n    throw new TypeError(\"RFC-3339 date-times must be expressed as strings\");\n  }\n  var match = RFC3339.exec(value);\n  if (!match) {\n    throw new TypeError(\"Invalid RFC-3339 date-time value\");\n  }\n  var _a = __read(match, 8),\n    _ = _a[0],\n    yearStr = _a[1],\n    monthStr = _a[2],\n    dayStr = _a[3],\n    hours = _a[4],\n    minutes = _a[5],\n    seconds = _a[6],\n    fractionalMilliseconds = _a[7];\n  var year = strictParseShort(stripLeadingZeroes(yearStr));\n  var month = parseDateValue(monthStr, \"month\", 1, 12);\n  var day = parseDateValue(dayStr, \"day\", 1, 31);\n  return buildDate(year, month, day, {\n    hours: hours,\n    minutes: minutes,\n    seconds: seconds,\n    fractionalMilliseconds: fractionalMilliseconds\n  });\n};\nvar IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/);\nvar RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/);\nvar ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? (\\d{4})$/);\nexport var parseRfc7231DateTime = function parseRfc7231DateTime(value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n  if (typeof value !== \"string\") {\n    throw new TypeError(\"RFC-7231 date-times must be expressed as strings\");\n  }\n  var match = IMF_FIXDATE.exec(value);\n  if (match) {\n    var _a = __read(match, 8),\n      _1 = _a[0],\n      dayStr = _a[1],\n      monthStr = _a[2],\n      yearStr = _a[3],\n      hours = _a[4],\n      minutes = _a[5],\n      seconds = _a[6],\n      fractionalMilliseconds = _a[7];\n    return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, \"day\", 1, 31), {\n      hours: hours,\n      minutes: minutes,\n      seconds: seconds,\n      fractionalMilliseconds: fractionalMilliseconds\n    });\n  }\n  match = RFC_850_DATE.exec(value);\n  if (match) {\n    var _b = __read(match, 8),\n      _2 = _b[0],\n      dayStr = _b[1],\n      monthStr = _b[2],\n      yearStr = _b[3],\n      hours = _b[4],\n      minutes = _b[5],\n      seconds = _b[6],\n      fractionalMilliseconds = _b[7];\n    return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, \"day\", 1, 31), {\n      hours: hours,\n      minutes: minutes,\n      seconds: seconds,\n      fractionalMilliseconds: fractionalMilliseconds\n    }));\n  }\n  match = ASC_TIME.exec(value);\n  if (match) {\n    var _c = __read(match, 8),\n      _3 = _c[0],\n      monthStr = _c[1],\n      dayStr = _c[2],\n      hours = _c[3],\n      minutes = _c[4],\n      seconds = _c[5],\n      fractionalMilliseconds = _c[6],\n      yearStr = _c[7];\n    return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), \"day\", 1, 31), {\n      hours: hours,\n      minutes: minutes,\n      seconds: seconds,\n      fractionalMilliseconds: fractionalMilliseconds\n    });\n  }\n  throw new TypeError(\"Invalid RFC-7231 date-time value\");\n};\nexport var parseEpochTimestamp = function parseEpochTimestamp(value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n  var valueAsDouble;\n  if (typeof value === \"number\") {\n    valueAsDouble = value;\n  } else if (typeof value === \"string\") {\n    valueAsDouble = strictParseDouble(value);\n  } else {\n    throw new TypeError(\"Epoch timestamps must be expressed as floating point numbers or their string representation\");\n  }\n  if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {\n    throw new TypeError(\"Epoch timestamps must be valid, non-Infinite, non-NaN numerics\");\n  }\n  return new Date(Math.round(valueAsDouble * 1000));\n};\nvar buildDate = function buildDate(year, month, day, time) {\n  var adjustedMonth = month - 1;\n  validateDayOfMonth(year, adjustedMonth, day);\n  return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, \"hour\", 0, 23), parseDateValue(time.minutes, \"minute\", 0, 59), parseDateValue(time.seconds, \"seconds\", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));\n};\nvar parseTwoDigitYear = function parseTwoDigitYear(value) {\n  var thisYear = new Date().getUTCFullYear();\n  var valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));\n  if (valueInThisCentury < thisYear) {\n    return valueInThisCentury + 100;\n  }\n  return valueInThisCentury;\n};\nvar FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1000;\nvar adjustRfc850Year = function adjustRfc850Year(input) {\n  if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {\n    return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));\n  }\n  return input;\n};\nvar parseMonthByShortName = function parseMonthByShortName(value) {\n  var monthIdx = MONTHS.indexOf(value);\n  if (monthIdx < 0) {\n    throw new TypeError(\"Invalid month: \" + value);\n  }\n  return monthIdx + 1;\n};\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar validateDayOfMonth = function validateDayOfMonth(year, month, day) {\n  var maxDays = DAYS_IN_MONTH[month];\n  if (month === 1 && isLeapYear(year)) {\n    maxDays = 29;\n  }\n  if (day > maxDays) {\n    throw new TypeError(\"Invalid day for \" + MONTHS[month] + \" in \" + year + \": \" + day);\n  }\n};\nvar isLeapYear = function isLeapYear(year) {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n};\nvar parseDateValue = function parseDateValue(value, type, lower, upper) {\n  var dateVal = strictParseByte(stripLeadingZeroes(value));\n  if (dateVal < lower || dateVal > upper) {\n    throw new TypeError(type + \" must be between \" + lower + \" and \" + upper + \", inclusive\");\n  }\n  return dateVal;\n};\nvar parseMilliseconds = function parseMilliseconds(value) {\n  if (value === null || value === undefined) {\n    return 0;\n  }\n  return strictParseFloat32(\"0.\" + value) * 1000;\n};\nvar stripLeadingZeroes = function stripLeadingZeroes(value) {\n  var idx = 0;\n  while (idx < value.length - 1 && value.charAt(idx) === \"0\") {\n    idx++;\n  }\n  if (idx === 0) {\n    return value;\n  }\n  return value.slice(idx);\n};","map":{"version":3,"names":["__read","strictParseByte","strictParseDouble","strictParseFloat32","strictParseShort","DAYS","MONTHS","dateToUtcString","date","year","getUTCFullYear","month","getUTCMonth","dayOfWeek","getUTCDay","dayOfMonthInt","getUTCDate","hoursInt","getUTCHours","minutesInt","getUTCMinutes","secondsInt","getUTCSeconds","dayOfMonthString","hoursString","minutesString","secondsString","RFC3339","RegExp","parseRfc3339DateTime","value","undefined","TypeError","match","exec","_a","_","yearStr","monthStr","dayStr","hours","minutes","seconds","fractionalMilliseconds","stripLeadingZeroes","parseDateValue","day","buildDate","IMF_FIXDATE","RFC_850_DATE","ASC_TIME","parseRfc7231DateTime","_1","parseMonthByShortName","_b","_2","adjustRfc850Year","parseTwoDigitYear","_c","_3","trimLeft","parseEpochTimestamp","valueAsDouble","Number","isNaN","Infinity","Date","Math","round","time","adjustedMonth","validateDayOfMonth","UTC","parseMilliseconds","thisYear","valueInThisCentury","floor","FIFTY_YEARS_IN_MILLIS","input","getTime","getUTCMilliseconds","monthIdx","indexOf","DAYS_IN_MONTH","maxDays","isLeapYear","type","lower","upper","dateVal","idx","length","charAt","slice"],"sources":["/Users/Junhaeng/untitled folder/junior-design/amplifyapp/node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/smithy-client/dist-es/date-utils.js"],"sourcesContent":["import { __read } from \"tslib\";\nimport { strictParseByte, strictParseDouble, strictParseFloat32, strictParseShort } from \"./parse-utils\";\nvar DAYS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nvar MONTHS = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nexport function dateToUtcString(date) {\n    var year = date.getUTCFullYear();\n    var month = date.getUTCMonth();\n    var dayOfWeek = date.getUTCDay();\n    var dayOfMonthInt = date.getUTCDate();\n    var hoursInt = date.getUTCHours();\n    var minutesInt = date.getUTCMinutes();\n    var secondsInt = date.getUTCSeconds();\n    var dayOfMonthString = dayOfMonthInt < 10 ? \"0\" + dayOfMonthInt : \"\" + dayOfMonthInt;\n    var hoursString = hoursInt < 10 ? \"0\" + hoursInt : \"\" + hoursInt;\n    var minutesString = minutesInt < 10 ? \"0\" + minutesInt : \"\" + minutesInt;\n    var secondsString = secondsInt < 10 ? \"0\" + secondsInt : \"\" + secondsInt;\n    return DAYS[dayOfWeek] + \", \" + dayOfMonthString + \" \" + MONTHS[month] + \" \" + year + \" \" + hoursString + \":\" + minutesString + \":\" + secondsString + \" GMT\";\n}\nvar RFC3339 = new RegExp(/^(\\d{4})-(\\d{2})-(\\d{2})[tT](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))?[zZ]$/);\nexport var parseRfc3339DateTime = function (value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-3339 date-times must be expressed as strings\");\n    }\n    var match = RFC3339.exec(value);\n    if (!match) {\n        throw new TypeError(\"Invalid RFC-3339 date-time value\");\n    }\n    var _a = __read(match, 8), _ = _a[0], yearStr = _a[1], monthStr = _a[2], dayStr = _a[3], hours = _a[4], minutes = _a[5], seconds = _a[6], fractionalMilliseconds = _a[7];\n    var year = strictParseShort(stripLeadingZeroes(yearStr));\n    var month = parseDateValue(monthStr, \"month\", 1, 12);\n    var day = parseDateValue(dayStr, \"day\", 1, 31);\n    return buildDate(year, month, day, { hours: hours, minutes: minutes, seconds: seconds, fractionalMilliseconds: fractionalMilliseconds });\n};\nvar IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/);\nvar RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/);\nvar ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? (\\d{4})$/);\nexport var parseRfc7231DateTime = function (value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-7231 date-times must be expressed as strings\");\n    }\n    var match = IMF_FIXDATE.exec(value);\n    if (match) {\n        var _a = __read(match, 8), _1 = _a[0], dayStr = _a[1], monthStr = _a[2], yearStr = _a[3], hours = _a[4], minutes = _a[5], seconds = _a[6], fractionalMilliseconds = _a[7];\n        return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, \"day\", 1, 31), { hours: hours, minutes: minutes, seconds: seconds, fractionalMilliseconds: fractionalMilliseconds });\n    }\n    match = RFC_850_DATE.exec(value);\n    if (match) {\n        var _b = __read(match, 8), _2 = _b[0], dayStr = _b[1], monthStr = _b[2], yearStr = _b[3], hours = _b[4], minutes = _b[5], seconds = _b[6], fractionalMilliseconds = _b[7];\n        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, \"day\", 1, 31), {\n            hours: hours,\n            minutes: minutes,\n            seconds: seconds,\n            fractionalMilliseconds: fractionalMilliseconds,\n        }));\n    }\n    match = ASC_TIME.exec(value);\n    if (match) {\n        var _c = __read(match, 8), _3 = _c[0], monthStr = _c[1], dayStr = _c[2], hours = _c[3], minutes = _c[4], seconds = _c[5], fractionalMilliseconds = _c[6], yearStr = _c[7];\n        return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), \"day\", 1, 31), { hours: hours, minutes: minutes, seconds: seconds, fractionalMilliseconds: fractionalMilliseconds });\n    }\n    throw new TypeError(\"Invalid RFC-7231 date-time value\");\n};\nexport var parseEpochTimestamp = function (value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    var valueAsDouble;\n    if (typeof value === \"number\") {\n        valueAsDouble = value;\n    }\n    else if (typeof value === \"string\") {\n        valueAsDouble = strictParseDouble(value);\n    }\n    else {\n        throw new TypeError(\"Epoch timestamps must be expressed as floating point numbers or their string representation\");\n    }\n    if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {\n        throw new TypeError(\"Epoch timestamps must be valid, non-Infinite, non-NaN numerics\");\n    }\n    return new Date(Math.round(valueAsDouble * 1000));\n};\nvar buildDate = function (year, month, day, time) {\n    var adjustedMonth = month - 1;\n    validateDayOfMonth(year, adjustedMonth, day);\n    return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, \"hour\", 0, 23), parseDateValue(time.minutes, \"minute\", 0, 59), parseDateValue(time.seconds, \"seconds\", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));\n};\nvar parseTwoDigitYear = function (value) {\n    var thisYear = new Date().getUTCFullYear();\n    var valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));\n    if (valueInThisCentury < thisYear) {\n        return valueInThisCentury + 100;\n    }\n    return valueInThisCentury;\n};\nvar FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1000;\nvar adjustRfc850Year = function (input) {\n    if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {\n        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));\n    }\n    return input;\n};\nvar parseMonthByShortName = function (value) {\n    var monthIdx = MONTHS.indexOf(value);\n    if (monthIdx < 0) {\n        throw new TypeError(\"Invalid month: \" + value);\n    }\n    return monthIdx + 1;\n};\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar validateDayOfMonth = function (year, month, day) {\n    var maxDays = DAYS_IN_MONTH[month];\n    if (month === 1 && isLeapYear(year)) {\n        maxDays = 29;\n    }\n    if (day > maxDays) {\n        throw new TypeError(\"Invalid day for \" + MONTHS[month] + \" in \" + year + \": \" + day);\n    }\n};\nvar isLeapYear = function (year) {\n    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n};\nvar parseDateValue = function (value, type, lower, upper) {\n    var dateVal = strictParseByte(stripLeadingZeroes(value));\n    if (dateVal < lower || dateVal > upper) {\n        throw new TypeError(type + \" must be between \" + lower + \" and \" + upper + \", inclusive\");\n    }\n    return dateVal;\n};\nvar parseMilliseconds = function (value) {\n    if (value === null || value === undefined) {\n        return 0;\n    }\n    return strictParseFloat32(\"0.\" + value) * 1000;\n};\nvar stripLeadingZeroes = function (value) {\n    var idx = 0;\n    while (idx < value.length - 1 && value.charAt(idx) === \"0\") {\n        idx++;\n    }\n    if (idx === 0) {\n        return value;\n    }\n    return value.slice(idx);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}