{"ast":null,"code":"var alphabetByEncoding = {};\nvar alphabetByValue = new Array(64);\nfor (var i = 0, start = \"A\".charCodeAt(0), limit = \"Z\".charCodeAt(0); i + start <= limit; i++) {\n  var char = String.fromCharCode(i + start);\n  alphabetByEncoding[char] = i;\n  alphabetByValue[i] = char;\n}\nfor (var i = 0, start = \"a\".charCodeAt(0), limit = \"z\".charCodeAt(0); i + start <= limit; i++) {\n  var char = String.fromCharCode(i + start);\n  var index = i + 26;\n  alphabetByEncoding[char] = index;\n  alphabetByValue[index] = char;\n}\nfor (var i = 0; i < 10; i++) {\n  alphabetByEncoding[i.toString(10)] = i + 52;\n  var char = i.toString(10);\n  var index = i + 52;\n  alphabetByEncoding[char] = index;\n  alphabetByValue[index] = char;\n}\nalphabetByEncoding[\"+\"] = 62;\nalphabetByValue[62] = \"+\";\nalphabetByEncoding[\"/\"] = 63;\nalphabetByValue[63] = \"/\";\nvar bitsPerLetter = 6;\nvar bitsPerByte = 8;\nvar maxLetterValue = 63;\nexport function fromBase64(input) {\n  var totalByteLength = input.length / 4 * 3;\n  if (input.substr(-2) === \"==\") {\n    totalByteLength -= 2;\n  } else if (input.substr(-1) === \"=\") {\n    totalByteLength--;\n  }\n  var out = new ArrayBuffer(totalByteLength);\n  var dataView = new DataView(out);\n  for (var i = 0; i < input.length; i += 4) {\n    var bits = 0;\n    var bitLength = 0;\n    for (var j = i, limit = i + 3; j <= limit; j++) {\n      if (input[j] !== \"=\") {\n        if (!(input[j] in alphabetByEncoding)) {\n          throw new TypeError(\"Invalid character \" + input[j] + \" in base64 string.\");\n        }\n        bits |= alphabetByEncoding[input[j]] << (limit - j) * bitsPerLetter;\n        bitLength += bitsPerLetter;\n      } else {\n        bits >>= bitsPerLetter;\n      }\n    }\n    var chunkOffset = i / 4 * 3;\n    bits >>= bitLength % bitsPerByte;\n    var byteLength = Math.floor(bitLength / bitsPerByte);\n    for (var k = 0; k < byteLength; k++) {\n      var offset = (byteLength - k - 1) * bitsPerByte;\n      dataView.setUint8(chunkOffset + k, (bits & 255 << offset) >> offset);\n    }\n  }\n  return new Uint8Array(out);\n}\nexport function toBase64(input) {\n  var str = \"\";\n  for (var i = 0; i < input.length; i += 3) {\n    var bits = 0;\n    var bitLength = 0;\n    for (var j = i, limit = Math.min(i + 3, input.length); j < limit; j++) {\n      bits |= input[j] << (limit - j - 1) * bitsPerByte;\n      bitLength += bitsPerByte;\n    }\n    var bitClusterCount = Math.ceil(bitLength / bitsPerLetter);\n    bits <<= bitClusterCount * bitsPerLetter - bitLength;\n    for (var k = 1; k <= bitClusterCount; k++) {\n      var offset = (bitClusterCount - k) * bitsPerLetter;\n      str += alphabetByValue[(bits & maxLetterValue << offset) >> offset];\n    }\n    str += \"==\".slice(0, 4 - bitClusterCount);\n  }\n  return str;\n}","map":{"version":3,"names":["alphabetByEncoding","alphabetByValue","Array","i","start","charCodeAt","limit","char","String","fromCharCode","index","toString","bitsPerLetter","bitsPerByte","maxLetterValue","fromBase64","input","totalByteLength","length","substr","out","ArrayBuffer","dataView","DataView","bits","bitLength","j","TypeError","chunkOffset","byteLength","Math","floor","k","offset","setUint8","Uint8Array","toBase64","str","min","bitClusterCount","ceil","slice"],"sources":["/Users/Junhaeng/untitled folder/junior-design/amplifyapp/node_modules/@aws-sdk/client-location/node_modules/@aws-sdk/util-base64-browser/dist-es/index.js"],"sourcesContent":["var alphabetByEncoding = {};\nvar alphabetByValue = new Array(64);\nfor (var i = 0, start = \"A\".charCodeAt(0), limit = \"Z\".charCodeAt(0); i + start <= limit; i++) {\n    var char = String.fromCharCode(i + start);\n    alphabetByEncoding[char] = i;\n    alphabetByValue[i] = char;\n}\nfor (var i = 0, start = \"a\".charCodeAt(0), limit = \"z\".charCodeAt(0); i + start <= limit; i++) {\n    var char = String.fromCharCode(i + start);\n    var index = i + 26;\n    alphabetByEncoding[char] = index;\n    alphabetByValue[index] = char;\n}\nfor (var i = 0; i < 10; i++) {\n    alphabetByEncoding[i.toString(10)] = i + 52;\n    var char = i.toString(10);\n    var index = i + 52;\n    alphabetByEncoding[char] = index;\n    alphabetByValue[index] = char;\n}\nalphabetByEncoding[\"+\"] = 62;\nalphabetByValue[62] = \"+\";\nalphabetByEncoding[\"/\"] = 63;\nalphabetByValue[63] = \"/\";\nvar bitsPerLetter = 6;\nvar bitsPerByte = 8;\nvar maxLetterValue = 63;\nexport function fromBase64(input) {\n    var totalByteLength = (input.length / 4) * 3;\n    if (input.substr(-2) === \"==\") {\n        totalByteLength -= 2;\n    }\n    else if (input.substr(-1) === \"=\") {\n        totalByteLength--;\n    }\n    var out = new ArrayBuffer(totalByteLength);\n    var dataView = new DataView(out);\n    for (var i = 0; i < input.length; i += 4) {\n        var bits = 0;\n        var bitLength = 0;\n        for (var j = i, limit = i + 3; j <= limit; j++) {\n            if (input[j] !== \"=\") {\n                if (!(input[j] in alphabetByEncoding)) {\n                    throw new TypeError(\"Invalid character \" + input[j] + \" in base64 string.\");\n                }\n                bits |= alphabetByEncoding[input[j]] << ((limit - j) * bitsPerLetter);\n                bitLength += bitsPerLetter;\n            }\n            else {\n                bits >>= bitsPerLetter;\n            }\n        }\n        var chunkOffset = (i / 4) * 3;\n        bits >>= bitLength % bitsPerByte;\n        var byteLength = Math.floor(bitLength / bitsPerByte);\n        for (var k = 0; k < byteLength; k++) {\n            var offset = (byteLength - k - 1) * bitsPerByte;\n            dataView.setUint8(chunkOffset + k, (bits & (255 << offset)) >> offset);\n        }\n    }\n    return new Uint8Array(out);\n}\nexport function toBase64(input) {\n    var str = \"\";\n    for (var i = 0; i < input.length; i += 3) {\n        var bits = 0;\n        var bitLength = 0;\n        for (var j = i, limit = Math.min(i + 3, input.length); j < limit; j++) {\n            bits |= input[j] << ((limit - j - 1) * bitsPerByte);\n            bitLength += bitsPerByte;\n        }\n        var bitClusterCount = Math.ceil(bitLength / bitsPerLetter);\n        bits <<= bitClusterCount * bitsPerLetter - bitLength;\n        for (var k = 1; k <= bitClusterCount; k++) {\n            var offset = (bitClusterCount - k) * bitsPerLetter;\n            str += alphabetByValue[(bits & (maxLetterValue << offset)) >> offset];\n        }\n        str += \"==\".slice(0, 4 - bitClusterCount);\n    }\n    return str;\n}\n"],"mappings":"AAAA,IAAIA,kBAAkB,GAAG,CAAC,CAAC;AAC3B,IAAIC,eAAe,GAAG,IAAIC,KAAK,CAAC,EAAE,CAAC;AACnC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,KAAK,GAAG,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,EAAEC,KAAK,GAAG,GAAG,CAACD,UAAU,CAAC,CAAC,CAAC,EAAEF,CAAC,GAAGC,KAAK,IAAIE,KAAK,EAAEH,CAAC,EAAE,EAAE;EAC3F,IAAII,IAAI,GAAGC,MAAM,CAACC,YAAY,CAACN,CAAC,GAAGC,KAAK,CAAC;EACzCJ,kBAAkB,CAACO,IAAI,CAAC,GAAGJ,CAAC;EAC5BF,eAAe,CAACE,CAAC,CAAC,GAAGI,IAAI;AAC7B;AACA,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEC,KAAK,GAAG,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,EAAEC,KAAK,GAAG,GAAG,CAACD,UAAU,CAAC,CAAC,CAAC,EAAEF,CAAC,GAAGC,KAAK,IAAIE,KAAK,EAAEH,CAAC,EAAE,EAAE;EAC3F,IAAII,IAAI,GAAGC,MAAM,CAACC,YAAY,CAACN,CAAC,GAAGC,KAAK,CAAC;EACzC,IAAIM,KAAK,GAAGP,CAAC,GAAG,EAAE;EAClBH,kBAAkB,CAACO,IAAI,CAAC,GAAGG,KAAK;EAChCT,eAAe,CAACS,KAAK,CAAC,GAAGH,IAAI;AACjC;AACA,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;EACzBH,kBAAkB,CAACG,CAAC,CAACQ,QAAQ,CAAC,EAAE,CAAC,CAAC,GAAGR,CAAC,GAAG,EAAE;EAC3C,IAAII,IAAI,GAAGJ,CAAC,CAACQ,QAAQ,CAAC,EAAE,CAAC;EACzB,IAAID,KAAK,GAAGP,CAAC,GAAG,EAAE;EAClBH,kBAAkB,CAACO,IAAI,CAAC,GAAGG,KAAK;EAChCT,eAAe,CAACS,KAAK,CAAC,GAAGH,IAAI;AACjC;AACAP,kBAAkB,CAAC,GAAG,CAAC,GAAG,EAAE;AAC5BC,eAAe,CAAC,EAAE,CAAC,GAAG,GAAG;AACzBD,kBAAkB,CAAC,GAAG,CAAC,GAAG,EAAE;AAC5BC,eAAe,CAAC,EAAE,CAAC,GAAG,GAAG;AACzB,IAAIW,aAAa,GAAG,CAAC;AACrB,IAAIC,WAAW,GAAG,CAAC;AACnB,IAAIC,cAAc,GAAG,EAAE;AACvB,OAAO,SAASC,UAAUA,CAACC,KAAK,EAAE;EAC9B,IAAIC,eAAe,GAAID,KAAK,CAACE,MAAM,GAAG,CAAC,GAAI,CAAC;EAC5C,IAAIF,KAAK,CAACG,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;IAC3BF,eAAe,IAAI,CAAC;EACxB,CAAC,MACI,IAAID,KAAK,CAACG,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IAC/BF,eAAe,EAAE;EACrB;EACA,IAAIG,GAAG,GAAG,IAAIC,WAAW,CAACJ,eAAe,CAAC;EAC1C,IAAIK,QAAQ,GAAG,IAAIC,QAAQ,CAACH,GAAG,CAAC;EAChC,KAAK,IAAIjB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGa,KAAK,CAACE,MAAM,EAAEf,CAAC,IAAI,CAAC,EAAE;IACtC,IAAIqB,IAAI,GAAG,CAAC;IACZ,IAAIC,SAAS,GAAG,CAAC;IACjB,KAAK,IAAIC,CAAC,GAAGvB,CAAC,EAAEG,KAAK,GAAGH,CAAC,GAAG,CAAC,EAAEuB,CAAC,IAAIpB,KAAK,EAAEoB,CAAC,EAAE,EAAE;MAC5C,IAAIV,KAAK,CAACU,CAAC,CAAC,KAAK,GAAG,EAAE;QAClB,IAAI,EAAEV,KAAK,CAACU,CAAC,CAAC,IAAI1B,kBAAkB,CAAC,EAAE;UACnC,MAAM,IAAI2B,SAAS,CAAC,oBAAoB,GAAGX,KAAK,CAACU,CAAC,CAAC,GAAG,oBAAoB,CAAC;QAC/E;QACAF,IAAI,IAAIxB,kBAAkB,CAACgB,KAAK,CAACU,CAAC,CAAC,CAAC,IAAK,CAACpB,KAAK,GAAGoB,CAAC,IAAId,aAAc;QACrEa,SAAS,IAAIb,aAAa;MAC9B,CAAC,MACI;QACDY,IAAI,KAAKZ,aAAa;MAC1B;IACJ;IACA,IAAIgB,WAAW,GAAIzB,CAAC,GAAG,CAAC,GAAI,CAAC;IAC7BqB,IAAI,KAAKC,SAAS,GAAGZ,WAAW;IAChC,IAAIgB,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACN,SAAS,GAAGZ,WAAW,CAAC;IACpD,KAAK,IAAImB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,UAAU,EAAEG,CAAC,EAAE,EAAE;MACjC,IAAIC,MAAM,GAAG,CAACJ,UAAU,GAAGG,CAAC,GAAG,CAAC,IAAInB,WAAW;MAC/CS,QAAQ,CAACY,QAAQ,CAACN,WAAW,GAAGI,CAAC,EAAE,CAACR,IAAI,GAAI,GAAG,IAAIS,MAAO,KAAKA,MAAM,CAAC;IAC1E;EACJ;EACA,OAAO,IAAIE,UAAU,CAACf,GAAG,CAAC;AAC9B;AACA,OAAO,SAASgB,QAAQA,CAACpB,KAAK,EAAE;EAC5B,IAAIqB,GAAG,GAAG,EAAE;EACZ,KAAK,IAAIlC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGa,KAAK,CAACE,MAAM,EAAEf,CAAC,IAAI,CAAC,EAAE;IACtC,IAAIqB,IAAI,GAAG,CAAC;IACZ,IAAIC,SAAS,GAAG,CAAC;IACjB,KAAK,IAAIC,CAAC,GAAGvB,CAAC,EAAEG,KAAK,GAAGwB,IAAI,CAACQ,GAAG,CAACnC,CAAC,GAAG,CAAC,EAAEa,KAAK,CAACE,MAAM,CAAC,EAAEQ,CAAC,GAAGpB,KAAK,EAAEoB,CAAC,EAAE,EAAE;MACnEF,IAAI,IAAIR,KAAK,CAACU,CAAC,CAAC,IAAK,CAACpB,KAAK,GAAGoB,CAAC,GAAG,CAAC,IAAIb,WAAY;MACnDY,SAAS,IAAIZ,WAAW;IAC5B;IACA,IAAI0B,eAAe,GAAGT,IAAI,CAACU,IAAI,CAACf,SAAS,GAAGb,aAAa,CAAC;IAC1DY,IAAI,KAAKe,eAAe,GAAG3B,aAAa,GAAGa,SAAS;IACpD,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIO,eAAe,EAAEP,CAAC,EAAE,EAAE;MACvC,IAAIC,MAAM,GAAG,CAACM,eAAe,GAAGP,CAAC,IAAIpB,aAAa;MAClDyB,GAAG,IAAIpC,eAAe,CAAC,CAACuB,IAAI,GAAIV,cAAc,IAAImB,MAAO,KAAKA,MAAM,CAAC;IACzE;IACAI,GAAG,IAAI,IAAI,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,GAAGF,eAAe,CAAC;EAC7C;EACA,OAAOF,GAAG;AACd"},"metadata":{},"sourceType":"module"}