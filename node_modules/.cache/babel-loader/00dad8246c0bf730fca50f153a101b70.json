{"ast":null,"code":"/*!\n 2020 Jason Mulligan <jason.mulligan@avoidwork.com>\n @version 6.4.0\n*/\n!function (e, i) {\n  \"object\" == typeof exports && \"undefined\" != typeof module ? module.exports = i() : \"function\" == typeof define && define.amd ? define(i) : (e = \"undefined\" != typeof globalThis ? globalThis : e || self).filesize = i();\n}(this, function () {\n  \"use strict\";\n\n  var e = /^(b|B)$/,\n    i = {\n      iec: {\n        bits: [\"b\", \"Kib\", \"Mib\", \"Gib\", \"Tib\", \"Pib\", \"Eib\", \"Zib\", \"Yib\"],\n        bytes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"]\n      },\n      jedec: {\n        bits: [\"b\", \"Kb\", \"Mb\", \"Gb\", \"Tb\", \"Pb\", \"Eb\", \"Zb\", \"Yb\"],\n        bytes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n      }\n    },\n    t = {\n      iec: [\"\", \"kibi\", \"mebi\", \"gibi\", \"tebi\", \"pebi\", \"exbi\", \"zebi\", \"yobi\"],\n      jedec: [\"\", \"kilo\", \"mega\", \"giga\", \"tera\", \"peta\", \"exa\", \"zetta\", \"yotta\"]\n    },\n    o = {\n      floor: Math.floor,\n      ceil: Math.ceil\n    };\n  function n(n) {\n    var r,\n      a,\n      b,\n      l,\n      s,\n      c,\n      d,\n      f,\n      p,\n      u,\n      B,\n      h,\n      g,\n      y,\n      M,\n      m,\n      v,\n      x,\n      N,\n      j,\n      T,\n      E = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n      w = [],\n      P = 0;\n    if (isNaN(n)) throw new TypeError(\"Invalid number\");\n    if (b = !0 === E.bits, M = !0 === E.unix, h = !0 === E.pad, a = E.base || 2, g = void 0 !== E.round ? E.round : M ? 1 : 2, d = void 0 !== E.locale ? E.locale : \"\", f = E.localeOptions || {}, m = void 0 !== E.separator ? E.separator : \"\", v = void 0 !== E.spacer ? E.spacer : M ? \"\" : \" \", N = E.symbols || {}, x = 2 === a && E.standard || \"jedec\", B = E.output || \"string\", s = !0 === E.fullform, c = E.fullforms instanceof Array ? E.fullforms : [], r = void 0 !== E.exponent ? E.exponent : -1, j = o[E.roundingMethod] || Math.round, p = (u = Number(n)) < 0, l = a > 2 ? 1e3 : 1024, T = !1 === isNaN(E.precision) ? parseInt(E.precision, 10) : 0, p && (u = -u), (-1 === r || isNaN(r)) && (r = Math.floor(Math.log(u) / Math.log(l))) < 0 && (r = 0), r > 8 && (T > 0 && (T += 8 - r), r = 8), \"exponent\" === B) return r;\n    if (0 === u) w[0] = 0, y = w[1] = M ? \"\" : i[x][b ? \"bits\" : \"bytes\"][r];else {\n      P = u / (2 === a ? Math.pow(2, 10 * r) : Math.pow(1e3, r)), b && (P *= 8) >= l && r < 8 && (P /= l, r++);\n      var k = Math.pow(10, r > 0 ? g : 0);\n      w[0] = j(P * k) / k, w[0] === l && r < 8 && void 0 === E.exponent && (w[0] = 1, r++), y = w[1] = 10 === a && 1 === r ? b ? \"kb\" : \"kB\" : i[x][b ? \"bits\" : \"bytes\"][r], M && (w[1] = \"jedec\" === x ? w[1].charAt(0) : r > 0 ? w[1].replace(/B$/, \"\") : w[1], e.test(w[1]) && (w[0] = Math.floor(w[0]), w[1] = \"\"));\n    }\n    if (p && (w[0] = -w[0]), T > 0 && (w[0] = w[0].toPrecision(T)), w[1] = N[w[1]] || w[1], !0 === d ? w[0] = w[0].toLocaleString() : d.length > 0 ? w[0] = w[0].toLocaleString(d, f) : m.length > 0 && (w[0] = w[0].toString().replace(\".\", m)), h && !1 === Number.isInteger(w[0]) && g > 0) {\n      var G = m || \".\",\n        K = w[0].toString().split(G),\n        S = K[1] || \"\",\n        Y = S.length,\n        Z = g - Y;\n      w[0] = \"\".concat(K[0]).concat(G).concat(S.padEnd(Y + Z, \"0\"));\n    }\n    return s && (w[1] = c[r] ? c[r] : t[x][r] + (b ? \"bit\" : \"byte\") + (1 === w[0] ? \"\" : \"s\")), \"array\" === B ? w : \"object\" === B ? {\n      value: w[0],\n      symbol: w[1],\n      exponent: r,\n      unit: y\n    } : w.join(v);\n  }\n  return n.partial = function (e) {\n    return function (i) {\n      return n(i, e);\n    };\n  }, n;\n});","map":{"version":3,"sources":["../src/filesize.js"],"names":["b","symbol","iec","bits","bytes","jedec","fullform","roundingFuncs","floor","Math","ceil","filesize","arg","descriptor","result","val","e","base","full","fullforms","locale","localeOptions","neg","num","output","pad","round","u","unix","separator","spacer","standard","symbols","roundingFunc","precision","isNaN","TypeError","Array","exponent","roundingMethod","Number","parseInt","log","pow","p","charAt","replace","test","toPrecision","toLocaleString","length","toString","isInteger","x","tmp","split","s","l","n","padEnd","value","unit","join","partial","opt"],"mappings":"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","sourcesContent":["const b = /^(b|B)$/,\n\tsymbol = {\n\t\tiec: {\n\t\t\tbits: [\"b\", \"Kib\", \"Mib\", \"Gib\", \"Tib\", \"Pib\", \"Eib\", \"Zib\", \"Yib\"],\n\t\t\tbytes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"]\n\t\t},\n\t\tjedec: {\n\t\t\tbits: [\"b\", \"Kb\", \"Mb\", \"Gb\", \"Tb\", \"Pb\", \"Eb\", \"Zb\", \"Yb\"],\n\t\t\tbytes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n\t\t}\n\t},\n\tfullform = {\n\t\tiec: [\"\", \"kibi\", \"mebi\", \"gibi\", \"tebi\", \"pebi\", \"exbi\", \"zebi\", \"yobi\"],\n\t\tjedec: [\"\", \"kilo\", \"mega\", \"giga\", \"tera\", \"peta\", \"exa\", \"zetta\", \"yotta\"]\n\t},\n\troundingFuncs = {\n\t\tfloor: Math.floor,\n\t\tceil: Math.ceil\n\t};\n\n/**\n * filesize\n *\n * @method filesize\n * @param  {Mixed}   arg        String, Int or Float to transform\n * @param  {Object}  descriptor [Optional] Flags\n * @return {String}             Readable file size String\n */\nfunction filesize (arg, descriptor = {}) {\n\tlet result = [],\n\t\tval = 0,\n\t\te, base, bits, ceil, full, fullforms, locale, localeOptions, neg, num, output, pad, round, u, unix, separator, spacer, standard, symbols, roundingFunc, precision;\n\n\tif (isNaN(arg)) {\n\t\tthrow new TypeError(\"Invalid number\");\n\t}\n\n\tbits = descriptor.bits === true;\n\tunix = descriptor.unix === true;\n\tpad = descriptor.pad === true;\n\tbase = descriptor.base || 2;\n\tround = descriptor.round !== void 0 ? descriptor.round : unix ? 1 : 2;\n\tlocale = descriptor.locale !== void 0 ? descriptor.locale : \"\";\n\tlocaleOptions = descriptor.localeOptions || {};\n\tseparator = descriptor.separator !== void 0 ? descriptor.separator : \"\";\n\tspacer = descriptor.spacer !== void 0 ? descriptor.spacer : unix ? \"\" : \" \";\n\tsymbols = descriptor.symbols || {};\n\tstandard = base === 2 ? descriptor.standard || \"jedec\" : \"jedec\";\n\toutput = descriptor.output || \"string\";\n\tfull = descriptor.fullform === true;\n\tfullforms = descriptor.fullforms instanceof Array ? descriptor.fullforms : [];\n\te = descriptor.exponent !== void 0 ? descriptor.exponent : -1;\n\troundingFunc = roundingFuncs[descriptor.roundingMethod] || Math.round;\n\tnum = Number(arg);\n\tneg = num < 0;\n\tceil = base > 2 ? 1000 : 1024;\n\tprecision = isNaN(descriptor.precision) === false ? parseInt(descriptor.precision, 10) : 0;\n\n\t// Flipping a negative number to determine the size\n\tif (neg) {\n\t\tnum = -num;\n\t}\n\n\t// Determining the exponent\n\tif (e === -1 || isNaN(e)) {\n\t\te = Math.floor(Math.log(num) / Math.log(ceil));\n\n\t\tif (e < 0) {\n\t\t\te = 0;\n\t\t}\n\t}\n\n\t// Exceeding supported length, time to reduce & multiply\n\tif (e > 8) {\n\t\tif (precision > 0) {\n\t\t\tprecision += 8 - e;\n\t\t}\n\n\t\te = 8;\n\t}\n\n\tif (output === \"exponent\") {\n\t\treturn e;\n\t}\n\n\t// Zero is now a special case because bytes divide by 1\n\tif (num === 0) {\n\t\tresult[0] = 0;\n\t\tu = result[1] = unix ? \"\" : symbol[standard][bits ? \"bits\" : \"bytes\"][e];\n\t} else {\n\t\tval = num / (base === 2 ? Math.pow(2, e * 10) : Math.pow(1000, e));\n\n\t\tif (bits) {\n\t\t\tval = val * 8;\n\n\t\t\tif (val >= ceil && e < 8) {\n\t\t\t\tval = val / ceil;\n\t\t\t\te++;\n\t\t\t}\n\t\t}\n\n\t\tconst p = Math.pow(10, e > 0 ? round : 0);\n\t\tresult[0] = roundingFunc(val * p) / p;\n\n\t\tif (result[0] === ceil && e < 8 && descriptor.exponent === void 0) {\n\t\t\tresult[0] = 1;\n\t\t\te++;\n\t\t}\n\n\t\tu = result[1] = base === 10 && e === 1 ? bits ? \"kb\" : \"kB\" : symbol[standard][bits ? \"bits\" : \"bytes\"][e];\n\n\t\tif (unix) {\n\t\t\tresult[1] = standard === \"jedec\" ? result[1].charAt(0) : e > 0 ? result[1].replace(/B$/, \"\") : result[1];\n\n\t\t\tif (b.test(result[1])) {\n\t\t\t\tresult[0] = Math.floor(result[0]);\n\t\t\t\tresult[1] = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Decorating a 'diff'\n\tif (neg) {\n\t\tresult[0] = -result[0];\n\t}\n\n\t// Setting optional precision\n\tif (precision > 0) {\n\t\tresult[0] = result[0].toPrecision(precision);\n\t}\n\n\t// Applying custom symbol\n\tresult[1] = symbols[result[1]] || result[1];\n\n\tif (locale === true) {\n\t\tresult[0] = result[0].toLocaleString();\n\t} else if (locale.length > 0) {\n\t\tresult[0] = result[0].toLocaleString(locale, localeOptions);\n\t} else if (separator.length > 0) {\n\t\tresult[0] = result[0].toString().replace(\".\", separator);\n\t}\n\n\tif (pad && Number.isInteger(result[0]) === false && round > 0) {\n\t\tconst x = separator || \".\",\n\t\t\ttmp = result[0].toString().split(x),\n\t\t\ts = tmp[1] || \"\",\n\t\t\tl = s.length,\n\t\t\tn = round - l;\n\n\t\tresult[0] = `${tmp[0]}${x}${s.padEnd(l + n, \"0\")}`;\n\t}\n\n\tif (full) {\n\t\tresult[1] = fullforms[e] ? fullforms[e] : fullform[standard][e] + (bits ? \"bit\" : \"byte\") + (result[0] === 1 ? \"\" : \"s\");\n\t}\n\n\t// Returning Array, Object, or String (default)\n\treturn output === \"array\" ? result : output === \"object\" ? {value: result[0], symbol: result[1], exponent: e, unit: u} : result.join(spacer);\n}\n\n// Partial application for functional programming\nfilesize.partial = opt => arg => filesize(arg, opt);\n\nexport default filesize;\n"]},"metadata":{},"sourceType":"script"}