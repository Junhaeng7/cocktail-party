{"ast":null,"code":"import _toConsumableArray from \"/Users/Junhaeng/untitled folder/junior-design/amplifyapp/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/Junhaeng/untitled folder/junior-design/amplifyapp/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/Junhaeng/untitled folder/junior-design/amplifyapp/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/Junhaeng/untitled folder/junior-design/amplifyapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/Junhaeng/untitled folder/junior-design/amplifyapp/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/Junhaeng/untitled folder/junior-design/amplifyapp/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _get from \"/Users/Junhaeng/untitled folder/junior-design/amplifyapp/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/Junhaeng/untitled folder/junior-design/amplifyapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport { MixedType } from './MixedType';\nexport var ArrayType = /*#__PURE__*/function (_MixedType) {\n  _inherits(ArrayType, _MixedType);\n  var _super = _createSuper(ArrayType);\n  function ArrayType(errorMessage) {\n    var _thisSuper, _this;\n    _classCallCheck(this, ArrayType);\n    _this = _super.call(this, 'array');\n    _get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(ArrayType.prototype)), \"pushRule\", _thisSuper).call(_thisSuper, {\n      onValid: function onValid(v) {\n        return Array.isArray(v);\n      },\n      errorMessage: errorMessage || _this.locale.type\n    });\n    return _this;\n  }\n  _createClass(ArrayType, [{\n    key: \"rangeLength\",\n    value: function rangeLength(minLength, maxLength) {\n      var errorMessage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.locale.rangeLength;\n      _get(_getPrototypeOf(ArrayType.prototype), \"pushRule\", this).call(this, {\n        onValid: function onValid(value) {\n          return value.length >= minLength && value.length <= maxLength;\n        },\n        errorMessage: errorMessage,\n        params: {\n          minLength: minLength,\n          maxLength: maxLength\n        }\n      });\n      return this;\n    }\n  }, {\n    key: \"minLength\",\n    value: function minLength(_minLength) {\n      var errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.minLength;\n      _get(_getPrototypeOf(ArrayType.prototype), \"pushRule\", this).call(this, {\n        onValid: function onValid(value) {\n          return value.length >= _minLength;\n        },\n        errorMessage: errorMessage,\n        params: {\n          minLength: _minLength\n        }\n      });\n      return this;\n    }\n  }, {\n    key: \"maxLength\",\n    value: function maxLength(_maxLength) {\n      var errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.maxLength;\n      _get(_getPrototypeOf(ArrayType.prototype), \"pushRule\", this).call(this, {\n        onValid: function onValid(value) {\n          return value.length <= _maxLength;\n        },\n        errorMessage: errorMessage,\n        params: {\n          maxLength: _maxLength\n        }\n      });\n      return this;\n    }\n  }, {\n    key: \"unrepeatable\",\n    value: function unrepeatable() {\n      var errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.locale.unrepeatable;\n      _get(_getPrototypeOf(ArrayType.prototype), \"pushRule\", this).call(this, {\n        onValid: function onValid(items) {\n          var hash = {};\n          for (var i in items) {\n            if (hash[items[i]]) {\n              return false;\n            }\n            hash[items[i]] = true;\n          }\n          return true;\n        },\n        errorMessage: errorMessage\n      });\n      return this;\n    }\n  }, {\n    key: \"of\",\n    value: function of(type) {\n      _get(_getPrototypeOf(ArrayType.prototype), \"pushRule\", this).call(this, {\n        onValid: function onValid(items, data, filedName) {\n          var checkResults = items.map(function (value, index) {\n            var name = Array.isArray(filedName) ? [].concat(_toConsumableArray(filedName), [\"[\".concat(index, \"]\")]) : [filedName, \"[\".concat(index, \"]\")];\n            return type.check(value, data, name);\n          });\n          var hasError = !!checkResults.find(function (item) {\n            return item === null || item === void 0 ? void 0 : item.hasError;\n          });\n          return {\n            hasError: hasError,\n            array: checkResults\n          };\n        }\n      });\n      return this;\n    }\n  }]);\n  return ArrayType;\n}(MixedType);\nexport default function getArrayType(errorMessage) {\n  return new ArrayType(errorMessage);\n}","map":{"version":3,"sources":["../src/ArrayType.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { MixedType } from './MixedType';\nexport class ArrayType extends MixedType {\n    constructor(errorMessage) {\n        super('array');\n        super.pushRule({\n            onValid: v => Array.isArray(v),\n            errorMessage: errorMessage || this.locale.type\n        });\n    }\n    rangeLength(minLength, maxLength, errorMessage = this.locale.rangeLength) {\n        super.pushRule({\n            onValid: (value) => value.length >= minLength && value.length <= maxLength,\n            errorMessage,\n            params: { minLength, maxLength }\n        });\n        return this;\n    }\n    minLength(minLength, errorMessage = this.locale.minLength) {\n        super.pushRule({\n            onValid: value => value.length >= minLength,\n            errorMessage,\n            params: { minLength }\n        });\n        return this;\n    }\n    maxLength(maxLength, errorMessage = this.locale.maxLength) {\n        super.pushRule({\n            onValid: value => value.length <= maxLength,\n            errorMessage,\n            params: { maxLength }\n        });\n        return this;\n    }\n    unrepeatable(errorMessage = this.locale.unrepeatable) {\n        super.pushRule({\n            onValid: items => {\n                const hash = {};\n                for (const i in items) {\n                    if (hash[items[i]]) {\n                        return false;\n                    }\n                    hash[items[i]] = true;\n                }\n                return true;\n            },\n            errorMessage\n        });\n        return this;\n    }\n    of(type) {\n        super.pushRule({\n            onValid: (items, data, filedName) => {\n                const checkResults = items.map((value, index) => {\n                    const name = Array.isArray(filedName)\n                        ? [...filedName, `[${index}]`]\n                        : [filedName, `[${index}]`];\n                    return type.check(value, data, name);\n                });\n                const hasError = !!checkResults.find(item => item === null || item === void 0 ? void 0 : item.hasError);\n                return {\n                    hasError,\n                    array: checkResults\n                };\n            }\n        });\n        return this;\n    }\n}\nexport default function getArrayType(errorMessage) {\n    return new ArrayType(errorMessage);\n}\n//# sourceMappingURL=ArrayType.js.map"]},"metadata":{},"sourceType":"module"}