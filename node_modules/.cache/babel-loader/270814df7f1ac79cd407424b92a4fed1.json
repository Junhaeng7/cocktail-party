{"ast":null,"code":"import _classCallCheck from \"/Users/Junhaeng/untitled folder/junior-design/amplifyapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Junhaeng/untitled folder/junior-design/amplifyapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n/* eslint-enable complexity, no-redeclare, no-var, one-var */\n\nimport FFT from './fft';\n\n/**\n * @typedef {Object} SpectrogramPluginParams\n * @property {string|HTMLElement} container Selector of element or element in\n * which to render\n * @property {number} fftSamples=512 Number of samples to fetch to FFT. Must be\n * a power of 2.\n * @property {boolean} labels Set to true to display frequency labels.\n * @property {number} noverlap Size of the overlapping window. Must be <\n * fftSamples. Auto deduced from canvas size by default.\n * @property {string} windowFunc='hann' The window function to be used. One of\n * these: `'bartlett'`, `'bartlettHann'`, `'blackman'`, `'cosine'`, `'gauss'`,\n * `'hamming'`, `'hann'`, `'lanczoz'`, `'rectangular'`, `'triangular'`\n * @property {?number} alpha Some window functions have this extra value.\n * (Between 0 and 1)\n * @property {number} pixelRatio=wavesurfer.params.pixelRatio to control the\n * size of the spectrogram in relation with its canvas. 1 = Draw on the whole\n * canvas. 2 = Draw on a quarter (1/2 the length and 1/2 the width)\n * @property {?boolean} deferInit Set to true to manually call\n * `initPlugin('spectrogram')`\n * @property {?number[][]} colorMap A 256 long array of 4-element arrays.\n * Each entry should contain a float between 0 and 1 and specify\n * r, g, b, and alpha.\n */\n\n/**\n * Render a spectrogram visualisation of the audio.\n *\n * @implements {PluginClass}\n * @extends {Observer}\n * @example\n * // es6\n * import SpectrogramPlugin from 'wavesurfer.spectrogram.js';\n *\n * // commonjs\n * var SpectrogramPlugin = require('wavesurfer.spectrogram.js');\n *\n * // if you are using <script> tags\n * var SpectrogramPlugin = window.WaveSurfer.spectrogram;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     SpectrogramPlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nvar SpectrogramPlugin = /*#__PURE__*/function () {\n  function SpectrogramPlugin(params, ws) {\n    var _this = this;\n    _classCallCheck(this, SpectrogramPlugin);\n    this.params = params;\n    this.wavesurfer = ws;\n    this.util = ws.util;\n    this.frequenciesDataUrl = params.frequenciesDataUrl;\n    this._onScroll = function (e) {\n      _this.updateScroll(e);\n    };\n    this._onRender = function () {\n      _this.render();\n    };\n    this._onWrapperClick = function (e) {\n      _this._wrapperClickHandler(e);\n    };\n    this._onReady = function () {\n      var drawer = _this.drawer = ws.drawer;\n      _this.container = 'string' == typeof params.container ? document.querySelector(params.container) : params.container;\n      if (!_this.container) {\n        throw Error('No container for WaveSurfer spectrogram');\n      }\n      if (params.colorMap) {\n        if (params.colorMap.length < 256) {\n          throw new Error('Colormap must contain 256 elements');\n        }\n        for (var i = 0; i < params.colorMap.length; i++) {\n          var cmEntry = params.colorMap[i];\n          if (cmEntry.length !== 4) {\n            throw new Error('ColorMap entries must contain 4 values');\n          }\n        }\n        _this.colorMap = params.colorMap;\n      } else {\n        _this.colorMap = [];\n        for (var _i = 0; _i < 256; _i++) {\n          var val = (255 - _i) / 256;\n          _this.colorMap.push([val, val, val, 1]);\n        }\n      }\n      _this.width = drawer.width;\n      _this.pixelRatio = _this.params.pixelRatio || ws.params.pixelRatio;\n      _this.fftSamples = _this.params.fftSamples || ws.params.fftSamples || 512;\n      _this.height = _this.fftSamples / 2;\n      _this.noverlap = params.noverlap;\n      _this.windowFunc = params.windowFunc;\n      _this.alpha = params.alpha;\n      _this.createWrapper();\n      _this.createCanvas();\n      _this.render();\n      drawer.wrapper.addEventListener('scroll', _this._onScroll);\n      ws.on('redraw', _this._onRender);\n    };\n  }\n  _createClass(SpectrogramPlugin, [{\n    key: \"init\",\n    value: function init() {\n      // Check if wavesurfer is ready\n      if (this.wavesurfer.isReady) {\n        this._onReady();\n      } else {\n        this.wavesurfer.once('ready', this._onReady);\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.unAll();\n      this.wavesurfer.un('ready', this._onReady);\n      this.wavesurfer.un('redraw', this._onRender);\n      this.drawer && this.drawer.wrapper.removeEventListener('scroll', this._onScroll);\n      this.wavesurfer = null;\n      this.util = null;\n      this.params = null;\n      if (this.wrapper) {\n        this.wrapper.removeEventListener('click', this._onWrapperClick);\n        this.wrapper.parentNode.removeChild(this.wrapper);\n        this.wrapper = null;\n      }\n    }\n  }, {\n    key: \"createWrapper\",\n    value: function createWrapper() {\n      var prevSpectrogram = this.container.querySelector('spectrogram');\n      if (prevSpectrogram) {\n        this.container.removeChild(prevSpectrogram);\n      }\n      var wsParams = this.wavesurfer.params;\n      this.wrapper = document.createElement('spectrogram');\n      // if labels are active\n      if (this.params.labels) {\n        var labelsEl = this.labelsEl = document.createElement('canvas');\n        labelsEl.classList.add('spec-labels');\n        this.drawer.style(labelsEl, {\n          left: 0,\n          position: 'absolute',\n          zIndex: 9,\n          height: \"\".concat(this.height / this.pixelRatio, \"px\"),\n          width: \"\".concat(55 / this.pixelRatio, \"px\")\n        });\n        this.wrapper.appendChild(labelsEl);\n        this.loadLabels('rgba(68,68,68,0.5)', '12px', '10px', '', '#fff', '#f7f7f7', 'center', '#specLabels');\n      }\n      this.drawer.style(this.wrapper, {\n        display: 'block',\n        position: 'relative',\n        userSelect: 'none',\n        webkitUserSelect: 'none',\n        height: \"\".concat(this.height / this.pixelRatio, \"px\")\n      });\n      if (wsParams.fillParent || wsParams.scrollParent) {\n        this.drawer.style(this.wrapper, {\n          width: '100%',\n          overflowX: 'hidden',\n          overflowY: 'hidden'\n        });\n      }\n      this.container.appendChild(this.wrapper);\n      this.wrapper.addEventListener('click', this._onWrapperClick);\n    }\n  }, {\n    key: \"_wrapperClickHandler\",\n    value: function _wrapperClickHandler(event) {\n      event.preventDefault();\n      var relX = 'offsetX' in event ? event.offsetX : event.layerX;\n      this.fireEvent('click', relX / this.width || 0);\n    }\n  }, {\n    key: \"createCanvas\",\n    value: function createCanvas() {\n      var canvas = this.canvas = this.wrapper.appendChild(document.createElement('canvas'));\n      this.spectrCc = canvas.getContext('2d');\n      this.util.style(canvas, {\n        position: 'absolute',\n        zIndex: 4\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.updateCanvasStyle();\n      if (this.frequenciesDataUrl) {\n        this.loadFrequenciesData(this.frequenciesDataUrl);\n      } else {\n        this.getFrequencies(this.drawSpectrogram);\n      }\n    }\n  }, {\n    key: \"updateCanvasStyle\",\n    value: function updateCanvasStyle() {\n      var width = Math.round(this.width / this.pixelRatio) + 'px';\n      this.canvas.width = this.width;\n      this.canvas.height = this.height;\n      this.canvas.style.width = width;\n    }\n  }, {\n    key: \"drawSpectrogram\",\n    value: function drawSpectrogram(frequenciesData, my) {\n      var spectrCc = my.spectrCc;\n      var height = my.height;\n      var width = my.width;\n      var pixels = my.resample(frequenciesData);\n      var heightFactor = my.buffer ? 2 / my.buffer.numberOfChannels : 1;\n      if (spectrCc) {\n        var imageData = spectrCc.createImageData(width, height);\n        var i;\n        var j;\n        var k;\n        for (i = 0; i < pixels.length; i++) {\n          for (j = 0; j < pixels[i].length; j++) {\n            var colorMap = my.colorMap[pixels[i][j]];\n            /* eslint-disable max-depth */\n            for (k = 0; k < heightFactor; k++) {\n              var y = height - j * heightFactor;\n              if (heightFactor === 2 && k === 1) {\n                y--;\n              }\n              var redIndex = y * (width * 4) + i * 4;\n              imageData.data[redIndex] = colorMap[0] * 255;\n              imageData.data[redIndex + 1] = colorMap[1] * 255;\n              imageData.data[redIndex + 2] = colorMap[2] * 255;\n              imageData.data[redIndex + 3] = colorMap[3] * 255;\n            }\n            /* eslint-enable max-depth */\n          }\n        }\n\n        spectrCc.putImageData(imageData, 0, 0);\n      }\n    }\n  }, {\n    key: \"getFrequencies\",\n    value: function getFrequencies(callback) {\n      var fftSamples = this.fftSamples;\n      var buffer = this.buffer = this.wavesurfer.backend.buffer;\n      var channelOne = buffer.getChannelData(0);\n      var bufferLength = buffer.length;\n      var sampleRate = buffer.sampleRate;\n      var frequencies = [];\n      if (!buffer) {\n        this.fireEvent('error', 'Web Audio buffer is not available');\n        return;\n      }\n      var noverlap = this.noverlap;\n      if (!noverlap) {\n        var uniqueSamplesPerPx = buffer.length / this.canvas.width;\n        noverlap = Math.max(0, Math.round(fftSamples - uniqueSamplesPerPx));\n      }\n      var fft = new FFT(fftSamples, sampleRate, this.windowFunc, this.alpha);\n      var maxSlicesCount = Math.floor(bufferLength / (fftSamples - noverlap));\n      var currentOffset = 0;\n      while (currentOffset + fftSamples < channelOne.length) {\n        var segment = channelOne.slice(currentOffset, currentOffset + fftSamples);\n        var spectrum = fft.calculateSpectrum(segment);\n        var array = new Uint8Array(fftSamples / 2);\n        var j = void 0;\n        for (j = 0; j < fftSamples / 2; j++) {\n          array[j] = Math.max(-255, Math.log10(spectrum[j]) * 45);\n        }\n        frequencies.push(array);\n        currentOffset += fftSamples - noverlap;\n      }\n      callback(frequencies, this);\n    }\n  }, {\n    key: \"loadFrequenciesData\",\n    value: function loadFrequenciesData(url) {\n      var _this2 = this;\n      var request = this.util.fetchFile({\n        url: url\n      });\n      request.on('success', function (data) {\n        return _this2.drawSpectrogram(JSON.parse(data), _this2);\n      });\n      request.on('error', function (e) {\n        return _this2.fireEvent('error', e);\n      });\n      return request;\n    }\n  }, {\n    key: \"freqType\",\n    value: function freqType(freq) {\n      return freq >= 1000 ? (freq / 1000).toFixed(1) : Math.round(freq);\n    }\n  }, {\n    key: \"unitType\",\n    value: function unitType(freq) {\n      return freq >= 1000 ? 'KHz' : 'Hz';\n    }\n  }, {\n    key: \"loadLabels\",\n    value: function loadLabels(bgFill, fontSizeFreq, fontSizeUnit, fontType, textColorFreq, textColorUnit, textAlign, container) {\n      var frequenciesHeight = this.height;\n      bgFill = bgFill || 'rgba(68,68,68,0)';\n      fontSizeFreq = fontSizeFreq || '12px';\n      fontSizeUnit = fontSizeUnit || '10px';\n      fontType = fontType || 'Helvetica';\n      textColorFreq = textColorFreq || '#fff';\n      textColorUnit = textColorUnit || '#fff';\n      textAlign = textAlign || 'center';\n      container = container || '#specLabels';\n      var bgWidth = 55;\n      var getMaxY = frequenciesHeight || 512;\n      var labelIndex = 5 * (getMaxY / 256);\n      var freqStart = 0;\n      var step = (this.wavesurfer.backend.ac.sampleRate / 2 - freqStart) / labelIndex;\n\n      // prepare canvas element for labels\n      var ctx = this.labelsEl.getContext('2d');\n      this.labelsEl.height = this.height;\n      this.labelsEl.width = bgWidth;\n      if (ctx) {\n        // fill background\n        ctx.fillStyle = bgFill;\n        ctx.fillRect(0, 0, bgWidth, getMaxY);\n        ctx.fill();\n        var i;\n\n        // render labels\n        for (i = 0; i <= labelIndex; i++) {\n          ctx.textAlign = textAlign;\n          ctx.textBaseline = 'middle';\n          var freq = freqStart + step * i;\n          var index = Math.round(freq / (this.sampleRate / 2) * this.fftSamples);\n          var label = this.freqType(freq);\n          var units = this.unitType(freq);\n          var yLabelOffset = 2;\n          var x = 16;\n          var y = void 0;\n          if (i == 0) {\n            y = getMaxY + i - 10;\n            // unit label\n            ctx.fillStyle = textColorUnit;\n            ctx.font = fontSizeUnit + ' ' + fontType;\n            ctx.fillText(units, x + 24, y);\n            // freq label\n            ctx.fillStyle = textColorFreq;\n            ctx.font = fontSizeFreq + ' ' + fontType;\n            ctx.fillText(label, x, y);\n          } else {\n            y = getMaxY - i * 50 + yLabelOffset;\n            // unit label\n            ctx.fillStyle = textColorUnit;\n            ctx.font = fontSizeUnit + ' ' + fontType;\n            ctx.fillText(units, x + 24, y);\n            // freq label\n            ctx.fillStyle = textColorFreq;\n            ctx.font = fontSizeFreq + ' ' + fontType;\n            ctx.fillText(label, x, y);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"updateScroll\",\n    value: function updateScroll(e) {\n      if (this.wrapper) {\n        this.wrapper.scrollLeft = e.target.scrollLeft;\n      }\n    }\n  }, {\n    key: \"resample\",\n    value: function resample(oldMatrix) {\n      var columnsNumber = this.width;\n      var newMatrix = [];\n      var oldPiece = 1 / oldMatrix.length;\n      var newPiece = 1 / columnsNumber;\n      var i;\n      for (i = 0; i < columnsNumber; i++) {\n        var column = new Array(oldMatrix[0].length);\n        var j = void 0;\n        for (j = 0; j < oldMatrix.length; j++) {\n          var oldStart = j * oldPiece;\n          var oldEnd = oldStart + oldPiece;\n          var newStart = i * newPiece;\n          var newEnd = newStart + newPiece;\n          var overlap = oldEnd <= newStart || newEnd <= oldStart ? 0 : Math.min(Math.max(oldEnd, newStart), Math.max(newEnd, oldStart)) - Math.max(Math.min(oldEnd, newStart), Math.min(newEnd, oldStart));\n          var k = void 0;\n          /* eslint-disable max-depth */\n          if (overlap > 0) {\n            for (k = 0; k < oldMatrix[0].length; k++) {\n              if (column[k] == null) {\n                column[k] = 0;\n              }\n              column[k] += overlap / newPiece * oldMatrix[j][k];\n            }\n          }\n          /* eslint-enable max-depth */\n        }\n\n        var intColumn = new Uint8Array(oldMatrix[0].length);\n        var m = void 0;\n        for (m = 0; m < oldMatrix[0].length; m++) {\n          intColumn[m] = column[m];\n        }\n        newMatrix.push(intColumn);\n      }\n      return newMatrix;\n    }\n  }], [{\n    key: \"create\",\n    value:\n    /**\n     * Spectrogram plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param  {SpectrogramPluginParams} params Parameters used to initialise the plugin\n     * @return {PluginDefinition} An object representing the plugin.\n     */\n    function create(params) {\n      return {\n        name: 'spectrogram',\n        deferInit: params && params.deferInit ? params.deferInit : false,\n        params: params,\n        staticProps: {\n          FFT: FFT\n        },\n        instance: SpectrogramPlugin\n      };\n    }\n  }]);\n  return SpectrogramPlugin;\n}();\nexport { SpectrogramPlugin as default };","map":{"version":3,"names":["FFT","SpectrogramPlugin","params","ws","_this","_classCallCheck","wavesurfer","util","frequenciesDataUrl","_onScroll","e","updateScroll","_onRender","render","_onWrapperClick","_wrapperClickHandler","_onReady","drawer","container","document","querySelector","Error","colorMap","length","i","cmEntry","val","push","width","pixelRatio","fftSamples","height","noverlap","windowFunc","alpha","createWrapper","createCanvas","wrapper","addEventListener","on","_createClass","key","value","init","isReady","once","destroy","unAll","un","removeEventListener","parentNode","removeChild","prevSpectrogram","wsParams","createElement","labels","labelsEl","classList","add","style","left","position","zIndex","concat","appendChild","loadLabels","display","userSelect","webkitUserSelect","fillParent","scrollParent","overflowX","overflowY","event","preventDefault","relX","offsetX","layerX","fireEvent","canvas","spectrCc","getContext","updateCanvasStyle","loadFrequenciesData","getFrequencies","drawSpectrogram","Math","round","frequenciesData","my","pixels","resample","heightFactor","buffer","numberOfChannels","imageData","createImageData","j","k","y","redIndex","data","putImageData","callback","backend","channelOne","getChannelData","bufferLength","sampleRate","frequencies","uniqueSamplesPerPx","max","fft","maxSlicesCount","floor","currentOffset","segment","slice","spectrum","calculateSpectrum","array","Uint8Array","log10","url","_this2","request","fetchFile","JSON","parse","freqType","freq","toFixed","unitType","bgFill","fontSizeFreq","fontSizeUnit","fontType","textColorFreq","textColorUnit","textAlign","frequenciesHeight","bgWidth","getMaxY","labelIndex","freqStart","step","ac","ctx","fillStyle","fillRect","fill","textBaseline","index","label","units","yLabelOffset","x","font","fillText","scrollLeft","target","oldMatrix","columnsNumber","newMatrix","oldPiece","newPiece","column","Array","oldStart","oldEnd","newStart","newEnd","overlap","min","intColumn","m","create","name","deferInit","staticProps","instance","default"],"sources":["/Users/Junhaeng/untitled folder/junior-design/amplifyapp/node_modules/wavesurfer.js/src/plugin/spectrogram/index.js"],"sourcesContent":["/* eslint-enable complexity, no-redeclare, no-var, one-var */\n\nimport FFT from './fft';\n\n/**\n * @typedef {Object} SpectrogramPluginParams\n * @property {string|HTMLElement} container Selector of element or element in\n * which to render\n * @property {number} fftSamples=512 Number of samples to fetch to FFT. Must be\n * a power of 2.\n * @property {boolean} labels Set to true to display frequency labels.\n * @property {number} noverlap Size of the overlapping window. Must be <\n * fftSamples. Auto deduced from canvas size by default.\n * @property {string} windowFunc='hann' The window function to be used. One of\n * these: `'bartlett'`, `'bartlettHann'`, `'blackman'`, `'cosine'`, `'gauss'`,\n * `'hamming'`, `'hann'`, `'lanczoz'`, `'rectangular'`, `'triangular'`\n * @property {?number} alpha Some window functions have this extra value.\n * (Between 0 and 1)\n * @property {number} pixelRatio=wavesurfer.params.pixelRatio to control the\n * size of the spectrogram in relation with its canvas. 1 = Draw on the whole\n * canvas. 2 = Draw on a quarter (1/2 the length and 1/2 the width)\n * @property {?boolean} deferInit Set to true to manually call\n * `initPlugin('spectrogram')`\n * @property {?number[][]} colorMap A 256 long array of 4-element arrays.\n * Each entry should contain a float between 0 and 1 and specify\n * r, g, b, and alpha.\n */\n\n/**\n * Render a spectrogram visualisation of the audio.\n *\n * @implements {PluginClass}\n * @extends {Observer}\n * @example\n * // es6\n * import SpectrogramPlugin from 'wavesurfer.spectrogram.js';\n *\n * // commonjs\n * var SpectrogramPlugin = require('wavesurfer.spectrogram.js');\n *\n * // if you are using <script> tags\n * var SpectrogramPlugin = window.WaveSurfer.spectrogram;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     SpectrogramPlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nexport default class SpectrogramPlugin {\n    /**\n     * Spectrogram plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param  {SpectrogramPluginParams} params Parameters used to initialise the plugin\n     * @return {PluginDefinition} An object representing the plugin.\n     */\n    static create(params) {\n        return {\n            name: 'spectrogram',\n            deferInit: params && params.deferInit ? params.deferInit : false,\n            params: params,\n            staticProps: {\n                FFT: FFT\n            },\n            instance: SpectrogramPlugin\n        };\n    }\n\n    constructor(params, ws) {\n        this.params = params;\n        this.wavesurfer = ws;\n        this.util = ws.util;\n\n        this.frequenciesDataUrl = params.frequenciesDataUrl;\n        this._onScroll = e => {\n            this.updateScroll(e);\n        };\n        this._onRender = () => {\n            this.render();\n        };\n        this._onWrapperClick = e => {\n            this._wrapperClickHandler(e);\n        };\n        this._onReady = () => {\n            const drawer = (this.drawer = ws.drawer);\n\n            this.container =\n                'string' == typeof params.container\n                    ? document.querySelector(params.container)\n                    : params.container;\n\n            if (!this.container) {\n                throw Error('No container for WaveSurfer spectrogram');\n            }\n            if (params.colorMap) {\n                if (params.colorMap.length < 256) {\n                    throw new Error('Colormap must contain 256 elements');\n                }\n                for (let i = 0; i < params.colorMap.length; i++) {\n                    const cmEntry = params.colorMap[i];\n                    if (cmEntry.length !== 4) {\n                        throw new Error(\n                            'ColorMap entries must contain 4 values'\n                        );\n                    }\n                }\n                this.colorMap = params.colorMap;\n            } else {\n                this.colorMap = [];\n                for (let i = 0; i < 256; i++) {\n                    const val = (255 - i) / 256;\n                    this.colorMap.push([val, val, val, 1]);\n                }\n            }\n            this.width = drawer.width;\n            this.pixelRatio = this.params.pixelRatio || ws.params.pixelRatio;\n            this.fftSamples =\n                this.params.fftSamples || ws.params.fftSamples || 512;\n            this.height = this.fftSamples / 2;\n            this.noverlap = params.noverlap;\n            this.windowFunc = params.windowFunc;\n            this.alpha = params.alpha;\n\n            this.createWrapper();\n            this.createCanvas();\n            this.render();\n\n            drawer.wrapper.addEventListener('scroll', this._onScroll);\n            ws.on('redraw', this._onRender);\n        };\n    }\n\n    init() {\n        // Check if wavesurfer is ready\n        if (this.wavesurfer.isReady) {\n            this._onReady();\n        } else {\n            this.wavesurfer.once('ready', this._onReady);\n        }\n    }\n\n    destroy() {\n        this.unAll();\n        this.wavesurfer.un('ready', this._onReady);\n        this.wavesurfer.un('redraw', this._onRender);\n        this.drawer && this.drawer.wrapper.removeEventListener('scroll', this._onScroll);\n        this.wavesurfer = null;\n        this.util = null;\n        this.params = null;\n        if (this.wrapper) {\n            this.wrapper.removeEventListener('click', this._onWrapperClick);\n            this.wrapper.parentNode.removeChild(this.wrapper);\n            this.wrapper = null;\n        }\n    }\n\n    createWrapper() {\n        const prevSpectrogram = this.container.querySelector('spectrogram');\n        if (prevSpectrogram) {\n            this.container.removeChild(prevSpectrogram);\n        }\n        const wsParams = this.wavesurfer.params;\n        this.wrapper = document.createElement('spectrogram');\n        // if labels are active\n        if (this.params.labels) {\n            const labelsEl = (this.labelsEl = document.createElement('canvas'));\n            labelsEl.classList.add('spec-labels');\n            this.drawer.style(labelsEl, {\n                left: 0,\n                position: 'absolute',\n                zIndex: 9,\n                height: `${this.height / this.pixelRatio}px`,\n                width: `${55 / this.pixelRatio}px`\n            });\n            this.wrapper.appendChild(labelsEl);\n            this.loadLabels(\n                'rgba(68,68,68,0.5)',\n                '12px',\n                '10px',\n                '',\n                '#fff',\n                '#f7f7f7',\n                'center',\n                '#specLabels'\n            );\n        }\n\n        this.drawer.style(this.wrapper, {\n            display: 'block',\n            position: 'relative',\n            userSelect: 'none',\n            webkitUserSelect: 'none',\n            height: `${this.height / this.pixelRatio}px`\n        });\n\n        if (wsParams.fillParent || wsParams.scrollParent) {\n            this.drawer.style(this.wrapper, {\n                width: '100%',\n                overflowX: 'hidden',\n                overflowY: 'hidden'\n            });\n        }\n        this.container.appendChild(this.wrapper);\n\n        this.wrapper.addEventListener('click', this._onWrapperClick);\n    }\n\n    _wrapperClickHandler(event) {\n        event.preventDefault();\n        const relX = 'offsetX' in event ? event.offsetX : event.layerX;\n        this.fireEvent('click', relX / this.width || 0);\n    }\n\n    createCanvas() {\n        const canvas = (this.canvas = this.wrapper.appendChild(\n            document.createElement('canvas')\n        ));\n\n        this.spectrCc = canvas.getContext('2d');\n\n        this.util.style(canvas, {\n            position: 'absolute',\n            zIndex: 4\n        });\n    }\n\n    render() {\n        this.updateCanvasStyle();\n\n        if (this.frequenciesDataUrl) {\n            this.loadFrequenciesData(this.frequenciesDataUrl);\n        } else {\n            this.getFrequencies(this.drawSpectrogram);\n        }\n    }\n\n    updateCanvasStyle() {\n        const width = Math.round(this.width / this.pixelRatio) + 'px';\n        this.canvas.width = this.width;\n        this.canvas.height = this.height;\n        this.canvas.style.width = width;\n    }\n\n    drawSpectrogram(frequenciesData, my) {\n        const spectrCc = my.spectrCc;\n        const height = my.height;\n        const width = my.width;\n        const pixels = my.resample(frequenciesData);\n        const heightFactor = my.buffer ? 2 / my.buffer.numberOfChannels : 1;\n        if (spectrCc) {\n            const imageData = spectrCc.createImageData(width, height);\n            let i;\n            let j;\n            let k;\n\n            for (i = 0; i < pixels.length; i++) {\n                for (j = 0; j < pixels[i].length; j++) {\n                    const colorMap = my.colorMap[pixels[i][j]];\n                    /* eslint-disable max-depth */\n                    for (k = 0; k < heightFactor; k++) {\n                        let y = height - j * heightFactor;\n                        if (heightFactor === 2 && k === 1) {\n                            y--;\n                        }\n                        const redIndex = y * (width * 4) + i * 4;\n                        imageData.data[redIndex] = colorMap[0] * 255;\n                        imageData.data[redIndex + 1] = colorMap[1] * 255;\n                        imageData.data[redIndex + 2] = colorMap[2] * 255;\n                        imageData.data[redIndex + 3] = colorMap[3] * 255;\n                    }\n                    /* eslint-enable max-depth */\n                }\n            }\n            spectrCc.putImageData(imageData, 0, 0);\n        }\n    }\n\n    getFrequencies(callback) {\n        const fftSamples = this.fftSamples;\n        const buffer = (this.buffer = this.wavesurfer.backend.buffer);\n        const channelOne = buffer.getChannelData(0);\n        const bufferLength = buffer.length;\n        const sampleRate = buffer.sampleRate;\n        const frequencies = [];\n\n        if (!buffer) {\n            this.fireEvent('error', 'Web Audio buffer is not available');\n            return;\n        }\n\n        let noverlap = this.noverlap;\n        if (!noverlap) {\n            const uniqueSamplesPerPx = buffer.length / this.canvas.width;\n            noverlap = Math.max(0, Math.round(fftSamples - uniqueSamplesPerPx));\n        }\n\n        const fft = new FFT(\n            fftSamples,\n            sampleRate,\n            this.windowFunc,\n            this.alpha\n        );\n        const maxSlicesCount = Math.floor(\n            bufferLength / (fftSamples - noverlap)\n        );\n        let currentOffset = 0;\n\n        while (currentOffset + fftSamples < channelOne.length) {\n            const segment = channelOne.slice(\n                currentOffset,\n                currentOffset + fftSamples\n            );\n            const spectrum = fft.calculateSpectrum(segment);\n            const array = new Uint8Array(fftSamples / 2);\n            let j;\n            for (j = 0; j < fftSamples / 2; j++) {\n                array[j] = Math.max(-255, Math.log10(spectrum[j]) * 45);\n            }\n            frequencies.push(array);\n            currentOffset += fftSamples - noverlap;\n        }\n        callback(frequencies, this);\n    }\n\n    loadFrequenciesData(url) {\n        const request = this.util.fetchFile({ url: url });\n\n        request.on('success', data =>\n            this.drawSpectrogram(JSON.parse(data), this)\n        );\n        request.on('error', e => this.fireEvent('error', e));\n\n        return request;\n    }\n\n    freqType(freq) {\n        return freq >= 1000 ? (freq / 1000).toFixed(1) : Math.round(freq);\n    }\n\n    unitType(freq) {\n        return freq >= 1000 ? 'KHz' : 'Hz';\n    }\n\n    loadLabels(\n        bgFill,\n        fontSizeFreq,\n        fontSizeUnit,\n        fontType,\n        textColorFreq,\n        textColorUnit,\n        textAlign,\n        container\n    ) {\n        const frequenciesHeight = this.height;\n        bgFill = bgFill || 'rgba(68,68,68,0)';\n        fontSizeFreq = fontSizeFreq || '12px';\n        fontSizeUnit = fontSizeUnit || '10px';\n        fontType = fontType || 'Helvetica';\n        textColorFreq = textColorFreq || '#fff';\n        textColorUnit = textColorUnit || '#fff';\n        textAlign = textAlign || 'center';\n        container = container || '#specLabels';\n        const bgWidth = 55;\n        const getMaxY = frequenciesHeight || 512;\n        const labelIndex = 5 * (getMaxY / 256);\n        const freqStart = 0;\n        const step =\n            (this.wavesurfer.backend.ac.sampleRate / 2 - freqStart) /\n            labelIndex;\n\n        // prepare canvas element for labels\n        const ctx = this.labelsEl.getContext('2d');\n        this.labelsEl.height = this.height;\n        this.labelsEl.width = bgWidth;\n\n        if (ctx) {\n            // fill background\n            ctx.fillStyle = bgFill;\n            ctx.fillRect(0, 0, bgWidth, getMaxY);\n            ctx.fill();\n            let i;\n\n            // render labels\n            for (i = 0; i <= labelIndex; i++) {\n                ctx.textAlign = textAlign;\n                ctx.textBaseline = 'middle';\n\n                const freq = freqStart + step * i;\n                const index = Math.round(\n                    (freq / (this.sampleRate / 2)) * this.fftSamples\n                );\n                const label = this.freqType(freq);\n                const units = this.unitType(freq);\n                const yLabelOffset = 2;\n                const x = 16;\n                let y;\n\n                if (i == 0) {\n                    y = getMaxY + i - 10;\n                    // unit label\n                    ctx.fillStyle = textColorUnit;\n                    ctx.font = fontSizeUnit + ' ' + fontType;\n                    ctx.fillText(units, x + 24, y);\n                    // freq label\n                    ctx.fillStyle = textColorFreq;\n                    ctx.font = fontSizeFreq + ' ' + fontType;\n                    ctx.fillText(label, x, y);\n                } else {\n                    y = getMaxY - i * 50 + yLabelOffset;\n                    // unit label\n                    ctx.fillStyle = textColorUnit;\n                    ctx.font = fontSizeUnit + ' ' + fontType;\n                    ctx.fillText(units, x + 24, y);\n                    // freq label\n                    ctx.fillStyle = textColorFreq;\n                    ctx.font = fontSizeFreq + ' ' + fontType;\n                    ctx.fillText(label, x, y);\n                }\n            }\n        }\n    }\n\n    updateScroll(e) {\n        if (this.wrapper) {\n            this.wrapper.scrollLeft = e.target.scrollLeft;\n        }\n    }\n\n    resample(oldMatrix) {\n        const columnsNumber = this.width;\n        const newMatrix = [];\n\n        const oldPiece = 1 / oldMatrix.length;\n        const newPiece = 1 / columnsNumber;\n        let i;\n\n        for (i = 0; i < columnsNumber; i++) {\n            const column = new Array(oldMatrix[0].length);\n            let j;\n\n            for (j = 0; j < oldMatrix.length; j++) {\n                const oldStart = j * oldPiece;\n                const oldEnd = oldStart + oldPiece;\n                const newStart = i * newPiece;\n                const newEnd = newStart + newPiece;\n\n                const overlap =\n                    oldEnd <= newStart || newEnd <= oldStart\n                        ? 0\n                        : Math.min(\n                            Math.max(oldEnd, newStart),\n                            Math.max(newEnd, oldStart)\n                        ) -\n                        Math.max(\n                            Math.min(oldEnd, newStart),\n                            Math.min(newEnd, oldStart)\n                        );\n                let k;\n                /* eslint-disable max-depth */\n                if (overlap > 0) {\n                    for (k = 0; k < oldMatrix[0].length; k++) {\n                        if (column[k] == null) {\n                            column[k] = 0;\n                        }\n                        column[k] += (overlap / newPiece) * oldMatrix[j][k];\n                    }\n                }\n                /* eslint-enable max-depth */\n            }\n\n            const intColumn = new Uint8Array(oldMatrix[0].length);\n            let m;\n\n            for (m = 0; m < oldMatrix[0].length; m++) {\n                intColumn[m] = column[m];\n            }\n\n            newMatrix.push(intColumn);\n        }\n\n        return newMatrix;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}